[{"/Users/ivan/Metadata/src/index.js":"1","/Users/ivan/Metadata/src/App.js":"2","/Users/ivan/Metadata/src/reportWebVitals.js":"3","/Users/ivan/Metadata/src/WalletContext.js":"4","/Users/ivan/Metadata/src/components/Main.js":"5","/Users/ivan/Metadata/src/utils.js":"6"},{"size":535,"mtime":1679475909781,"results":"7","hashOfConfig":"8"},{"size":220,"mtime":1679475909780,"results":"9","hashOfConfig":"8"},{"size":362,"mtime":1679475909781,"results":"10","hashOfConfig":"8"},{"size":2168,"mtime":1679475909780,"results":"11","hashOfConfig":"8"},{"size":690,"mtime":1679475909781,"results":"12","hashOfConfig":"8"},{"size":2499,"mtime":1679475909781,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","suppressedMessages":"16","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"8yw6vs",{"filePath":"17","messages":"18","suppressedMessages":"19","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"20","messages":"21","suppressedMessages":"22","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"23","messages":"24","suppressedMessages":"25","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"26"},{"filePath":"27","messages":"28","suppressedMessages":"29","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30"},{"filePath":"31","messages":"32","suppressedMessages":"33","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34"},"/Users/ivan/Metadata/src/index.js",[],[],"/Users/ivan/Metadata/src/App.js",[],[],"/Users/ivan/Metadata/src/reportWebVitals.js",[],[],"/Users/ivan/Metadata/src/WalletContext.js",["35","36","37"],[],"import React, { useMemo } from \"react\";\nimport {\n  ConnectionProvider,\n  WalletProvider,\n} from \"@solana/wallet-adapter-react\";\nimport { WalletAdapterNetwork } from \"@solana/wallet-adapter-base\";\nimport { UnsafeBurnerWalletAdapter } from \"@solana/wallet-adapter-wallets\";\nimport {\n  WalletModalProvider,\n  WalletDisconnectButton,\n  WalletMultiButton,\n} from \"@solana/wallet-adapter-react-ui\";\nimport {\n  LedgerWalletAdapter,\n  PhantomWalletAdapter,\n  SlopeWalletAdapter,\n  SolflareWalletAdapter,\n  SolletExtensionWalletAdapter,\n  SolletWalletAdapter,\n  TorusWalletAdapter,\n} from \"@solana/wallet-adapter-wallets\";\nimport { clusterApiUrl } from \"@solana/web3.js\";\nimport Main from \"./components/Main\";\nimport Container from \"react-bootstrap/Container\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport Stack from \"react-bootstrap/Stack\";\n\n// Default styles that can be overridden by your app\nrequire(\"@solana/wallet-adapter-react-ui/styles.css\");\n\nexport const Wallet = () => {\n  // The network can be set to 'devnet', 'testnet', or 'mainnet-beta'.\n  const network = WalletAdapterNetwork.Mainnet;\n\n  // You can also provide a custom RPC endpoint.\n  const endpoint = useMemo(() => clusterApiUrl(network), [network]);\n\n  const wallets = useMemo(\n    () => [\n      new PhantomWalletAdapter(),\n      new SlopeWalletAdapter(),\n      new SolflareWalletAdapter({ network }),\n      new TorusWalletAdapter(),\n      new LedgerWalletAdapter(),\n      new SolletWalletAdapter({ network }),\n      new SolletExtensionWalletAdapter({ network }),\n    ],\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [network]\n  );\n\n  return (\n    <ConnectionProvider endpoint={endpoint}>\n      <WalletProvider wallets={wallets} autoConnect>\n        <WalletModalProvider>\n          <Container>\n            <Stack gap={3}>\n              <Row>\n                <WalletMultiButton />\n              </Row>\n              {/* <WalletDisconnectButton /> */}\n              <Row>\n                <Main />\n              </Row>\n            </Stack>\n          </Container>\n        </WalletModalProvider>\n      </WalletProvider>\n    </ConnectionProvider>\n  );\n};\n","/Users/ivan/Metadata/src/components/Main.js",["38","39","40","41","42","43"],[],"import { useState, useEffect, useRef, Fragment } from \"react\";\nimport { useConnection, useWallet } from \"@solana/wallet-adapter-react\";\nimport Button from \"react-bootstrap/Button\";\nimport { createTokenMetaData } from \"../utils\";\n\nexport default function Main() {\n  const { connection } = useConnection();\n  const wallet = useWallet();\n  const mintId = useRef();\n  const name = useRef();\n  const symbol = useRef();\n  const uri = useRef();\n\n  const create = () => {\n    createTokenMetaData(wallet, mintId.current.value);\n  };\n  return (\n    <Fragment>\n      <input type=\"text\" placeholder=\"Token mint ID\" ref={mintId} />\n\n      <Button onClick={create}>Submit</Button>\n    </Fragment>\n  );\n}\n","/Users/ivan/Metadata/src/utils.js",["44","45","46","47"],[],"import {\n  Connection,\n  clusterApiUrl,\n  PublicKey,\n  Transaction,\n  Keypair,\n} from \"@solana/web3.js\";\nimport * as splToken from \"@solana/spl-token\";\nimport * as mpl from \"@metaplex-foundation/mpl-token-metadata\";\nimport * as anchor from \"@project-serum/anchor\";\n//import { Metaplex, walletAdapterIdentity } from \"@metaplex-foundation/js\";\nconst getConnection = () => {\n  // const network = \"https://api.devnet.solana.com/\";\n  const network = \"https://api.metaplex.solana.com/\";\n\n  const connection = new Connection(network, \"processed\");\n  return connection;\n};\n\nexport const createTokenMetaData = async (wallet, mintId) => {\n  const connection = getConnection();\n  const mint = new PublicKey(mintId);\n  console.log(\"Mint id\", mint.toString());\n  const seed1 = Buffer.from(anchor.utils.bytes.utf8.encode(\"metadata\"));\n  const seed2 = Buffer.from(mpl.PROGRAM_ID.toBytes());\n  const seed3 = Buffer.from(mint.toBytes());\n  const [metadataPDA, _bump] = PublicKey.findProgramAddressSync(\n    [seed1, seed2, seed3],\n    mpl.PROGRAM_ID\n  );\n  const accounts = {\n    metadata: metadataPDA,\n    mint: mint,\n    mintAuthority: wallet.publicKey,\n    payer: wallet.publicKey,\n    updateAuthority: wallet.publicKey,\n  };\n  const dataV2 = {\n    name: \"HOX Coin\",\n    symbol: \"HOX\",\n    uri: \"https://gateway.pinata.cloud/ipfs/Qme5yBSqWhkH7Xa57fAyB1r9qTXaQ3Mj5ucZHovyEcFyee\",\n    // we don't need that\n    sellerFeeBasisPoints: 0,\n    creators: null,\n    collection: null,\n    uses: null,\n  };\n  const args = {\n    createMetadataAccountArgsV2: {\n      data: dataV2,\n      isMutable: true,\n      // updateAuthority: wallet.publicKey,\n      // primarySaleHappened: true,\n    },\n  };\n  const createToken = splToken.createInitializeMintInstruction(\n    mint,\n    18,\n    wallet.publicKey,\n    wallet.publicKey\n  );\n  let ix = mpl.createCreateMetadataAccountV2Instruction(accounts, args);\n  // console.log(mint.toString());\n\n  const transaction = new Transaction().add(ix);\n  //transaction.add(ix);\n  const {\n    context: { slot: minContextSlot },\n    value: { blockhash, lastValidBlockHeight },\n  } = await connection.getLatestBlockhashAndContext();\n\n  try {\n    const signature = await wallet.sendTransaction(transaction, connection, {\n      minContextSlot,\n    });\n    console.log(signature);\n    const sign = await connection.confirmTransaction({\n      blockhash,\n      lastValidBlockHeight,\n      signature,\n    });\n    console.log(\"check logs here: \", sign);\n  } catch (error) {\n    console.log(error);\n  }\n};\n",{"ruleId":"48","severity":1,"message":"49","line":7,"column":10,"nodeType":"50","messageId":"51","endLine":7,"endColumn":35},{"ruleId":"48","severity":1,"message":"52","line":10,"column":3,"nodeType":"50","messageId":"51","endLine":10,"endColumn":25},{"ruleId":"48","severity":1,"message":"53","line":26,"column":8,"nodeType":"50","messageId":"51","endLine":26,"endColumn":11},{"ruleId":"48","severity":1,"message":"54","line":1,"column":10,"nodeType":"50","messageId":"51","endLine":1,"endColumn":18},{"ruleId":"48","severity":1,"message":"55","line":1,"column":20,"nodeType":"50","messageId":"51","endLine":1,"endColumn":29},{"ruleId":"48","severity":1,"message":"56","line":7,"column":11,"nodeType":"50","messageId":"51","endLine":7,"endColumn":21},{"ruleId":"48","severity":1,"message":"57","line":10,"column":9,"nodeType":"50","messageId":"51","endLine":10,"endColumn":13},{"ruleId":"48","severity":1,"message":"58","line":11,"column":9,"nodeType":"50","messageId":"51","endLine":11,"endColumn":15},{"ruleId":"48","severity":1,"message":"59","line":12,"column":9,"nodeType":"50","messageId":"51","endLine":12,"endColumn":12},{"ruleId":"48","severity":1,"message":"60","line":3,"column":3,"nodeType":"50","messageId":"51","endLine":3,"endColumn":16},{"ruleId":"48","severity":1,"message":"61","line":6,"column":3,"nodeType":"50","messageId":"51","endLine":6,"endColumn":10},{"ruleId":"48","severity":1,"message":"62","line":27,"column":23,"nodeType":"50","messageId":"51","endLine":27,"endColumn":28},{"ruleId":"48","severity":1,"message":"63","line":56,"column":9,"nodeType":"50","messageId":"51","endLine":56,"endColumn":20},"no-unused-vars","'UnsafeBurnerWalletAdapter' is defined but never used.","Identifier","unusedVar","'WalletDisconnectButton' is defined but never used.","'Col' is defined but never used.","'useState' is defined but never used.","'useEffect' is defined but never used.","'connection' is assigned a value but never used.","'name' is assigned a value but never used.","'symbol' is assigned a value but never used.","'uri' is assigned a value but never used.","'clusterApiUrl' is defined but never used.","'Keypair' is defined but never used.","'_bump' is assigned a value but never used.","'createToken' is assigned a value but never used."]