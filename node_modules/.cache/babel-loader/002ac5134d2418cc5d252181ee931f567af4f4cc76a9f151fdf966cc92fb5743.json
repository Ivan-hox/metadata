{"ast":null,"code":"import _regeneratorRuntime from \"/Users/ivan/Metadata/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _toConsumableArray from \"/Users/ivan/Metadata/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _slicedToArray from \"/Users/ivan/Metadata/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _asyncToGenerator from \"/Users/ivan/Metadata/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { sendAndConfirmTransaction, Transaction } from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID } from '../constants.js';\nimport { createSetAuthorityInstruction } from '../instructions/setAuthority.js';\nimport { getSigners } from './internal.js';\n/**\n * Assign a new authority to the account\n *\n * @param connection       Connection to use\n * @param payer            Payer of the transaction fees\n * @param account          Address of the account\n * @param currentAuthority Current authority of the specified type\n * @param authorityType    Type of authority to set\n * @param newAuthority     New authority of the account\n * @param multiSigners     Signing accounts if `currentAuthority` is a multisig\n * @param confirmOptions   Options for confirming the transaction\n * @param programId        SPL Token program account\n *\n * @return Signature of the confirmed transaction\n */\nexport function setAuthority(_x, _x2, _x3, _x4, _x5, _x6) {\n  return _setAuthority.apply(this, arguments);\n}\nfunction _setAuthority() {\n  _setAuthority = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(connection, payer, account, currentAuthority, authorityType, newAuthority) {\n    var multiSigners,\n      confirmOptions,\n      programId,\n      _getSigners,\n      _getSigners2,\n      currentAuthorityPublicKey,\n      signers,\n      transaction,\n      _args = arguments;\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            multiSigners = _args.length > 6 && _args[6] !== undefined ? _args[6] : [];\n            confirmOptions = _args.length > 7 ? _args[7] : undefined;\n            programId = _args.length > 8 && _args[8] !== undefined ? _args[8] : TOKEN_PROGRAM_ID;\n            _getSigners = getSigners(currentAuthority, multiSigners), _getSigners2 = _slicedToArray(_getSigners, 2), currentAuthorityPublicKey = _getSigners2[0], signers = _getSigners2[1];\n            transaction = new Transaction().add(createSetAuthorityInstruction(account, currentAuthorityPublicKey, authorityType, newAuthority, multiSigners, programId));\n            _context.next = 7;\n            return sendAndConfirmTransaction(connection, transaction, [payer].concat(_toConsumableArray(signers)), confirmOptions);\n          case 7:\n            return _context.abrupt(\"return\", _context.sent);\n          case 8:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _setAuthority.apply(this, arguments);\n}","map":{"version":3,"mappings":";;;;AACA,SAASA,yBAAyB,EAAEC,WAAW,QAAQ,iBAAiB;AACxE,SAASC,gBAAgB,QAAQ,iBAAiB;AAElD,SAASC,6BAA6B,QAAQ,iCAAiC;AAC/E,SAASC,UAAU,QAAQ,eAAe;AAE1C;;;;;;;;;;;;;;;AAeA,gBAAsBC,YAAY;EAAA;AAAA;AAyBjC;EAAA,2EAzBM,iBACHC,UAAsB,EACtBC,KAAa,EACbC,OAAkB,EAClBC,gBAAoC,EACpCC,aAA4B,EAC5BC,YAA8B;IAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;IAAA;MAAA;QAAA;UAAA;YAC9BC,uEAAyB,EAAE;YAC3BC,cAA+B;YAC/BC,SAAS,2DAAGZ,gBAAgB;YAAA,cAEiBE,UAAU,CAACK,gBAAgB,EAAEG,YAAY,CAAC,iDAAhFG,yBAAyB,oBAAEC,OAAO;YAEnCC,WAAW,GAAG,IAAIhB,WAAW,EAAE,CAACiB,GAAG,CACrCf,6BAA6B,CACzBK,OAAO,EACPO,yBAAyB,EACzBL,aAAa,EACbC,YAAY,EACZC,YAAY,EACZE,SAAS,CACZ,CACJ;YAAA;YAAA,OAEYd,yBAAyB,CAACM,UAAU,EAAEW,WAAW,GAAGV,KAAK,4BAAKS,OAAO,IAAGH,cAAc,CAAC;UAAA;YAAA;UAAA;UAAA;YAAA;QAAA;MAAA;IAAA;EAAA,CACvG;EAAA;AAAA","names":["sendAndConfirmTransaction","Transaction","TOKEN_PROGRAM_ID","createSetAuthorityInstruction","getSigners","setAuthority","connection","payer","account","currentAuthority","authorityType","newAuthority","multiSigners","confirmOptions","programId","currentAuthorityPublicKey","signers","transaction","add"],"sources":["/Users/ivan/Metadata/node_modules/@solana/spl-token/src/actions/setAuthority.ts"],"sourcesContent":["import type { ConfirmOptions, Connection, PublicKey, Signer, TransactionSignature } from '@solana/web3.js';\nimport { sendAndConfirmTransaction, Transaction } from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID } from '../constants.js';\nimport type { AuthorityType } from '../instructions/setAuthority.js';\nimport { createSetAuthorityInstruction } from '../instructions/setAuthority.js';\nimport { getSigners } from './internal.js';\n\n/**\n * Assign a new authority to the account\n *\n * @param connection       Connection to use\n * @param payer            Payer of the transaction fees\n * @param account          Address of the account\n * @param currentAuthority Current authority of the specified type\n * @param authorityType    Type of authority to set\n * @param newAuthority     New authority of the account\n * @param multiSigners     Signing accounts if `currentAuthority` is a multisig\n * @param confirmOptions   Options for confirming the transaction\n * @param programId        SPL Token program account\n *\n * @return Signature of the confirmed transaction\n */\nexport async function setAuthority(\n    connection: Connection,\n    payer: Signer,\n    account: PublicKey,\n    currentAuthority: Signer | PublicKey,\n    authorityType: AuthorityType,\n    newAuthority: PublicKey | null,\n    multiSigners: Signer[] = [],\n    confirmOptions?: ConfirmOptions,\n    programId = TOKEN_PROGRAM_ID\n): Promise<TransactionSignature> {\n    const [currentAuthorityPublicKey, signers] = getSigners(currentAuthority, multiSigners);\n\n    const transaction = new Transaction().add(\n        createSetAuthorityInstruction(\n            account,\n            currentAuthorityPublicKey,\n            authorityType,\n            newAuthority,\n            multiSigners,\n            programId\n        )\n    );\n\n    return await sendAndConfirmTransaction(connection, transaction, [payer, ...signers], confirmOptions);\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}