{"ast":null,"code":"import _slicedToArray from \"/Users/ivan/Metadata/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport { struct, u8 } from '@solana/buffer-layout';\nimport { SYSVAR_RENT_PUBKEY, TransactionInstruction } from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID } from '../constants.js';\nimport { TokenInvalidInstructionDataError, TokenInvalidInstructionKeysError, TokenInvalidInstructionProgramError, TokenInvalidInstructionTypeError } from '../errors.js';\nimport { TokenInstruction } from './types.js';\n/** TODO: docs */\nexport var initializeAccountInstructionData = struct([u8('instruction')]);\n/**\n * Construct an InitializeAccount instruction\n *\n * @param account   New token account\n * @param mint      Mint account\n * @param owner     Owner of the new account\n * @param programId SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\nexport function createInitializeAccountInstruction(account, mint, owner) {\n  var programId = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : TOKEN_PROGRAM_ID;\n  var keys = [{\n    pubkey: account,\n    isSigner: false,\n    isWritable: true\n  }, {\n    pubkey: mint,\n    isSigner: false,\n    isWritable: false\n  }, {\n    pubkey: owner,\n    isSigner: false,\n    isWritable: false\n  }, {\n    pubkey: SYSVAR_RENT_PUBKEY,\n    isSigner: false,\n    isWritable: false\n  }];\n  var data = Buffer.alloc(initializeAccountInstructionData.span);\n  initializeAccountInstructionData.encode({\n    instruction: TokenInstruction.InitializeAccount\n  }, data);\n  return new TransactionInstruction({\n    keys: keys,\n    programId: programId,\n    data: data\n  });\n}\n/**\n * Decode an InitializeAccount instruction and validate it\n *\n * @param instruction Transaction instruction to decode\n * @param programId   SPL Token program account\n *\n * @return Decoded, valid instruction\n */\nexport function decodeInitializeAccountInstruction(instruction) {\n  var programId = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : TOKEN_PROGRAM_ID;\n  if (!instruction.programId.equals(programId)) throw new TokenInvalidInstructionProgramError();\n  if (instruction.data.length !== initializeAccountInstructionData.span) throw new TokenInvalidInstructionDataError();\n  var _decodeInitializeAcco = decodeInitializeAccountInstructionUnchecked(instruction),\n    _decodeInitializeAcco2 = _decodeInitializeAcco.keys,\n    account = _decodeInitializeAcco2.account,\n    mint = _decodeInitializeAcco2.mint,\n    owner = _decodeInitializeAcco2.owner,\n    rent = _decodeInitializeAcco2.rent,\n    data = _decodeInitializeAcco.data;\n  if (data.instruction !== TokenInstruction.InitializeAccount) throw new TokenInvalidInstructionTypeError();\n  if (!account || !mint || !owner || !rent) throw new TokenInvalidInstructionKeysError();\n  // TODO: key checks?\n  return {\n    programId: programId,\n    keys: {\n      account: account,\n      mint: mint,\n      owner: owner,\n      rent: rent\n    },\n    data: data\n  };\n}\n/**\n * Decode an InitializeAccount instruction without validating it\n *\n * @param instruction Transaction instruction to decode\n *\n * @return Decoded, non-validated instruction\n */\nexport function decodeInitializeAccountInstructionUnchecked(_ref) {\n  var programId = _ref.programId,\n    _ref$keys = _slicedToArray(_ref.keys, 4),\n    account = _ref$keys[0],\n    mint = _ref$keys[1],\n    owner = _ref$keys[2],\n    rent = _ref$keys[3],\n    data = _ref.data;\n  return {\n    programId: programId,\n    keys: {\n      account: account,\n      mint: mint,\n      owner: owner,\n      rent: rent\n    },\n    data: initializeAccountInstructionData.decode(data)\n  };\n}","map":{"version":3,"mappings":"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","names":["struct","u8","SYSVAR_RENT_PUBKEY","TransactionInstruction","TOKEN_PROGRAM_ID","TokenInvalidInstructionDataError","TokenInvalidInstructionKeysError","TokenInvalidInstructionProgramError","TokenInvalidInstructionTypeError","TokenInstruction","initializeAccountInstructionData","createInitializeAccountInstruction","account","mint","owner","programId","keys","pubkey","isSigner","isWritable","data","Buffer","alloc","span","encode","instruction","InitializeAccount","decodeInitializeAccountInstruction","equals","length","decodeInitializeAccountInstructionUnchecked","rent","decode"],"sources":["/Users/ivan/Metadata/node_modules/@solana/spl-token/src/instructions/initializeAccount.ts"],"sourcesContent":["import { struct, u8 } from '@solana/buffer-layout';\nimport type { AccountMeta, PublicKey } from '@solana/web3.js';\nimport { SYSVAR_RENT_PUBKEY, TransactionInstruction } from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID } from '../constants.js';\nimport {\n    TokenInvalidInstructionDataError,\n    TokenInvalidInstructionKeysError,\n    TokenInvalidInstructionProgramError,\n    TokenInvalidInstructionTypeError,\n} from '../errors.js';\nimport { TokenInstruction } from './types.js';\n\n/** TODO: docs */\nexport interface InitializeAccountInstructionData {\n    instruction: TokenInstruction.InitializeAccount;\n}\n\n/** TODO: docs */\nexport const initializeAccountInstructionData = struct<InitializeAccountInstructionData>([u8('instruction')]);\n\n/**\n * Construct an InitializeAccount instruction\n *\n * @param account   New token account\n * @param mint      Mint account\n * @param owner     Owner of the new account\n * @param programId SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\nexport function createInitializeAccountInstruction(\n    account: PublicKey,\n    mint: PublicKey,\n    owner: PublicKey,\n    programId = TOKEN_PROGRAM_ID\n): TransactionInstruction {\n    const keys = [\n        { pubkey: account, isSigner: false, isWritable: true },\n        { pubkey: mint, isSigner: false, isWritable: false },\n        { pubkey: owner, isSigner: false, isWritable: false },\n        { pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false },\n    ];\n\n    const data = Buffer.alloc(initializeAccountInstructionData.span);\n    initializeAccountInstructionData.encode({ instruction: TokenInstruction.InitializeAccount }, data);\n\n    return new TransactionInstruction({ keys, programId, data });\n}\n\n/** A decoded, valid InitializeAccount instruction */\nexport interface DecodedInitializeAccountInstruction {\n    programId: PublicKey;\n    keys: {\n        account: AccountMeta;\n        mint: AccountMeta;\n        owner: AccountMeta;\n        rent: AccountMeta;\n    };\n    data: {\n        instruction: TokenInstruction.InitializeAccount;\n    };\n}\n\n/**\n * Decode an InitializeAccount instruction and validate it\n *\n * @param instruction Transaction instruction to decode\n * @param programId   SPL Token program account\n *\n * @return Decoded, valid instruction\n */\nexport function decodeInitializeAccountInstruction(\n    instruction: TransactionInstruction,\n    programId = TOKEN_PROGRAM_ID\n): DecodedInitializeAccountInstruction {\n    if (!instruction.programId.equals(programId)) throw new TokenInvalidInstructionProgramError();\n    if (instruction.data.length !== initializeAccountInstructionData.span) throw new TokenInvalidInstructionDataError();\n\n    const {\n        keys: { account, mint, owner, rent },\n        data,\n    } = decodeInitializeAccountInstructionUnchecked(instruction);\n    if (data.instruction !== TokenInstruction.InitializeAccount) throw new TokenInvalidInstructionTypeError();\n    if (!account || !mint || !owner || !rent) throw new TokenInvalidInstructionKeysError();\n\n    // TODO: key checks?\n\n    return {\n        programId,\n        keys: {\n            account,\n            mint,\n            owner,\n            rent,\n        },\n        data,\n    };\n}\n\n/** A decoded, non-validated InitializeAccount instruction */\nexport interface DecodedInitializeAccountInstructionUnchecked {\n    programId: PublicKey;\n    keys: {\n        account: AccountMeta | undefined;\n        mint: AccountMeta | undefined;\n        owner: AccountMeta | undefined;\n        rent: AccountMeta | undefined;\n    };\n    data: {\n        instruction: number;\n    };\n}\n\n/**\n * Decode an InitializeAccount instruction without validating it\n *\n * @param instruction Transaction instruction to decode\n *\n * @return Decoded, non-validated instruction\n */\nexport function decodeInitializeAccountInstructionUnchecked({\n    programId,\n    keys: [account, mint, owner, rent],\n    data,\n}: TransactionInstruction): DecodedInitializeAccountInstructionUnchecked {\n    return {\n        programId,\n        keys: {\n            account,\n            mint,\n            owner,\n            rent,\n        },\n        data: initializeAccountInstructionData.decode(data),\n    };\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}