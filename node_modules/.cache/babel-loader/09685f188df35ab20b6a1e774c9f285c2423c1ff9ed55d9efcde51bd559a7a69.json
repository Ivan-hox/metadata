{"ast":null,"code":"import _toConsumableArray from \"/Users/ivan/Metadata/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _slicedToArray from \"/Users/ivan/Metadata/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _regeneratorRuntime from \"/Users/ivan/Metadata/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"/Users/ivan/Metadata/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { Keypair, sendAndConfirmTransaction, SystemProgram, Transaction } from '@solana/web3.js';\nimport { getSigners } from '../../actions/internal.js';\nimport { TOKEN_2022_PROGRAM_ID } from '../../constants.js';\nimport { createInitializeMintInstruction } from '../../instructions/initializeMint.js';\nimport { ExtensionType, getMintLen } from '../extensionType.js';\nimport { createInitializeInterestBearingMintInstruction, createUpdateRateInterestBearingMintInstruction } from './instructions.js';\n/**\n * Initialize an interest bearing account on a mint\n *\n * @param connection      Connection to use\n * @param payer           Payer of the transaction fees\n * @param mintAuthority   Account or multisig that will control minting\n * @param freezeAuthority Optional account or multisig that can freeze token accounts\n * @param rateAuthority   The public key for the account that can update the rate\n * @param rate            The initial interest rate\n * @param decimals        Location of the decimal place\n * @param keypair         Optional keypair, defaulting to a new random one\n * @param confirmOptions  Options for confirming the transaction\n * @param programId       SPL Token program account\n *\n * @return Public key of the mint\n */\nexport function createInterestBearingMint(_x, _x2, _x3, _x4, _x5, _x6, _x7) {\n  return _createInterestBearingMint.apply(this, arguments);\n}\n/**\n * Update the interest rate of an interest bearing account\n *\n * @param connection      Connection to use\n * @param payer           Payer of the transaction fees\n * @param mint            Public key of the mint\n * @param rateAuthority   The public key for the account that can update the rate\n * @param rate            The initial interest rate\n * @param multiSigners    Signing accounts if `owner` is a multisig\n * @param confirmOptions  Options for confirming the transaction\n * @param programId       SPL Token program account\n *\n * @return Signature of the confirmed transaction\n */\nfunction _createInterestBearingMint() {\n  _createInterestBearingMint = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(connection, payer, mintAuthority, freezeAuthority, rateAuthority, rate, decimals) {\n    var keypair,\n      confirmOptions,\n      programId,\n      mintLen,\n      lamports,\n      transaction,\n      _args = arguments;\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            keypair = _args.length > 7 && _args[7] !== undefined ? _args[7] : Keypair.generate();\n            confirmOptions = _args.length > 8 ? _args[8] : undefined;\n            programId = _args.length > 9 && _args[9] !== undefined ? _args[9] : TOKEN_2022_PROGRAM_ID;\n            mintLen = getMintLen([ExtensionType.InterestBearingMint]);\n            _context.next = 6;\n            return connection.getMinimumBalanceForRentExemption(mintLen);\n          case 6:\n            lamports = _context.sent;\n            transaction = new Transaction().add(SystemProgram.createAccount({\n              fromPubkey: payer.publicKey,\n              newAccountPubkey: keypair.publicKey,\n              space: mintLen,\n              lamports: lamports,\n              programId: programId\n            }), createInitializeInterestBearingMintInstruction(keypair.publicKey, rateAuthority, rate, programId), createInitializeMintInstruction(keypair.publicKey, decimals, mintAuthority, freezeAuthority, programId));\n            _context.next = 10;\n            return sendAndConfirmTransaction(connection, transaction, [payer, keypair], confirmOptions);\n          case 10:\n            return _context.abrupt(\"return\", keypair.publicKey);\n          case 11:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _createInterestBearingMint.apply(this, arguments);\n}\nexport function updateRateInterestBearingMint(_x8, _x9, _x10, _x11, _x12) {\n  return _updateRateInterestBearingMint.apply(this, arguments);\n}\nfunction _updateRateInterestBearingMint() {\n  _updateRateInterestBearingMint = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(connection, payer, mint, rateAuthority, rate) {\n    var multiSigners,\n      confirmOptions,\n      programId,\n      _getSigners,\n      _getSigners2,\n      rateAuthorityPublicKey,\n      signers,\n      transaction,\n      _args2 = arguments;\n    return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            multiSigners = _args2.length > 5 && _args2[5] !== undefined ? _args2[5] : [];\n            confirmOptions = _args2.length > 6 ? _args2[6] : undefined;\n            programId = _args2.length > 7 && _args2[7] !== undefined ? _args2[7] : TOKEN_2022_PROGRAM_ID;\n            _getSigners = getSigners(rateAuthority, multiSigners), _getSigners2 = _slicedToArray(_getSigners, 2), rateAuthorityPublicKey = _getSigners2[0], signers = _getSigners2[1];\n            transaction = new Transaction().add(createUpdateRateInterestBearingMintInstruction(mint, rateAuthorityPublicKey, rate, signers, programId));\n            _context2.next = 7;\n            return sendAndConfirmTransaction(connection, transaction, [payer, rateAuthority].concat(_toConsumableArray(signers)), confirmOptions);\n          case 7:\n            return _context2.abrupt(\"return\", _context2.sent);\n          case 8:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n  return _updateRateInterestBearingMint.apply(this, arguments);\n}","map":{"version":3,"mappings":";;;;AACA,SAASA,OAAO,EAAEC,yBAAyB,EAAEC,aAAa,EAAEC,WAAW,QAAQ,iBAAiB;AAChG,SAASC,UAAU,QAAQ,2BAA2B;AACtD,SAASC,qBAAqB,QAAQ,oBAAoB;AAC1D,SAASC,+BAA+B,QAAQ,sCAAsC;AACtF,SAASC,aAAa,EAAEC,UAAU,QAAQ,qBAAqB;AAC/D,SACIC,8CAA8C,EAC9CC,8CAA8C,QAC3C,mBAAmB;AAE1B;;;;;;;;;;;;;;;;AAgBA,gBAAsBC,yBAAyB;EAAA;AAAA;AA6B/C;;;;;;;;;;;;;;AAAA;EAAA,wFA7BO,iBACHC,UAAsB,EACtBC,KAAa,EACbC,aAAwB,EACxBC,eAA0B,EAC1BC,aAAwB,EACxBC,IAAY,EACZC,QAAgB;IAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;IAAA;MAAA;QAAA;UAAA;YAChBC,OAAO,2DAAGnB,OAAO,CAACoB,QAAQ,EAAE;YAC5BC,cAA+B;YAC/BC,SAAS,2DAAGjB,qBAAqB;YAE3BkB,OAAO,GAAGf,UAAU,CAAC,CAACD,aAAa,CAACiB,mBAAmB,CAAC,CAAC;YAAA;YAAA,OACxCZ,UAAU,CAACa,iCAAiC,CAACF,OAAO,CAAC;UAAA;YAAtEG,QAAQ;YACRC,WAAW,GAAG,IAAIxB,WAAW,EAAE,CAACyB,GAAG,CACrC1B,aAAa,CAAC2B,aAAa,CAAC;cACxBC,UAAU,EAAEjB,KAAK,CAACkB,SAAS;cAC3BC,gBAAgB,EAAEb,OAAO,CAACY,SAAS;cACnCE,KAAK,EAAEV,OAAO;cACdG,QAAQ,EAARA,QAAQ;cACRJ,SAAS,EAATA;aACH,CAAC,EACFb,8CAA8C,CAACU,OAAO,CAACY,SAAS,EAAEf,aAAa,EAAEC,IAAI,EAAEK,SAAS,CAAC,EACjGhB,+BAA+B,CAACa,OAAO,CAACY,SAAS,EAAEb,QAAQ,EAAEJ,aAAa,EAAEC,eAAe,EAAEO,SAAS,CAAC,CAC1G;YAAA;YAAA,OACKrB,yBAAyB,CAACW,UAAU,EAAEe,WAAW,EAAE,CAACd,KAAK,EAAEM,OAAO,CAAC,EAAEE,cAAc,CAAC;UAAA;YAAA,iCACnFF,OAAO,CAACY,SAAS;UAAA;UAAA;YAAA;QAAA;MAAA;IAAA;EAAA,CAC3B;EAAA;AAAA;AAgBD,gBAAsBG,6BAA6B;EAAA;AAAA;AAgBlD;EAAA,4FAhBM,kBACHtB,UAAsB,EACtBC,KAAa,EACbsB,IAAe,EACfnB,aAAqB,EACrBC,IAAY;IAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;IAAA;MAAA;QAAA;UAAA;YACZmB,0EAAyB,EAAE;YAC3Bf,cAA+B;YAC/BC,SAAS,8DAAGjB,qBAAqB;YAAA,cAESD,UAAU,CAACY,aAAa,EAAEoB,YAAY,CAAC,iDAA1EC,sBAAsB,oBAAEC,OAAO;YAChCX,WAAW,GAAG,IAAIxB,WAAW,EAAE,CAACyB,GAAG,CACrClB,8CAA8C,CAACyB,IAAI,EAAEE,sBAAsB,EAAEpB,IAAI,EAAEqB,OAAO,EAAEhB,SAAS,CAAC,CACzG;YAAA;YAAA,OAEYrB,yBAAyB,CAACW,UAAU,EAAEe,WAAW,GAAGd,KAAK,EAAEG,aAAa,4BAAKsB,OAAO,IAAGjB,cAAc,CAAC;UAAA;YAAA;UAAA;UAAA;YAAA;QAAA;MAAA;IAAA;EAAA,CACtH;EAAA;AAAA","names":["Keypair","sendAndConfirmTransaction","SystemProgram","Transaction","getSigners","TOKEN_2022_PROGRAM_ID","createInitializeMintInstruction","ExtensionType","getMintLen","createInitializeInterestBearingMintInstruction","createUpdateRateInterestBearingMintInstruction","createInterestBearingMint","connection","payer","mintAuthority","freezeAuthority","rateAuthority","rate","decimals","keypair","generate","confirmOptions","programId","mintLen","InterestBearingMint","getMinimumBalanceForRentExemption","lamports","transaction","add","createAccount","fromPubkey","publicKey","newAccountPubkey","space","updateRateInterestBearingMint","mint","multiSigners","rateAuthorityPublicKey","signers"],"sources":["/Users/ivan/Metadata/node_modules/@solana/spl-token/src/extensions/interestBearingMint/actions.ts"],"sourcesContent":["import type { ConfirmOptions, Connection, PublicKey, Signer } from '@solana/web3.js';\nimport { Keypair, sendAndConfirmTransaction, SystemProgram, Transaction } from '@solana/web3.js';\nimport { getSigners } from '../../actions/internal.js';\nimport { TOKEN_2022_PROGRAM_ID } from '../../constants.js';\nimport { createInitializeMintInstruction } from '../../instructions/initializeMint.js';\nimport { ExtensionType, getMintLen } from '../extensionType.js';\nimport {\n    createInitializeInterestBearingMintInstruction,\n    createUpdateRateInterestBearingMintInstruction,\n} from './instructions.js';\n\n/**\n * Initialize an interest bearing account on a mint\n *\n * @param connection      Connection to use\n * @param payer           Payer of the transaction fees\n * @param mintAuthority   Account or multisig that will control minting\n * @param freezeAuthority Optional account or multisig that can freeze token accounts\n * @param rateAuthority   The public key for the account that can update the rate\n * @param rate            The initial interest rate\n * @param decimals        Location of the decimal place\n * @param keypair         Optional keypair, defaulting to a new random one\n * @param confirmOptions  Options for confirming the transaction\n * @param programId       SPL Token program account\n *\n * @return Public key of the mint\n */\nexport async function createInterestBearingMint(\n    connection: Connection,\n    payer: Signer,\n    mintAuthority: PublicKey,\n    freezeAuthority: PublicKey,\n    rateAuthority: PublicKey,\n    rate: number,\n    decimals: number,\n    keypair = Keypair.generate(),\n    confirmOptions?: ConfirmOptions,\n    programId = TOKEN_2022_PROGRAM_ID\n): Promise<PublicKey> {\n    const mintLen = getMintLen([ExtensionType.InterestBearingMint]);\n    const lamports = await connection.getMinimumBalanceForRentExemption(mintLen);\n    const transaction = new Transaction().add(\n        SystemProgram.createAccount({\n            fromPubkey: payer.publicKey,\n            newAccountPubkey: keypair.publicKey,\n            space: mintLen,\n            lamports,\n            programId,\n        }),\n        createInitializeInterestBearingMintInstruction(keypair.publicKey, rateAuthority, rate, programId),\n        createInitializeMintInstruction(keypair.publicKey, decimals, mintAuthority, freezeAuthority, programId)\n    );\n    await sendAndConfirmTransaction(connection, transaction, [payer, keypair], confirmOptions);\n    return keypair.publicKey;\n}\n\n/**\n * Update the interest rate of an interest bearing account\n *\n * @param connection      Connection to use\n * @param payer           Payer of the transaction fees\n * @param mint            Public key of the mint\n * @param rateAuthority   The public key for the account that can update the rate\n * @param rate            The initial interest rate\n * @param multiSigners    Signing accounts if `owner` is a multisig\n * @param confirmOptions  Options for confirming the transaction\n * @param programId       SPL Token program account\n *\n * @return Signature of the confirmed transaction\n */\nexport async function updateRateInterestBearingMint(\n    connection: Connection,\n    payer: Signer,\n    mint: PublicKey,\n    rateAuthority: Signer,\n    rate: number,\n    multiSigners: Signer[] = [],\n    confirmOptions?: ConfirmOptions,\n    programId = TOKEN_2022_PROGRAM_ID\n): Promise<string> {\n    const [rateAuthorityPublicKey, signers] = getSigners(rateAuthority, multiSigners);\n    const transaction = new Transaction().add(\n        createUpdateRateInterestBearingMintInstruction(mint, rateAuthorityPublicKey, rate, signers, programId)\n    );\n\n    return await sendAndConfirmTransaction(connection, transaction, [payer, rateAuthority, ...signers], confirmOptions);\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}