{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getImmutableOwner = exports.IMMUTABLE_OWNER_SIZE = exports.ImmutableOwnerLayout = void 0;\nvar buffer_layout_1 = require(\"@solana/buffer-layout\");\nvar extensionType_js_1 = require(\"./extensionType.js\");\n/** Buffer layout for de/serializing an account */\nexports.ImmutableOwnerLayout = (0, buffer_layout_1.struct)([]);\nexports.IMMUTABLE_OWNER_SIZE = exports.ImmutableOwnerLayout.span;\nfunction getImmutableOwner(account) {\n  var extensionData = (0, extensionType_js_1.getExtensionData)(extensionType_js_1.ExtensionType.ImmutableOwner, account.tlvData);\n  if (extensionData !== null) {\n    return exports.ImmutableOwnerLayout.decode(extensionData);\n  } else {\n    return null;\n  }\n}\nexports.getImmutableOwner = getImmutableOwner;","map":{"version":3,"mappings":";;;;;;AAAA;AAEA;AAKA;AACaA,4BAAoB,GAAG,0BAAM,EAAiB,EAAE,CAAC;AAEjDA,4BAAoB,GAAGA,4BAAoB,CAACC,IAAI;AAE7D,SAAgBC,iBAAiB,CAACC,OAAgB;EAC9C,IAAMC,aAAa,GAAG,uCAAgB,EAACC,gCAAa,CAACC,cAAc,EAAEH,OAAO,CAACI,OAAO,CAAC;EACrF,IAAIH,aAAa,KAAK,IAAI,EAAE;IACxB,OAAOJ,4BAAoB,CAACQ,MAAM,CAACJ,aAAa,CAAC;GACpD,MAAM;IACH,OAAO,IAAI;;AAEnB;AAPAJ","names":["exports","span","getImmutableOwner","account","extensionData","extensionType_js_1","ImmutableOwner","tlvData","decode"],"sources":["/Users/ivan/Metadata/node_modules/@solana/spl-token/src/extensions/immutableOwner.ts"],"sourcesContent":["import { struct } from '@solana/buffer-layout';\nimport type { Account } from '../state/account.js';\nimport { ExtensionType, getExtensionData } from './extensionType.js';\n\n/** ImmutableOwner as stored by the program */\nexport interface ImmutableOwner {} // eslint-disable-line\n\n/** Buffer layout for de/serializing an account */\nexport const ImmutableOwnerLayout = struct<ImmutableOwner>([]);\n\nexport const IMMUTABLE_OWNER_SIZE = ImmutableOwnerLayout.span;\n\nexport function getImmutableOwner(account: Account): ImmutableOwner | null {\n    const extensionData = getExtensionData(ExtensionType.ImmutableOwner, account.tlvData);\n    if (extensionData !== null) {\n        return ImmutableOwnerLayout.decode(extensionData);\n    } else {\n        return null;\n    }\n}\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}