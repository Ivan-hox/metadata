{"ast":null,"code":"import _createForOfIteratorHelper from \"/Users/ivan/Metadata/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport { struct, u8 } from '@solana/buffer-layout';\nimport { TransactionInstruction } from '@solana/web3.js';\nimport { programSupportsExtensions, TOKEN_2022_PROGRAM_ID } from '../../constants.js';\nimport { TokenUnsupportedInstructionError } from '../../errors.js';\nimport { TokenInstruction } from '../../instructions/types.js';\nexport var MemoTransferInstruction;\n(function (MemoTransferInstruction) {\n  MemoTransferInstruction[MemoTransferInstruction[\"Enable\"] = 0] = \"Enable\";\n  MemoTransferInstruction[MemoTransferInstruction[\"Disable\"] = 1] = \"Disable\";\n})(MemoTransferInstruction || (MemoTransferInstruction = {}));\n/** TODO: docs */\nexport var memoTransferInstructionData = struct([u8('instruction'), u8('memoTransferInstruction')]);\n/**\n * Construct an EnableRequiredMemoTransfers instruction\n *\n * @param account         Token account to update\n * @param authority       The account's owner/delegate\n * @param signers         The signer account(s)\n * @param programId       SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\nexport function createEnableRequiredMemoTransfersInstruction(account, authority) {\n  var multiSigners = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n  var programId = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : TOKEN_2022_PROGRAM_ID;\n  return createMemoTransferInstruction( /* enable */true, account, authority, multiSigners, programId);\n}\n/**\n * Construct a DisableMemoTransfer instruction\n *\n * @param account         Token account to update\n * @param authority       The account's owner/delegate\n * @param signers         The signer account(s)\n * @param programId       SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\nexport function createDisableRequiredMemoTransfersInstruction(account, authority) {\n  var multiSigners = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n  var programId = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : TOKEN_2022_PROGRAM_ID;\n  return createMemoTransferInstruction( /* enable */false, account, authority, multiSigners, programId);\n}\nfunction createMemoTransferInstruction(enable, account, authority, multiSigners, programId) {\n  if (!programSupportsExtensions(programId)) {\n    throw new TokenUnsupportedInstructionError();\n  }\n  var keys = [{\n    pubkey: account,\n    isSigner: false,\n    isWritable: true\n  }];\n  keys.push({\n    pubkey: authority,\n    isSigner: !multiSigners.length,\n    isWritable: false\n  });\n  var _iterator = _createForOfIteratorHelper(multiSigners),\n    _step;\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var signer = _step.value;\n      keys.push({\n        pubkey: signer.publicKey,\n        isSigner: true,\n        isWritable: false\n      });\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n  var data = Buffer.alloc(memoTransferInstructionData.span);\n  memoTransferInstructionData.encode({\n    instruction: TokenInstruction.MemoTransferExtension,\n    memoTransferInstruction: enable ? MemoTransferInstruction.Enable : MemoTransferInstruction.Disable\n  }, data);\n  return new TransactionInstruction({\n    keys: keys,\n    programId: programId,\n    data: data\n  });\n}","map":{"version":3,"mappings":";AAAA,SAASA,MAAM,EAAEC,EAAE,QAAQ,uBAAuB;AAElD,SAASC,sBAAsB,QAAQ,iBAAiB;AACxD,SAASC,yBAAyB,EAAEC,qBAAqB,QAAQ,oBAAoB;AACrF,SAASC,gCAAgC,QAAQ,iBAAiB;AAClE,SAASC,gBAAgB,QAAQ,6BAA6B;AAE9D,WAAYC,uBAGX;AAHD,WAAYA,uBAAuB;EAC/BA,yEAAU;EACVA,2EAAW;AACf,CAAC,EAHWA,uBAAuB,KAAvBA,uBAAuB;AAWnC;AACA,OAAO,IAAMC,2BAA2B,GAAGR,MAAM,CAA8B,CAC3EC,EAAE,CAAC,aAAa,CAAC,EACjBA,EAAE,CAAC,yBAAyB,CAAC,CAChC,CAAC;AAEF;;;;;;;;;;AAUA,OAAM,SAAUQ,4CAA4C,CACxDC,OAAkB,EAClBC,SAAoB,EAEa;EAAA,IADjCC,mFAAyB,EAAE;EAAA,IAC3BC,SAAS,uEAAGT,qBAAqB;EAEjC,OAAOU,6BAA6B,EAAC,YAAa,IAAI,EAAEJ,OAAO,EAAEC,SAAS,EAAEC,YAAY,EAAEC,SAAS,CAAC;AACxG;AAEA;;;;;;;;;;AAUA,OAAM,SAAUE,6CAA6C,CACzDL,OAAkB,EAClBC,SAAoB,EAEa;EAAA,IADjCC,mFAAyB,EAAE;EAAA,IAC3BC,SAAS,uEAAGT,qBAAqB;EAEjC,OAAOU,6BAA6B,EAAC,YAAa,KAAK,EAAEJ,OAAO,EAAEC,SAAS,EAAEC,YAAY,EAAEC,SAAS,CAAC;AACzG;AAEA,SAASC,6BAA6B,CAClCE,MAAe,EACfN,OAAkB,EAClBC,SAAoB,EACpBC,YAAsB,EACtBC,SAAoB;EAEpB,IAAI,CAACV,yBAAyB,CAACU,SAAS,CAAC,EAAE;IACvC,MAAM,IAAIR,gCAAgC,EAAE;;EAEhD,IAAMY,IAAI,GAAG,CAAC;IAAEC,MAAM,EAAER,OAAO;IAAES,QAAQ,EAAE,KAAK;IAAEC,UAAU,EAAE;EAAI,CAAE,CAAC;EACrEH,IAAI,CAACI,IAAI,CAAC;IAAEH,MAAM,EAAEP,SAAS;IAAEQ,QAAQ,EAAE,CAACP,YAAY,CAACU,MAAM;IAAEF,UAAU,EAAE;EAAK,CAAE,CAAC;EAAC,2CAC/DR,YAAY;IAAA;EAAA;IAAjC,oDAAmC;MAAA,IAAxBW,MAAM;MACbN,IAAI,CAACI,IAAI,CAAC;QAAEH,MAAM,EAAEK,MAAM,CAACC,SAAS;QAAEL,QAAQ,EAAE,IAAI;QAAEC,UAAU,EAAE;MAAK,CAAE,CAAC;;EAC7E;IAAA;EAAA;IAAA;EAAA;EAED,IAAMK,IAAI,GAAGC,MAAM,CAACC,KAAK,CAACnB,2BAA2B,CAACoB,IAAI,CAAC;EAC3DpB,2BAA2B,CAACqB,MAAM,CAC9B;IACIC,WAAW,EAAExB,gBAAgB,CAACyB,qBAAqB;IACnDC,uBAAuB,EAAEhB,MAAM,GAAGT,uBAAuB,CAAC0B,MAAM,GAAG1B,uBAAuB,CAAC2B;GAC9F,EACDT,IAAI,CACP;EAED,OAAO,IAAIvB,sBAAsB,CAAC;IAAEe,IAAI,EAAJA,IAAI;IAAEJ,SAAS,EAATA,SAAS;IAAEY,IAAI,EAAJA;EAAI,CAAE,CAAC;AAChE","names":["struct","u8","TransactionInstruction","programSupportsExtensions","TOKEN_2022_PROGRAM_ID","TokenUnsupportedInstructionError","TokenInstruction","MemoTransferInstruction","memoTransferInstructionData","createEnableRequiredMemoTransfersInstruction","account","authority","multiSigners","programId","createMemoTransferInstruction","createDisableRequiredMemoTransfersInstruction","enable","keys","pubkey","isSigner","isWritable","push","length","signer","publicKey","data","Buffer","alloc","span","encode","instruction","MemoTransferExtension","memoTransferInstruction","Enable","Disable"],"sources":["/Users/ivan/Metadata/node_modules/@solana/spl-token/src/extensions/memoTransfer/instructions.ts"],"sourcesContent":["import { struct, u8 } from '@solana/buffer-layout';\nimport type { PublicKey, Signer } from '@solana/web3.js';\nimport { TransactionInstruction } from '@solana/web3.js';\nimport { programSupportsExtensions, TOKEN_2022_PROGRAM_ID } from '../../constants.js';\nimport { TokenUnsupportedInstructionError } from '../../errors.js';\nimport { TokenInstruction } from '../../instructions/types.js';\n\nexport enum MemoTransferInstruction {\n    Enable = 0,\n    Disable = 1,\n}\n\n/** TODO: docs */\nexport interface MemoTransferInstructionData {\n    instruction: TokenInstruction.MemoTransferExtension;\n    memoTransferInstruction: MemoTransferInstruction;\n}\n\n/** TODO: docs */\nexport const memoTransferInstructionData = struct<MemoTransferInstructionData>([\n    u8('instruction'),\n    u8('memoTransferInstruction'),\n]);\n\n/**\n * Construct an EnableRequiredMemoTransfers instruction\n *\n * @param account         Token account to update\n * @param authority       The account's owner/delegate\n * @param signers         The signer account(s)\n * @param programId       SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\nexport function createEnableRequiredMemoTransfersInstruction(\n    account: PublicKey,\n    authority: PublicKey,\n    multiSigners: Signer[] = [],\n    programId = TOKEN_2022_PROGRAM_ID\n): TransactionInstruction {\n    return createMemoTransferInstruction(/* enable */ true, account, authority, multiSigners, programId);\n}\n\n/**\n * Construct a DisableMemoTransfer instruction\n *\n * @param account         Token account to update\n * @param authority       The account's owner/delegate\n * @param signers         The signer account(s)\n * @param programId       SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\nexport function createDisableRequiredMemoTransfersInstruction(\n    account: PublicKey,\n    authority: PublicKey,\n    multiSigners: Signer[] = [],\n    programId = TOKEN_2022_PROGRAM_ID\n): TransactionInstruction {\n    return createMemoTransferInstruction(/* enable */ false, account, authority, multiSigners, programId);\n}\n\nfunction createMemoTransferInstruction(\n    enable: boolean,\n    account: PublicKey,\n    authority: PublicKey,\n    multiSigners: Signer[],\n    programId: PublicKey\n): TransactionInstruction {\n    if (!programSupportsExtensions(programId)) {\n        throw new TokenUnsupportedInstructionError();\n    }\n    const keys = [{ pubkey: account, isSigner: false, isWritable: true }];\n    keys.push({ pubkey: authority, isSigner: !multiSigners.length, isWritable: false });\n    for (const signer of multiSigners) {\n        keys.push({ pubkey: signer.publicKey, isSigner: true, isWritable: false });\n    }\n\n    const data = Buffer.alloc(memoTransferInstructionData.span);\n    memoTransferInstructionData.encode(\n        {\n            instruction: TokenInstruction.MemoTransferExtension,\n            memoTransferInstruction: enable ? MemoTransferInstruction.Enable : MemoTransferInstruction.Disable,\n        },\n        data\n    );\n\n    return new TransactionInstruction({ keys, programId, data });\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}