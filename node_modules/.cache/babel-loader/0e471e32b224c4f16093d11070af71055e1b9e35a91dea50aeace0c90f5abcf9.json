{"ast":null,"code":"import _regeneratorRuntime from\"/Users/ivan/Metadata/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";import _slicedToArray from\"/Users/ivan/Metadata/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import _asyncToGenerator from\"/Users/ivan/Metadata/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";import{Connection,clusterApiUrl,PublicKey,Transaction,Keypair}from\"@solana/web3.js\";import*as splToken from\"@solana/spl-token\";import*as mpl from\"@metaplex-foundation/mpl-token-metadata\";import*as anchor from\"@project-serum/anchor\";//import { Metaplex, walletAdapterIdentity } from \"@metaplex-foundation/js\";\nvar getConnection=function getConnection(){// const network = \"https://api.devnet.solana.com/\";\nvar network=\"https://api.metaplex.solana.com/\";var connection=new Connection(network,\"processed\");return connection;};export var createTokenMetaData=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee(wallet,mintId){var connection,mint,seed1,seed2,seed3,_PublicKey$findProgra,_PublicKey$findProgra2,metadataPDA,_bump,accounts,dataV2,args,createToken,ix,transaction,_yield$connection$get,minContextSlot,_yield$connection$get2,blockhash,lastValidBlockHeight,signature,sign;return _regeneratorRuntime().wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:connection=getConnection();mint=new PublicKey(mintId);console.log(\"Mint id\",mint.toString());seed1=Buffer.from(anchor.utils.bytes.utf8.encode(\"metadata\"));seed2=Buffer.from(mpl.PROGRAM_ID.toBytes());seed3=Buffer.from(mint.toBytes());_PublicKey$findProgra=PublicKey.findProgramAddressSync([seed1,seed2,seed3],mpl.PROGRAM_ID),_PublicKey$findProgra2=_slicedToArray(_PublicKey$findProgra,2),metadataPDA=_PublicKey$findProgra2[0],_bump=_PublicKey$findProgra2[1];accounts={metadata:metadataPDA,mint:mint,mintAuthority:wallet.publicKey,payer:wallet.publicKey,updateAuthority:wallet.publicKey};dataV2={name:\"HOX Coin\",symbol:\"HOX\",uri:\"https://gateway.pinata.cloud/ipfs/Qme5yBSqWhkH7Xa57fAyB1r9qTXaQ3Mj5ucZHovyEcFyee\",// we don't need that\nsellerFeeBasisPoints:0,creators:null,collection:null,uses:null};args={createMetadataAccountArgsV2:{data:dataV2,isMutable:true// updateAuthority: wallet.publicKey,\n// primarySaleHappened: true,\n}};createToken=splToken.createInitializeMintInstruction(mint,18,wallet.publicKey,wallet.publicKey);ix=mpl.createCreateMetadataAccountV2Instruction(accounts,args);// console.log(mint.toString());\ntransaction=new Transaction().add(ix);//transaction.add(ix);\n_context.next=15;return connection.getLatestBlockhashAndContext();case 15:_yield$connection$get=_context.sent;minContextSlot=_yield$connection$get.context.slot;_yield$connection$get2=_yield$connection$get.value;blockhash=_yield$connection$get2.blockhash;lastValidBlockHeight=_yield$connection$get2.lastValidBlockHeight;_context.prev=20;_context.next=23;return wallet.sendTransaction(transaction,connection,{minContextSlot:minContextSlot});case 23:signature=_context.sent;console.log(signature);_context.next=27;return connection.confirmTransaction({blockhash:blockhash,lastValidBlockHeight:lastValidBlockHeight,signature:signature});case 27:sign=_context.sent;console.log(\"check logs here: \",sign);_context.next=34;break;case 31:_context.prev=31;_context.t0=_context[\"catch\"](20);console.log(_context.t0);case 34:case\"end\":return _context.stop();}}},_callee,null,[[20,31]]);}));return function createTokenMetaData(_x,_x2){return _ref.apply(this,arguments);};}();","map":{"version":3,"names":["Connection","clusterApiUrl","PublicKey","Transaction","Keypair","splToken","mpl","anchor","getConnection","network","connection","createTokenMetaData","wallet","mintId","mint","console","log","toString","seed1","Buffer","from","utils","bytes","utf8","encode","seed2","PROGRAM_ID","toBytes","seed3","findProgramAddressSync","metadataPDA","_bump","accounts","metadata","mintAuthority","publicKey","payer","updateAuthority","dataV2","name","symbol","uri","sellerFeeBasisPoints","creators","collection","uses","args","createMetadataAccountArgsV2","data","isMutable","createToken","createInitializeMintInstruction","ix","createCreateMetadataAccountV2Instruction","transaction","add","getLatestBlockhashAndContext","minContextSlot","context","slot","value","blockhash","lastValidBlockHeight","sendTransaction","signature","confirmTransaction","sign"],"sources":["/Users/ivan/Metadata/src/utils.js"],"sourcesContent":["import {\n  Connection,\n  clusterApiUrl,\n  PublicKey,\n  Transaction,\n  Keypair,\n} from \"@solana/web3.js\";\nimport * as splToken from \"@solana/spl-token\";\nimport * as mpl from \"@metaplex-foundation/mpl-token-metadata\";\nimport * as anchor from \"@project-serum/anchor\";\n//import { Metaplex, walletAdapterIdentity } from \"@metaplex-foundation/js\";\nconst getConnection = () => {\n  // const network = \"https://api.devnet.solana.com/\";\n  const network = \"https://api.metaplex.solana.com/\";\n\n  const connection = new Connection(network, \"processed\");\n  return connection;\n};\n\nexport const createTokenMetaData = async (wallet, mintId) => {\n  const connection = getConnection();\n  const mint = new PublicKey(mintId);\n  console.log(\"Mint id\", mint.toString());\n  const seed1 = Buffer.from(anchor.utils.bytes.utf8.encode(\"metadata\"));\n  const seed2 = Buffer.from(mpl.PROGRAM_ID.toBytes());\n  const seed3 = Buffer.from(mint.toBytes());\n  const [metadataPDA, _bump] = PublicKey.findProgramAddressSync(\n    [seed1, seed2, seed3],\n    mpl.PROGRAM_ID\n  );\n  const accounts = {\n    metadata: metadataPDA,\n    mint: mint,\n    mintAuthority: wallet.publicKey,\n    payer: wallet.publicKey,\n    updateAuthority: wallet.publicKey,\n  };\n  const dataV2 = {\n    name: \"HOX Coin\",\n    symbol: \"HOX\",\n    uri: \"https://gateway.pinata.cloud/ipfs/Qme5yBSqWhkH7Xa57fAyB1r9qTXaQ3Mj5ucZHovyEcFyee\",\n    // we don't need that\n    sellerFeeBasisPoints: 0,\n    creators: null,\n    collection: null,\n    uses: null,\n  };\n  const args = {\n    createMetadataAccountArgsV2: {\n      data: dataV2,\n      isMutable: true,\n      // updateAuthority: wallet.publicKey,\n      // primarySaleHappened: true,\n    },\n  };\n  const createToken = splToken.createInitializeMintInstruction(\n    mint,\n    18,\n    wallet.publicKey,\n    wallet.publicKey\n  );\n  let ix = mpl.createCreateMetadataAccountV2Instruction(accounts, args);\n  // console.log(mint.toString());\n\n  const transaction = new Transaction().add(ix);\n  //transaction.add(ix);\n  const {\n    context: { slot: minContextSlot },\n    value: { blockhash, lastValidBlockHeight },\n  } = await connection.getLatestBlockhashAndContext();\n\n  try {\n    const signature = await wallet.sendTransaction(transaction, connection, {\n      minContextSlot,\n    });\n    console.log(signature);\n    const sign = await connection.confirmTransaction({\n      blockhash,\n      lastValidBlockHeight,\n      signature,\n    });\n    console.log(\"check logs here: \", sign);\n  } catch (error) {\n    console.log(error);\n  }\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}