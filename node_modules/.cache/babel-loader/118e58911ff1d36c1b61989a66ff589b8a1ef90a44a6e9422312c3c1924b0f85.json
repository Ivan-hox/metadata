{"ast":null,"code":"\"use strict\";\n\nvar _toArray = require(\"/Users/ivan/Metadata/node_modules/@babel/runtime/helpers/toArray.js\").default;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.decodeThawAccountInstructionUnchecked = exports.decodeThawAccountInstruction = exports.createThawAccountInstruction = exports.thawAccountInstructionData = void 0;\nvar buffer_layout_1 = require(\"@solana/buffer-layout\");\nvar web3_js_1 = require(\"@solana/web3.js\");\nvar constants_js_1 = require(\"../constants.js\");\nvar errors_js_1 = require(\"../errors.js\");\nvar internal_js_1 = require(\"./internal.js\");\nvar types_js_1 = require(\"./types.js\");\n/** TODO: docs */\nexports.thawAccountInstructionData = (0, buffer_layout_1.struct)([(0, buffer_layout_1.u8)('instruction')]);\n/**\n * Construct a ThawAccount instruction\n *\n * @param account      Account to thaw\n * @param mint         Mint account\n * @param authority    Mint freeze authority\n * @param multiSigners Signing accounts if `authority` is a multisig\n * @param programId    SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\nfunction createThawAccountInstruction(account, mint, authority) {\n  var multiSigners = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [];\n  var programId = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : constants_js_1.TOKEN_PROGRAM_ID;\n  var keys = (0, internal_js_1.addSigners)([{\n    pubkey: account,\n    isSigner: false,\n    isWritable: true\n  }, {\n    pubkey: mint,\n    isSigner: false,\n    isWritable: false\n  }], authority, multiSigners);\n  var data = Buffer.alloc(exports.thawAccountInstructionData.span);\n  exports.thawAccountInstructionData.encode({\n    instruction: types_js_1.TokenInstruction.ThawAccount\n  }, data);\n  return new web3_js_1.TransactionInstruction({\n    keys: keys,\n    programId: programId,\n    data: data\n  });\n}\nexports.createThawAccountInstruction = createThawAccountInstruction;\n/**\n * Decode a ThawAccount instruction and validate it\n *\n * @param instruction Transaction instruction to decode\n * @param programId   SPL Token program account\n *\n * @return Decoded, valid instruction\n */\nfunction decodeThawAccountInstruction(instruction) {\n  var programId = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : constants_js_1.TOKEN_PROGRAM_ID;\n  if (!instruction.programId.equals(programId)) throw new errors_js_1.TokenInvalidInstructionProgramError();\n  if (instruction.data.length !== exports.thawAccountInstructionData.span) throw new errors_js_1.TokenInvalidInstructionDataError();\n  var _decodeThawAccountIns = decodeThawAccountInstructionUnchecked(instruction),\n    _decodeThawAccountIns2 = _decodeThawAccountIns.keys,\n    account = _decodeThawAccountIns2.account,\n    mint = _decodeThawAccountIns2.mint,\n    authority = _decodeThawAccountIns2.authority,\n    multiSigners = _decodeThawAccountIns2.multiSigners,\n    data = _decodeThawAccountIns.data;\n  if (data.instruction !== types_js_1.TokenInstruction.ThawAccount) throw new errors_js_1.TokenInvalidInstructionTypeError();\n  if (!account || !mint || !authority) throw new errors_js_1.TokenInvalidInstructionKeysError();\n  // TODO: key checks?\n  return {\n    programId: programId,\n    keys: {\n      account: account,\n      mint: mint,\n      authority: authority,\n      multiSigners: multiSigners\n    },\n    data: data\n  };\n}\nexports.decodeThawAccountInstruction = decodeThawAccountInstruction;\n/**\n * Decode a ThawAccount instruction without validating it\n *\n * @param instruction Transaction instruction to decode\n *\n * @return Decoded, non-validated instruction\n */\nfunction decodeThawAccountInstructionUnchecked(_ref) {\n  var programId = _ref.programId,\n    _ref$keys = _toArray(_ref.keys),\n    account = _ref$keys[0],\n    mint = _ref$keys[1],\n    authority = _ref$keys[2],\n    multiSigners = _ref$keys.slice(3),\n    data = _ref.data;\n  return {\n    programId: programId,\n    keys: {\n      account: account,\n      mint: mint,\n      authority: authority,\n      multiSigners: multiSigners\n    },\n    data: exports.thawAccountInstructionData.decode(data)\n  };\n}\nexports.decodeThawAccountInstructionUnchecked = decodeThawAccountInstructionUnchecked;","map":{"version":3,"mappings":";;;;;;;AAAA;AAEA;AACA;AACA;AAMA;AACA;AAOA;AACaA,kCAA0B,GAAG,0BAAM,EAA6B,CAAC,sBAAE,EAAC,aAAa,CAAC,CAAC,CAAC;AAEjG;;;;;;;;;;;AAWA,SAAgBC,4BAA4B,CACxCC,OAAkB,EAClBC,IAAe,EACfC,SAAoB,EAEQ;EAAA,IAD5BC,mFAAyB,EAAE;EAAA,IAC3BC,SAAS,uEAAGC,+BAAgB;EAE5B,IAAMC,IAAI,GAAG,4BAAU,EACnB,CACI;IAAEC,MAAM,EAAEP,OAAO;IAAEQ,QAAQ,EAAE,KAAK;IAAEC,UAAU,EAAE;EAAI,CAAE,EACtD;IAAEF,MAAM,EAAEN,IAAI;IAAEO,QAAQ,EAAE,KAAK;IAAEC,UAAU,EAAE;EAAK,CAAE,CACvD,EACDP,SAAS,EACTC,YAAY,CACf;EAED,IAAMO,IAAI,GAAGC,MAAM,CAACC,KAAK,CAACd,kCAA0B,CAACe,IAAI,CAAC;EAC1Df,kCAA0B,CAACgB,MAAM,CAAC;IAAEC,WAAW,EAAEC,2BAAgB,CAACC;EAAW,CAAE,EAAEP,IAAI,CAAC;EAEtF,OAAO,IAAIQ,gCAAsB,CAAC;IAAEZ,IAAI,EAAJA,IAAI;IAAEF,SAAS,EAATA,SAAS;IAAEM,IAAI,EAAJA;EAAI,CAAE,CAAC;AAChE;AApBAZ;AAoCA;;;;;;;;AAQA,SAAgBqB,4BAA4B,CACxCJ,WAAmC,EACP;EAAA,IAA5BX,SAAS,uEAAGC,+BAAgB;EAE5B,IAAI,CAACU,WAAW,CAACX,SAAS,CAACgB,MAAM,CAAChB,SAAS,CAAC,EAAE,MAAM,IAAIiB,+CAAmC,EAAE;EAC7F,IAAIN,WAAW,CAACL,IAAI,CAACY,MAAM,KAAKxB,kCAA0B,CAACe,IAAI,EAAE,MAAM,IAAIQ,4CAAgC,EAAE;EAE7G,4BAGIE,qCAAqC,CAACR,WAAW,CAAC;IAAA,+CAFlDT,IAAI;IAAIN,OAAO,0BAAPA,OAAO;IAAEC,IAAI,0BAAJA,IAAI;IAAEC,SAAS,0BAATA,SAAS;IAAEC,YAAY,0BAAZA,YAAY;IAC9CO,IAAI,yBAAJA,IAAI;EAER,IAAIA,IAAI,CAACK,WAAW,KAAKC,2BAAgB,CAACC,WAAW,EAAE,MAAM,IAAII,4CAAgC,EAAE;EACnG,IAAI,CAACrB,OAAO,IAAI,CAACC,IAAI,IAAI,CAACC,SAAS,EAAE,MAAM,IAAImB,4CAAgC,EAAE;EAEjF;EAEA,OAAO;IACHjB,SAAS,EAATA,SAAS;IACTE,IAAI,EAAE;MACFN,OAAO,EAAPA,OAAO;MACPC,IAAI,EAAJA,IAAI;MACJC,SAAS,EAATA,SAAS;MACTC,YAAY,EAAZA;KACH;IACDO,IAAI,EAAJA;GACH;AACL;AA1BAZ;AA0CA;;;;;;;AAOA,SAAgByB,qCAAqC,OAI5B;EAAA,IAHrBnB,SAAS,QAATA,SAAS;IAAA,0BACTE,IAAI;IAAGN,OAAO;IAAEC,IAAI;IAAEC,SAAS;IAAKC,YAAY;IAChDO,IAAI,QAAJA,IAAI;EAEJ,OAAO;IACHN,SAAS,EAATA,SAAS;IACTE,IAAI,EAAE;MACFN,OAAO,EAAPA,OAAO;MACPC,IAAI,EAAJA,IAAI;MACJC,SAAS,EAATA,SAAS;MACTC,YAAY,EAAZA;KACH;IACDO,IAAI,EAAEZ,kCAA0B,CAAC0B,MAAM,CAACd,IAAI;GAC/C;AACL;AAfAZ","names":["exports","createThawAccountInstruction","account","mint","authority","multiSigners","programId","constants_js_1","keys","pubkey","isSigner","isWritable","data","Buffer","alloc","span","encode","instruction","types_js_1","ThawAccount","web3_js_1","decodeThawAccountInstruction","equals","errors_js_1","length","decodeThawAccountInstructionUnchecked","decode"],"sources":["/Users/ivan/Metadata/node_modules/@solana/spl-token/src/instructions/thawAccount.ts"],"sourcesContent":["import { struct, u8 } from '@solana/buffer-layout';\nimport type { AccountMeta, PublicKey, Signer } from '@solana/web3.js';\nimport { TransactionInstruction } from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID } from '../constants.js';\nimport {\n    TokenInvalidInstructionDataError,\n    TokenInvalidInstructionKeysError,\n    TokenInvalidInstructionProgramError,\n    TokenInvalidInstructionTypeError,\n} from '../errors.js';\nimport { addSigners } from './internal.js';\nimport { TokenInstruction } from './types.js';\n\n/** TODO: docs */\nexport interface ThawAccountInstructionData {\n    instruction: TokenInstruction.ThawAccount;\n}\n\n/** TODO: docs */\nexport const thawAccountInstructionData = struct<ThawAccountInstructionData>([u8('instruction')]);\n\n/**\n * Construct a ThawAccount instruction\n *\n * @param account      Account to thaw\n * @param mint         Mint account\n * @param authority    Mint freeze authority\n * @param multiSigners Signing accounts if `authority` is a multisig\n * @param programId    SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\nexport function createThawAccountInstruction(\n    account: PublicKey,\n    mint: PublicKey,\n    authority: PublicKey,\n    multiSigners: Signer[] = [],\n    programId = TOKEN_PROGRAM_ID\n): TransactionInstruction {\n    const keys = addSigners(\n        [\n            { pubkey: account, isSigner: false, isWritable: true },\n            { pubkey: mint, isSigner: false, isWritable: false },\n        ],\n        authority,\n        multiSigners\n    );\n\n    const data = Buffer.alloc(thawAccountInstructionData.span);\n    thawAccountInstructionData.encode({ instruction: TokenInstruction.ThawAccount }, data);\n\n    return new TransactionInstruction({ keys, programId, data });\n}\n\n/** A decoded, valid ThawAccount instruction */\nexport interface DecodedThawAccountInstruction {\n    programId: PublicKey;\n    keys: {\n        account: AccountMeta;\n        mint: AccountMeta;\n        authority: AccountMeta;\n        multiSigners: AccountMeta[];\n    };\n    data: {\n        instruction: TokenInstruction.ThawAccount;\n    };\n}\n\n/**\n * Decode a ThawAccount instruction and validate it\n *\n * @param instruction Transaction instruction to decode\n * @param programId   SPL Token program account\n *\n * @return Decoded, valid instruction\n */\nexport function decodeThawAccountInstruction(\n    instruction: TransactionInstruction,\n    programId = TOKEN_PROGRAM_ID\n): DecodedThawAccountInstruction {\n    if (!instruction.programId.equals(programId)) throw new TokenInvalidInstructionProgramError();\n    if (instruction.data.length !== thawAccountInstructionData.span) throw new TokenInvalidInstructionDataError();\n\n    const {\n        keys: { account, mint, authority, multiSigners },\n        data,\n    } = decodeThawAccountInstructionUnchecked(instruction);\n    if (data.instruction !== TokenInstruction.ThawAccount) throw new TokenInvalidInstructionTypeError();\n    if (!account || !mint || !authority) throw new TokenInvalidInstructionKeysError();\n\n    // TODO: key checks?\n\n    return {\n        programId,\n        keys: {\n            account,\n            mint,\n            authority,\n            multiSigners,\n        },\n        data,\n    };\n}\n\n/** A decoded, non-validated ThawAccount instruction */\nexport interface DecodedThawAccountInstructionUnchecked {\n    programId: PublicKey;\n    keys: {\n        account: AccountMeta | undefined;\n        mint: AccountMeta | undefined;\n        authority: AccountMeta | undefined;\n        multiSigners: AccountMeta[];\n    };\n    data: {\n        instruction: number;\n    };\n}\n\n/**\n * Decode a ThawAccount instruction without validating it\n *\n * @param instruction Transaction instruction to decode\n *\n * @return Decoded, non-validated instruction\n */\nexport function decodeThawAccountInstructionUnchecked({\n    programId,\n    keys: [account, mint, authority, ...multiSigners],\n    data,\n}: TransactionInstruction): DecodedThawAccountInstructionUnchecked {\n    return {\n        programId,\n        keys: {\n            account,\n            mint,\n            authority,\n            multiSigners,\n        },\n        data: thawAccountInstructionData.decode(data),\n    };\n}\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}