{"ast":null,"code":"\"use strict\";\n\nvar _createClass = require(\"/Users/ivan/Metadata/node_modules/@babel/runtime/helpers/createClass.js\").default;\nvar _classCallCheck = require(\"/Users/ivan/Metadata/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _inherits = require(\"/Users/ivan/Metadata/node_modules/@babel/runtime/helpers/inherits.js\").default;\nvar _createSuper = require(\"/Users/ivan/Metadata/node_modules/@babel/runtime/helpers/createSuper.js\").default;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.MultiKey = void 0;\nvar CryptoECKey_1 = require(\"./CryptoECKey\");\nvar CryptoHDKey_1 = require(\"./CryptoHDKey\");\nvar DataItem_1 = require(\"./lib/DataItem\");\nvar RegistryItem_1 = require(\"./RegistryItem\");\nvar RegistryType_1 = require(\"./RegistryType\");\nvar Keys;\n(function (Keys) {\n  Keys[Keys[\"threshold\"] = 1] = \"threshold\";\n  Keys[Keys[\"keys\"] = 2] = \"keys\";\n})(Keys || (Keys = {}));\nvar MultiKey = /*#__PURE__*/function (_RegistryItem_1$Regis) {\n  _inherits(MultiKey, _RegistryItem_1$Regis);\n  var _super = _createSuper(MultiKey);\n  function MultiKey(threshold, keys) {\n    var _this;\n    _classCallCheck(this, MultiKey);\n    _this = _super.call(this);\n    _this.threshold = threshold;\n    _this.keys = keys;\n    _this.getThreshold = function () {\n      return _this.threshold;\n    };\n    _this.getKeys = function () {\n      return _this.keys;\n    };\n    _this.toDataItem = function () {\n      var map = {};\n      map[Keys.threshold] = _this.threshold;\n      var keys = _this.keys.map(function (k) {\n        var dataItem = k.toDataItem();\n        dataItem.setTag(k.getRegistryType().getTag());\n        return dataItem;\n      });\n      map[Keys.keys] = keys;\n      return new DataItem_1.DataItem(map);\n    };\n    _this.getOutputDescriptorContent = function () {\n      return [_this.getThreshold(), _this.keys.map(function (k) {\n        return k.getOutputDescriptorContent();\n      }).join(',')].join(',');\n    };\n    return _this;\n  }\n  return _createClass(MultiKey);\n}(RegistryItem_1.RegistryItem);\nexports.MultiKey = MultiKey;\nMultiKey.fromDataItem = function (dataItem) {\n  var map = dataItem.getData();\n  var threshold = map[Keys.threshold];\n  var _keys = map[Keys.keys];\n  var keys = [];\n  _keys.forEach(function (k) {\n    if (k.getTag() === RegistryType_1.RegistryTypes.CRYPTO_HDKEY.getTag()) {\n      keys.push(CryptoHDKey_1.CryptoHDKey.fromDataItem(k));\n    } else if (k.getTag() === RegistryType_1.RegistryTypes.CRYPTO_ECKEY.getTag()) {\n      keys.push(CryptoECKey_1.CryptoECKey.fromDataItem(k));\n    }\n  });\n  return new MultiKey(threshold, keys);\n};","map":{"version":3,"mappings":";;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AAGA,IAAKA,IAGJ;AAHD,WAAKA,IAAI;EACPA,yCAAa;EACbA,+BAAI;AACN,CAAC,EAHIA,IAAI,KAAJA,IAAI;AAGR,IAEYC,QAAS;EAAA;EAAA;EAKpB,kBACUC,SAAiB,EACjBC,IAAmC;IAAA;IAAA;IAE3C;IAHQ,eAAS,GAATD,SAAS;IACT,UAAI,GAAJC,IAAI;IAKd,kBAAY,GAAG;MAAA,OAAM,MAAKD,SAAS;IAAA;IACnC,aAAO,GAAG;MAAA,OAAM,MAAKC,IAAI;IAAA;IAEzB,gBAAU,GAAG,YAAK;MAChB,IAAMC,GAAG,GAAgB,EAAE;MAC3BA,GAAG,CAACJ,IAAI,CAACE,SAAS,CAAC,GAAG,MAAKA,SAAS;MACpC,IAAMC,IAAI,GAAe,MAAKA,IAAI,CAACC,GAAG,CAAC,UAACC,CAAC,EAAI;QAC3C,IAAMC,QAAQ,GAAGD,CAAC,CAACE,UAAU,EAAE;QAC/BD,QAAQ,CAACE,MAAM,CAACH,CAAC,CAACI,eAAe,EAAE,CAACC,MAAM,EAAE,CAAC;QAC7C,OAAOJ,QAAQ;MACjB,CAAC,CAAC;MACFF,GAAG,CAACJ,IAAI,CAACG,IAAI,CAAC,GAAGA,IAAI;MACrB,OAAO,IAAIQ,mBAAQ,CAACP,GAAG,CAAC;IAC1B,CAAC;IAED,gCAA0B,GAAG,YAAK;MAChC,OAAO,CAAC,MAAKQ,YAAY,EAAE,EACzB,MAAKT,IAAI,CAACC,GAAG,CAAC,WAAC;QAAA,OAAIC,CAAC,CAACQ,0BAA0B,EAAE;MAAA,EAAC,CAACC,IAAI,CAAC,GAAG,CAAC,CAC7D,CAACA,IAAI,CAAC,GAAG,CAAC;IACb,CAAC;IAAC;EArBF;EAAC;AAAA,EAV2BC,2BAAY;AAA1CC;AAiCSf,qBAAY,GAAG,UAACK,QAAkB,EAAI;EAC3C,IAAMF,GAAG,GAAGE,QAAQ,CAACW,OAAO,EAAE;EAC9B,IAAMf,SAAS,GAAGE,GAAG,CAACJ,IAAI,CAACE,SAAS,CAAC;EACrC,IAAMgB,KAAK,GAAGd,GAAG,CAACJ,IAAI,CAACG,IAAI,CAAe;EAC1C,IAAMA,IAAI,GAAkC,EAAE;EAC9Ce,KAAK,CAACC,OAAO,CAAC,UAACd,CAAC,EAAI;IAClB,IAAIA,CAAC,CAACK,MAAM,EAAE,KAAKU,4BAAa,CAACC,YAAY,CAACX,MAAM,EAAE,EAAE;MACtDP,IAAI,CAACmB,IAAI,CAACC,yBAAW,CAACC,YAAY,CAACnB,CAAC,CAAC,CAAC;KACvC,MAAM,IAAIA,CAAC,CAACK,MAAM,EAAE,KAAKU,4BAAa,CAACK,YAAY,CAACf,MAAM,EAAE,EAAE;MAC7DP,IAAI,CAACmB,IAAI,CAACI,yBAAW,CAACF,YAAY,CAACnB,CAAC,CAAC,CAAC;;EAE1C,CAAC,CAAC;EACF,OAAO,IAAIJ,QAAQ,CAACC,SAAS,EAAEC,IAAI,CAAC;AACtC,CAAC","names":["Keys","MultiKey","threshold","keys","map","k","dataItem","toDataItem","setTag","getRegistryType","getTag","DataItem_1","getThreshold","getOutputDescriptorContent","join","RegistryItem_1","exports","getData","_keys","forEach","RegistryType_1","CRYPTO_HDKEY","push","CryptoHDKey_1","fromDataItem","CRYPTO_ECKEY","CryptoECKey_1"],"sources":["/Users/ivan/Metadata/node_modules/@keystonehq/bc-ur-registry/src/MultiKey.ts"],"sourcesContent":["import { CryptoECKey } from './CryptoECKey';\nimport { CryptoHDKey } from './CryptoHDKey';\nimport { DataItem } from './lib/DataItem';\nimport { RegistryItem } from './RegistryItem';\nimport { RegistryType, RegistryTypes } from './RegistryType';\nimport { DataItemMap } from './types';\n\nenum Keys {\n  threshold = 1,\n  keys,\n}\n\nexport class MultiKey extends RegistryItem {\n  // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n  // @ts-ignore\n  getRegistryType: () => RegistryType;\n\n  constructor(\n    private threshold: number,\n    private keys: (CryptoECKey | CryptoHDKey)[],\n  ) {\n    super();\n  }\n\n  getThreshold = () => this.threshold;\n  getKeys = () => this.keys;\n\n  toDataItem = () => {\n    const map: DataItemMap = {};\n    map[Keys.threshold] = this.threshold;\n    const keys: DataItem[] = this.keys.map((k) => {\n      const dataItem = k.toDataItem();\n      dataItem.setTag(k.getRegistryType().getTag());\n      return dataItem;\n    });\n    map[Keys.keys] = keys;\n    return new DataItem(map);\n  };\n\n  getOutputDescriptorContent = () => {\n    return [this.getThreshold(),\n      this.keys.map(k => k.getOutputDescriptorContent()).join(','),\n    ].join(',');\n  };\n\n  static fromDataItem = (dataItem: DataItem) => {\n    const map = dataItem.getData();\n    const threshold = map[Keys.threshold];\n    const _keys = map[Keys.keys] as DataItem[];\n    const keys: (CryptoECKey | CryptoHDKey)[] = [];\n    _keys.forEach((k) => {\n      if (k.getTag() === RegistryTypes.CRYPTO_HDKEY.getTag()) {\n        keys.push(CryptoHDKey.fromDataItem(k));\n      } else if (k.getTag() === RegistryTypes.CRYPTO_ECKEY.getTag()) {\n        keys.push(CryptoECKey.fromDataItem(k));\n      }\n    });\n    return new MultiKey(threshold, keys);\n  };\n}\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}