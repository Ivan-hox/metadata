{"ast":null,"code":"\"use strict\";\n\nvar _slicedToArray = require(\"/Users/ivan/Metadata/node_modules/@babel/runtime/helpers/slicedToArray.js\").default;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.decodeInitializeMintCloseAuthorityInstructionUnchecked = exports.decodeInitializeMintCloseAuthorityInstruction = exports.createInitializeMintCloseAuthorityInstruction = exports.initializeMintCloseAuthorityInstructionData = void 0;\nvar buffer_layout_1 = require(\"@solana/buffer-layout\");\nvar buffer_layout_utils_1 = require(\"@solana/buffer-layout-utils\");\nvar web3_js_1 = require(\"@solana/web3.js\");\nvar constants_js_1 = require(\"../constants.js\");\nvar errors_js_1 = require(\"../errors.js\");\nvar types_js_1 = require(\"./types.js\");\n/** TODO: docs */\nexports.initializeMintCloseAuthorityInstructionData = (0, buffer_layout_1.struct)([(0, buffer_layout_1.u8)('instruction'), (0, buffer_layout_1.u8)('closeAuthorityOption'), (0, buffer_layout_utils_1.publicKey)('closeAuthority')]);\n/**\n * Construct an InitializeMintCloseAuthority instruction\n *\n * @param mint            Token mint account\n * @param closeAuthority  Optional authority that can close the mint\n * @param programId       SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\nfunction createInitializeMintCloseAuthorityInstruction(mint, closeAuthority, programId) {\n  if (!(0, constants_js_1.programSupportsExtensions)(programId)) {\n    throw new errors_js_1.TokenUnsupportedInstructionError();\n  }\n  var keys = [{\n    pubkey: mint,\n    isSigner: false,\n    isWritable: true\n  }];\n  var data = Buffer.alloc(exports.initializeMintCloseAuthorityInstructionData.span);\n  exports.initializeMintCloseAuthorityInstructionData.encode({\n    instruction: types_js_1.TokenInstruction.InitializeMintCloseAuthority,\n    closeAuthorityOption: closeAuthority ? 1 : 0,\n    closeAuthority: closeAuthority || new web3_js_1.PublicKey(0)\n  }, data);\n  return new web3_js_1.TransactionInstruction({\n    keys: keys,\n    programId: programId,\n    data: data\n  });\n}\nexports.createInitializeMintCloseAuthorityInstruction = createInitializeMintCloseAuthorityInstruction;\n/**\n * Decode an InitializeMintCloseAuthority instruction and validate it\n *\n * @param instruction Transaction instruction to decode\n * @param programId   SPL Token program account\n *\n * @return Decoded, valid instruction\n */\nfunction decodeInitializeMintCloseAuthorityInstruction(instruction, programId) {\n  if (!instruction.programId.equals(programId)) throw new errors_js_1.TokenInvalidInstructionProgramError();\n  if (instruction.data.length !== exports.initializeMintCloseAuthorityInstructionData.span) throw new errors_js_1.TokenInvalidInstructionDataError();\n  var _decodeInitializeMint = decodeInitializeMintCloseAuthorityInstructionUnchecked(instruction),\n    mint = _decodeInitializeMint.keys.mint,\n    data = _decodeInitializeMint.data;\n  if (data.instruction !== types_js_1.TokenInstruction.InitializeMintCloseAuthority) throw new errors_js_1.TokenInvalidInstructionTypeError();\n  if (!mint) throw new errors_js_1.TokenInvalidInstructionKeysError();\n  return {\n    programId: programId,\n    keys: {\n      mint: mint\n    },\n    data: data\n  };\n}\nexports.decodeInitializeMintCloseAuthorityInstruction = decodeInitializeMintCloseAuthorityInstruction;\n/**\n * Decode an InitializeMintCloseAuthority instruction without validating it\n *\n * @param instruction Transaction instruction to decode\n *\n * @return Decoded, non-validated instruction\n */\nfunction decodeInitializeMintCloseAuthorityInstructionUnchecked(_ref) {\n  var programId = _ref.programId,\n    _ref$keys = _slicedToArray(_ref.keys, 1),\n    mint = _ref$keys[0],\n    data = _ref.data;\n  var _exports$initializeMi = exports.initializeMintCloseAuthorityInstructionData.decode(data),\n    instruction = _exports$initializeMi.instruction,\n    closeAuthorityOption = _exports$initializeMi.closeAuthorityOption,\n    closeAuthority = _exports$initializeMi.closeAuthority;\n  return {\n    programId: programId,\n    keys: {\n      mint: mint\n    },\n    data: {\n      instruction: instruction,\n      closeAuthority: closeAuthorityOption ? closeAuthority : null\n    }\n  };\n}\nexports.decodeInitializeMintCloseAuthorityInstructionUnchecked = decodeInitializeMintCloseAuthorityInstructionUnchecked;","map":{"version":3,"mappings":";;;;;;;AAAA;AACA;AAEA;AACA;AACA;AAOA;AASA;AACaA,mDAA2C,GAAG,0BAAM,EAA8C,CAC3G,sBAAE,EAAC,aAAa,CAAC,EACjB,sBAAE,EAAC,sBAAsB,CAAC,EAC1B,mCAAS,EAAC,gBAAgB,CAAC,CAC9B,CAAC;AAEF;;;;;;;;;AASA,SAAgBC,6CAA6C,CACzDC,IAAe,EACfC,cAAgC,EAChCC,SAAoB;EAEpB,IAAI,CAAC,4CAAyB,EAACA,SAAS,CAAC,EAAE;IACvC,MAAM,IAAIC,4CAAgC,EAAE;;EAEhD,IAAMC,IAAI,GAAG,CAAC;IAAEC,MAAM,EAAEL,IAAI;IAAEM,QAAQ,EAAE,KAAK;IAAEC,UAAU,EAAE;EAAI,CAAE,CAAC;EAElE,IAAMC,IAAI,GAAGC,MAAM,CAACC,KAAK,CAACZ,mDAA2C,CAACa,IAAI,CAAC;EAC3Eb,mDAA2C,CAACc,MAAM,CAC9C;IACIC,WAAW,EAAEC,2BAAgB,CAACC,4BAA4B;IAC1DC,oBAAoB,EAAEf,cAAc,GAAG,CAAC,GAAG,CAAC;IAC5CA,cAAc,EAAEA,cAAc,IAAI,IAAIgB,mBAAS,CAAC,CAAC;GACpD,EACDT,IAAI,CACP;EAED,OAAO,IAAIS,gCAAsB,CAAC;IAAEb,IAAI,EAAJA,IAAI;IAAEF,SAAS,EAATA,SAAS;IAAEM,IAAI,EAAJA;EAAI,CAAE,CAAC;AAChE;AArBAV;AAmCA;;;;;;;;AAQA,SAAgBoB,6CAA6C,CACzDL,WAAmC,EACnCX,SAAoB;EAEpB,IAAI,CAACW,WAAW,CAACX,SAAS,CAACiB,MAAM,CAACjB,SAAS,CAAC,EAAE,MAAM,IAAIC,+CAAmC,EAAE;EAC7F,IAAIU,WAAW,CAACL,IAAI,CAACY,MAAM,KAAKtB,mDAA2C,CAACa,IAAI,EAC5E,MAAM,IAAIR,4CAAgC,EAAE;EAEhD,4BAGIkB,sDAAsD,CAACR,WAAW,CAAC;IAF3Db,IAAI,yBAAZI,IAAI,CAAIJ,IAAI;IACZQ,IAAI,yBAAJA,IAAI;EAER,IAAIA,IAAI,CAACK,WAAW,KAAKC,2BAAgB,CAACC,4BAA4B,EAClE,MAAM,IAAIZ,4CAAgC,EAAE;EAChD,IAAI,CAACH,IAAI,EAAE,MAAM,IAAIG,4CAAgC,EAAE;EAEvD,OAAO;IACHD,SAAS,EAATA,SAAS;IACTE,IAAI,EAAE;MACFJ,IAAI,EAAJA;KACH;IACDQ,IAAI,EAAJA;GACH;AACL;AAvBAV;AAqCA;;;;;;;AAOA,SAAgBuB,sDAAsD,OAI7C;EAAA,IAHrBnB,SAAS,QAATA,SAAS;IAAA,gCACTE,IAAI;IAAGJ,IAAI;IACXQ,IAAI,QAAJA,IAAI;EAEJ,4BACIV,mDAA2C,CAACwB,MAAM,CAACd,IAAI,CAAC;IADpDK,WAAW,yBAAXA,WAAW;IAAEG,oBAAoB,yBAApBA,oBAAoB;IAAEf,cAAc,yBAAdA,cAAc;EAGzD,OAAO;IACHC,SAAS,EAATA,SAAS;IACTE,IAAI,EAAE;MACFJ,IAAI,EAAJA;KACH;IACDQ,IAAI,EAAE;MACFK,WAAW,EAAXA,WAAW;MACXZ,cAAc,EAAEe,oBAAoB,GAAGf,cAAc,GAAG;;GAE/D;AACL;AAlBAH","names":["exports","createInitializeMintCloseAuthorityInstruction","mint","closeAuthority","programId","errors_js_1","keys","pubkey","isSigner","isWritable","data","Buffer","alloc","span","encode","instruction","types_js_1","InitializeMintCloseAuthority","closeAuthorityOption","web3_js_1","decodeInitializeMintCloseAuthorityInstruction","equals","length","decodeInitializeMintCloseAuthorityInstructionUnchecked","decode"],"sources":["/Users/ivan/Metadata/node_modules/@solana/spl-token/src/instructions/initializeMintCloseAuthority.ts"],"sourcesContent":["import { struct, u8 } from '@solana/buffer-layout';\nimport { publicKey } from '@solana/buffer-layout-utils';\nimport type { AccountMeta } from '@solana/web3.js';\nimport { PublicKey, TransactionInstruction } from '@solana/web3.js';\nimport { programSupportsExtensions } from '../constants.js';\nimport {\n    TokenInvalidInstructionDataError,\n    TokenInvalidInstructionKeysError,\n    TokenInvalidInstructionProgramError,\n    TokenInvalidInstructionTypeError,\n    TokenUnsupportedInstructionError,\n} from '../errors.js';\nimport { TokenInstruction } from './types.js';\n\n/** TODO: docs */\nexport interface InitializeMintCloseAuthorityInstructionData {\n    instruction: TokenInstruction.InitializeMintCloseAuthority;\n    closeAuthorityOption: 1 | 0;\n    closeAuthority: PublicKey;\n}\n\n/** TODO: docs */\nexport const initializeMintCloseAuthorityInstructionData = struct<InitializeMintCloseAuthorityInstructionData>([\n    u8('instruction'),\n    u8('closeAuthorityOption'),\n    publicKey('closeAuthority'),\n]);\n\n/**\n * Construct an InitializeMintCloseAuthority instruction\n *\n * @param mint            Token mint account\n * @param closeAuthority  Optional authority that can close the mint\n * @param programId       SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\nexport function createInitializeMintCloseAuthorityInstruction(\n    mint: PublicKey,\n    closeAuthority: PublicKey | null,\n    programId: PublicKey\n): TransactionInstruction {\n    if (!programSupportsExtensions(programId)) {\n        throw new TokenUnsupportedInstructionError();\n    }\n    const keys = [{ pubkey: mint, isSigner: false, isWritable: true }];\n\n    const data = Buffer.alloc(initializeMintCloseAuthorityInstructionData.span);\n    initializeMintCloseAuthorityInstructionData.encode(\n        {\n            instruction: TokenInstruction.InitializeMintCloseAuthority,\n            closeAuthorityOption: closeAuthority ? 1 : 0,\n            closeAuthority: closeAuthority || new PublicKey(0),\n        },\n        data\n    );\n\n    return new TransactionInstruction({ keys, programId, data });\n}\n\n/** A decoded, valid InitializeMintCloseAuthority instruction */\nexport interface DecodedInitializeMintCloseAuthorityInstruction {\n    programId: PublicKey;\n    keys: {\n        mint: AccountMeta;\n    };\n    data: {\n        instruction: TokenInstruction.InitializeMintCloseAuthority;\n        closeAuthority: PublicKey | null;\n    };\n}\n\n/**\n * Decode an InitializeMintCloseAuthority instruction and validate it\n *\n * @param instruction Transaction instruction to decode\n * @param programId   SPL Token program account\n *\n * @return Decoded, valid instruction\n */\nexport function decodeInitializeMintCloseAuthorityInstruction(\n    instruction: TransactionInstruction,\n    programId: PublicKey\n): DecodedInitializeMintCloseAuthorityInstruction {\n    if (!instruction.programId.equals(programId)) throw new TokenInvalidInstructionProgramError();\n    if (instruction.data.length !== initializeMintCloseAuthorityInstructionData.span)\n        throw new TokenInvalidInstructionDataError();\n\n    const {\n        keys: { mint },\n        data,\n    } = decodeInitializeMintCloseAuthorityInstructionUnchecked(instruction);\n    if (data.instruction !== TokenInstruction.InitializeMintCloseAuthority)\n        throw new TokenInvalidInstructionTypeError();\n    if (!mint) throw new TokenInvalidInstructionKeysError();\n\n    return {\n        programId,\n        keys: {\n            mint,\n        },\n        data,\n    };\n}\n\n/** A decoded, non-validated InitializeMintCloseAuthority instruction */\nexport interface DecodedInitializeMintCloseAuthorityInstructionUnchecked {\n    programId: PublicKey;\n    keys: {\n        mint: AccountMeta | undefined;\n    };\n    data: {\n        instruction: number;\n        closeAuthority: PublicKey | null;\n    };\n}\n\n/**\n * Decode an InitializeMintCloseAuthority instruction without validating it\n *\n * @param instruction Transaction instruction to decode\n *\n * @return Decoded, non-validated instruction\n */\nexport function decodeInitializeMintCloseAuthorityInstructionUnchecked({\n    programId,\n    keys: [mint],\n    data,\n}: TransactionInstruction): DecodedInitializeMintCloseAuthorityInstructionUnchecked {\n    const { instruction, closeAuthorityOption, closeAuthority } =\n        initializeMintCloseAuthorityInstructionData.decode(data);\n\n    return {\n        programId,\n        keys: {\n            mint,\n        },\n        data: {\n            instruction,\n            closeAuthority: closeAuthorityOption ? closeAuthority : null,\n        },\n    };\n}\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}