{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"/Users/ivan/Metadata/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\").default;\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createAccount = void 0;\nvar web3_js_1 = require(\"@solana/web3.js\");\nvar constants_js_1 = require(\"../constants.js\");\nvar extensionType_js_1 = require(\"../extensions/extensionType.js\");\nvar initializeAccount_js_1 = require(\"../instructions/initializeAccount.js\");\nvar mint_js_1 = require(\"../state/mint.js\");\nvar createAssociatedTokenAccount_js_1 = require(\"./createAssociatedTokenAccount.js\");\n/**\n * Create and initialize a new token account\n *\n * @param connection     Connection to use\n * @param payer          Payer of the transaction and initialization fees\n * @param mint           Mint for the account\n * @param owner          Owner of the new account\n * @param keypair        Optional keypair, defaulting to the associated token account for the `mint` and `owner`\n * @param confirmOptions Options for confirming the transaction\n * @param programId      SPL Token program account\n *\n * @return Address of the new token account\n */\nfunction createAccount(connection, payer, mint, owner, keypair, confirmOptions) {\n  var programId = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : constants_js_1.TOKEN_PROGRAM_ID;\n  return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n    var mintState, space, lamports, transaction;\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (keypair) {\n              _context.next = 4;\n              break;\n            }\n            _context.next = 3;\n            return (0, createAssociatedTokenAccount_js_1.createAssociatedTokenAccount)(connection, payer, mint, owner, confirmOptions, programId);\n          case 3:\n            return _context.abrupt(\"return\", _context.sent);\n          case 4:\n            _context.next = 6;\n            return (0, mint_js_1.getMint)(connection, mint, confirmOptions === null || confirmOptions === void 0 ? void 0 : confirmOptions.commitment, programId);\n          case 6:\n            mintState = _context.sent;\n            space = (0, extensionType_js_1.getAccountLenForMint)(mintState);\n            _context.next = 10;\n            return connection.getMinimumBalanceForRentExemption(space);\n          case 10:\n            lamports = _context.sent;\n            transaction = new web3_js_1.Transaction().add(web3_js_1.SystemProgram.createAccount({\n              fromPubkey: payer.publicKey,\n              newAccountPubkey: keypair.publicKey,\n              space: space,\n              lamports: lamports,\n              programId: programId\n            }), (0, initializeAccount_js_1.createInitializeAccountInstruction)(keypair.publicKey, mint, owner, programId));\n            _context.next = 14;\n            return (0, web3_js_1.sendAndConfirmTransaction)(connection, transaction, [payer, keypair], confirmOptions);\n          case 14:\n            return _context.abrupt(\"return\", keypair.publicKey);\n          case 15:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n}\nexports.createAccount = createAccount;","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;;;;;AAaA,SAAsBA,aAAa,CAC/BC,UAAsB,EACtBC,KAAa,EACbC,IAAe,EACfC,KAAgB,EAChBC,OAAiB,EACjBC,cAA+B,EACH;EAAA,IAA5BC,SAAS,uEAAGC,+BAAgB;;;;;;;gBAGvBH,OAAO;cAAA;cAAA;YAAA;YAAA;YAAS,OAAM,kEAA4B,EAACJ,UAAU,EAAEC,KAAK,EAAEC,IAAI,EAAEC,KAAK,EAAEE,cAAc,EAAEC,SAAS,CAAC;UAAA;YAAA;UAAA;YAAA;YAGhG,OAAM,qBAAO,EAACN,UAAU,EAAEE,IAAI,EAAEG,cAAc,aAAdA,cAAc,uBAAdA,cAAc,CAAEG,UAAU,EAAEF,SAAS,CAAC;UAAA;YAAlFG,SAAS;YACTC,KAAK,GAAG,2CAAoB,EAACD,SAAS,CAAC;YAAA;YAC5B,OAAMT,UAAU,CAACW,iCAAiC,CAACD,KAAK,CAAC;UAAA;YAApEE,QAAQ;YAERC,WAAW,GAAG,IAAIC,qBAAW,EAAE,CAACC,GAAG,CACrCD,uBAAa,CAACf,aAAa,CAAC;cACxBiB,UAAU,EAAEf,KAAK,CAACgB,SAAS;cAC3BC,gBAAgB,EAAEd,OAAO,CAACa,SAAS;cACnCP,KAAK,EAALA,KAAK;cACLE,QAAQ,EAARA,QAAQ;cACRN,SAAS,EAATA;aACH,CAAC,EACF,6DAAkC,EAACF,OAAO,CAACa,SAAS,EAAEf,IAAI,EAAEC,KAAK,EAAEG,SAAS,CAAC,CAChF;YAAA;YAED,OAAM,uCAAyB,EAACN,UAAU,EAAEa,WAAW,EAAE,CAACZ,KAAK,EAAEG,OAAO,CAAC,EAAEC,cAAc,CAAC;UAAA;YAAA,iCAEnFD,OAAO,CAACa,SAAS;UAAA;UAAA;YAAA;QAAA;MAAA;IAAA;EAAA,CAC3B;;AA/BDE","names":["createAccount","connection","payer","mint","owner","keypair","confirmOptions","programId","constants_js_1","commitment","mintState","space","getMinimumBalanceForRentExemption","lamports","transaction","web3_js_1","add","fromPubkey","publicKey","newAccountPubkey","exports"],"sources":["/Users/ivan/Metadata/node_modules/@solana/spl-token/src/actions/createAccount.ts"],"sourcesContent":["import type { ConfirmOptions, Connection, Keypair, PublicKey, Signer } from '@solana/web3.js';\nimport { sendAndConfirmTransaction, SystemProgram, Transaction } from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID } from '../constants.js';\nimport { getAccountLenForMint } from '../extensions/extensionType.js';\nimport { createInitializeAccountInstruction } from '../instructions/initializeAccount.js';\nimport { getMint } from '../state/mint.js';\nimport { createAssociatedTokenAccount } from './createAssociatedTokenAccount.js';\n\n/**\n * Create and initialize a new token account\n *\n * @param connection     Connection to use\n * @param payer          Payer of the transaction and initialization fees\n * @param mint           Mint for the account\n * @param owner          Owner of the new account\n * @param keypair        Optional keypair, defaulting to the associated token account for the `mint` and `owner`\n * @param confirmOptions Options for confirming the transaction\n * @param programId      SPL Token program account\n *\n * @return Address of the new token account\n */\nexport async function createAccount(\n    connection: Connection,\n    payer: Signer,\n    mint: PublicKey,\n    owner: PublicKey,\n    keypair?: Keypair,\n    confirmOptions?: ConfirmOptions,\n    programId = TOKEN_PROGRAM_ID\n): Promise<PublicKey> {\n    // If a keypair isn't provided, create the associated token account and return its address\n    if (!keypair) return await createAssociatedTokenAccount(connection, payer, mint, owner, confirmOptions, programId);\n\n    // Otherwise, create the account with the provided keypair and return its public key\n    const mintState = await getMint(connection, mint, confirmOptions?.commitment, programId);\n    const space = getAccountLenForMint(mintState);\n    const lamports = await connection.getMinimumBalanceForRentExemption(space);\n\n    const transaction = new Transaction().add(\n        SystemProgram.createAccount({\n            fromPubkey: payer.publicKey,\n            newAccountPubkey: keypair.publicKey,\n            space,\n            lamports,\n            programId,\n        }),\n        createInitializeAccountInstruction(keypair.publicKey, mint, owner, programId)\n    );\n\n    await sendAndConfirmTransaction(connection, transaction, [payer, keypair], confirmOptions);\n\n    return keypair.publicKey;\n}\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}