{"ast":null,"code":"import _slicedToArray from \"/Users/ivan/Metadata/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport { struct, u8 } from '@solana/buffer-layout';\nimport { TransactionInstruction } from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID } from '../constants.js';\nimport { TokenInvalidInstructionDataError, TokenInvalidInstructionKeysError, TokenInvalidInstructionProgramError, TokenInvalidInstructionTypeError } from '../errors.js';\nimport { TokenInstruction } from './types.js';\n/** TODO: docs */\nexport var syncNativeInstructionData = struct([u8('instruction')]);\n/**\n * Construct a SyncNative instruction\n *\n * @param account   Native account to sync lamports from\n * @param programId SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\nexport function createSyncNativeInstruction(account) {\n  var programId = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : TOKEN_PROGRAM_ID;\n  var keys = [{\n    pubkey: account,\n    isSigner: false,\n    isWritable: true\n  }];\n  var data = Buffer.alloc(syncNativeInstructionData.span);\n  syncNativeInstructionData.encode({\n    instruction: TokenInstruction.SyncNative\n  }, data);\n  return new TransactionInstruction({\n    keys: keys,\n    programId: programId,\n    data: data\n  });\n}\n/**\n * Decode a SyncNative instruction and validate it\n *\n * @param instruction Transaction instruction to decode\n * @param programId   SPL Token program account\n *\n * @return Decoded, valid instruction\n */\nexport function decodeSyncNativeInstruction(instruction) {\n  var programId = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : TOKEN_PROGRAM_ID;\n  if (!instruction.programId.equals(programId)) throw new TokenInvalidInstructionProgramError();\n  if (instruction.data.length !== syncNativeInstructionData.span) throw new TokenInvalidInstructionDataError();\n  var _decodeSyncNativeInst = decodeSyncNativeInstructionUnchecked(instruction),\n    account = _decodeSyncNativeInst.keys.account,\n    data = _decodeSyncNativeInst.data;\n  if (data.instruction !== TokenInstruction.SyncNative) throw new TokenInvalidInstructionTypeError();\n  if (!account) throw new TokenInvalidInstructionKeysError();\n  // TODO: key checks?\n  return {\n    programId: programId,\n    keys: {\n      account: account\n    },\n    data: data\n  };\n}\n/**\n * Decode a SyncNative instruction without validating it\n *\n * @param instruction Transaction instruction to decode\n *\n * @return Decoded, non-validated instruction\n */\nexport function decodeSyncNativeInstructionUnchecked(_ref) {\n  var programId = _ref.programId,\n    _ref$keys = _slicedToArray(_ref.keys, 1),\n    account = _ref$keys[0],\n    data = _ref.data;\n  return {\n    programId: programId,\n    keys: {\n      account: account\n    },\n    data: syncNativeInstructionData.decode(data)\n  };\n}","map":{"version":3,"mappings":";AAAA,SAASA,MAAM,EAAEC,EAAE,QAAQ,uBAAuB;AAElD,SAASC,sBAAsB,QAAQ,iBAAiB;AACxD,SAASC,gBAAgB,QAAQ,iBAAiB;AAClD,SACIC,gCAAgC,EAChCC,gCAAgC,EAChCC,mCAAmC,EACnCC,gCAAgC,QAC7B,cAAc;AACrB,SAASC,gBAAgB,QAAQ,YAAY;AAO7C;AACA,OAAO,IAAMC,yBAAyB,GAAGT,MAAM,CAA4B,CAACC,EAAE,CAAC,aAAa,CAAC,CAAC,CAAC;AAE/F;;;;;;;;AAQA,OAAM,SAAUS,2BAA2B,CAACC,OAAkB,EAA8B;EAAA,IAA5BC,SAAS,uEAAGT,gBAAgB;EACxF,IAAMU,IAAI,GAAG,CAAC;IAAEC,MAAM,EAAEH,OAAO;IAAEI,QAAQ,EAAE,KAAK;IAAEC,UAAU,EAAE;EAAI,CAAE,CAAC;EAErE,IAAMC,IAAI,GAAGC,MAAM,CAACC,KAAK,CAACV,yBAAyB,CAACW,IAAI,CAAC;EACzDX,yBAAyB,CAACY,MAAM,CAAC;IAAEC,WAAW,EAAEd,gBAAgB,CAACe;EAAU,CAAE,EAAEN,IAAI,CAAC;EAEpF,OAAO,IAAIf,sBAAsB,CAAC;IAAEW,IAAI,EAAJA,IAAI;IAAED,SAAS,EAATA,SAAS;IAAEK,IAAI,EAAJA;EAAI,CAAE,CAAC;AAChE;AAaA;;;;;;;;AAQA,OAAM,SAAUO,2BAA2B,CACvCF,WAAmC,EACP;EAAA,IAA5BV,SAAS,uEAAGT,gBAAgB;EAE5B,IAAI,CAACmB,WAAW,CAACV,SAAS,CAACa,MAAM,CAACb,SAAS,CAAC,EAAE,MAAM,IAAIN,mCAAmC,EAAE;EAC7F,IAAIgB,WAAW,CAACL,IAAI,CAACS,MAAM,KAAKjB,yBAAyB,CAACW,IAAI,EAAE,MAAM,IAAIhB,gCAAgC,EAAE;EAE5G,4BAGIuB,oCAAoC,CAACL,WAAW,CAAC;IAFzCX,OAAO,yBAAfE,IAAI,CAAIF,OAAO;IACfM,IAAI,yBAAJA,IAAI;EAER,IAAIA,IAAI,CAACK,WAAW,KAAKd,gBAAgB,CAACe,UAAU,EAAE,MAAM,IAAIhB,gCAAgC,EAAE;EAClG,IAAI,CAACI,OAAO,EAAE,MAAM,IAAIN,gCAAgC,EAAE;EAE1D;EAEA,OAAO;IACHO,SAAS,EAATA,SAAS;IACTC,IAAI,EAAE;MACFF,OAAO,EAAPA;KACH;IACDM,IAAI,EAAJA;GACH;AACL;AAaA;;;;;;;AAOA,OAAM,SAAUU,oCAAoC,OAI3B;EAAA,IAHrBf,SAAS,QAATA,SAAS;IAAA,gCACTC,IAAI;IAAGF,OAAO;IACdM,IAAI,QAAJA,IAAI;EAEJ,OAAO;IACHL,SAAS,EAATA,SAAS;IACTC,IAAI,EAAE;MACFF,OAAO,EAAPA;KACH;IACDM,IAAI,EAAER,yBAAyB,CAACmB,MAAM,CAACX,IAAI;GAC9C;AACL","names":["struct","u8","TransactionInstruction","TOKEN_PROGRAM_ID","TokenInvalidInstructionDataError","TokenInvalidInstructionKeysError","TokenInvalidInstructionProgramError","TokenInvalidInstructionTypeError","TokenInstruction","syncNativeInstructionData","createSyncNativeInstruction","account","programId","keys","pubkey","isSigner","isWritable","data","Buffer","alloc","span","encode","instruction","SyncNative","decodeSyncNativeInstruction","equals","length","decodeSyncNativeInstructionUnchecked","decode"],"sources":["/Users/ivan/Metadata/node_modules/@solana/spl-token/src/instructions/syncNative.ts"],"sourcesContent":["import { struct, u8 } from '@solana/buffer-layout';\nimport type { AccountMeta, PublicKey } from '@solana/web3.js';\nimport { TransactionInstruction } from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID } from '../constants.js';\nimport {\n    TokenInvalidInstructionDataError,\n    TokenInvalidInstructionKeysError,\n    TokenInvalidInstructionProgramError,\n    TokenInvalidInstructionTypeError,\n} from '../errors.js';\nimport { TokenInstruction } from './types.js';\n\n/** TODO: docs */\nexport interface SyncNativeInstructionData {\n    instruction: TokenInstruction.SyncNative;\n}\n\n/** TODO: docs */\nexport const syncNativeInstructionData = struct<SyncNativeInstructionData>([u8('instruction')]);\n\n/**\n * Construct a SyncNative instruction\n *\n * @param account   Native account to sync lamports from\n * @param programId SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\nexport function createSyncNativeInstruction(account: PublicKey, programId = TOKEN_PROGRAM_ID): TransactionInstruction {\n    const keys = [{ pubkey: account, isSigner: false, isWritable: true }];\n\n    const data = Buffer.alloc(syncNativeInstructionData.span);\n    syncNativeInstructionData.encode({ instruction: TokenInstruction.SyncNative }, data);\n\n    return new TransactionInstruction({ keys, programId, data });\n}\n\n/** A decoded, valid SyncNative instruction */\nexport interface DecodedSyncNativeInstruction {\n    programId: PublicKey;\n    keys: {\n        account: AccountMeta;\n    };\n    data: {\n        instruction: TokenInstruction.SyncNative;\n    };\n}\n\n/**\n * Decode a SyncNative instruction and validate it\n *\n * @param instruction Transaction instruction to decode\n * @param programId   SPL Token program account\n *\n * @return Decoded, valid instruction\n */\nexport function decodeSyncNativeInstruction(\n    instruction: TransactionInstruction,\n    programId = TOKEN_PROGRAM_ID\n): DecodedSyncNativeInstruction {\n    if (!instruction.programId.equals(programId)) throw new TokenInvalidInstructionProgramError();\n    if (instruction.data.length !== syncNativeInstructionData.span) throw new TokenInvalidInstructionDataError();\n\n    const {\n        keys: { account },\n        data,\n    } = decodeSyncNativeInstructionUnchecked(instruction);\n    if (data.instruction !== TokenInstruction.SyncNative) throw new TokenInvalidInstructionTypeError();\n    if (!account) throw new TokenInvalidInstructionKeysError();\n\n    // TODO: key checks?\n\n    return {\n        programId,\n        keys: {\n            account,\n        },\n        data,\n    };\n}\n\n/** A decoded, non-validated SyncNative instruction */\nexport interface DecodedSyncNativeInstructionUnchecked {\n    programId: PublicKey;\n    keys: {\n        account: AccountMeta | undefined;\n    };\n    data: {\n        instruction: number;\n    };\n}\n\n/**\n * Decode a SyncNative instruction without validating it\n *\n * @param instruction Transaction instruction to decode\n *\n * @return Decoded, non-validated instruction\n */\nexport function decodeSyncNativeInstructionUnchecked({\n    programId,\n    keys: [account],\n    data,\n}: TransactionInstruction): DecodedSyncNativeInstructionUnchecked {\n    return {\n        programId,\n        keys: {\n            account,\n        },\n        data: syncNativeInstructionData.decode(data),\n    };\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}