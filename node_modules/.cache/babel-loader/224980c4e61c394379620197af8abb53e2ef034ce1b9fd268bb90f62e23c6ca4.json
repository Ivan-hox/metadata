{"ast":null,"code":"\"use strict\";\n\nvar _toArray = require(\"/Users/ivan/Metadata/node_modules/@babel/runtime/helpers/toArray.js\").default;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.decodeTransferCheckedInstructionUnchecked = exports.decodeTransferCheckedInstruction = exports.createTransferCheckedInstruction = exports.transferCheckedInstructionData = void 0;\nvar buffer_layout_1 = require(\"@solana/buffer-layout\");\nvar buffer_layout_utils_1 = require(\"@solana/buffer-layout-utils\");\nvar web3_js_1 = require(\"@solana/web3.js\");\nvar constants_js_1 = require(\"../constants.js\");\nvar errors_js_1 = require(\"../errors.js\");\nvar internal_js_1 = require(\"./internal.js\");\nvar types_js_1 = require(\"./types.js\");\n/** TODO: docs */\nexports.transferCheckedInstructionData = (0, buffer_layout_1.struct)([(0, buffer_layout_1.u8)('instruction'), (0, buffer_layout_utils_1.u64)('amount'), (0, buffer_layout_1.u8)('decimals')]);\n/**\n * Construct a TransferChecked instruction\n *\n * @param source       Source account\n * @param mint         Mint account\n * @param destination  Destination account\n * @param owner        Owner of the source account\n * @param amount       Number of tokens to transfer\n * @param decimals     Number of decimals in transfer amount\n * @param multiSigners Signing accounts if `owner` is a multisig\n * @param programId    SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\nfunction createTransferCheckedInstruction(source, mint, destination, owner, amount, decimals) {\n  var multiSigners = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : [];\n  var programId = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : constants_js_1.TOKEN_PROGRAM_ID;\n  var keys = (0, internal_js_1.addSigners)([{\n    pubkey: source,\n    isSigner: false,\n    isWritable: true\n  }, {\n    pubkey: mint,\n    isSigner: false,\n    isWritable: false\n  }, {\n    pubkey: destination,\n    isSigner: false,\n    isWritable: true\n  }], owner, multiSigners);\n  var data = Buffer.alloc(exports.transferCheckedInstructionData.span);\n  exports.transferCheckedInstructionData.encode({\n    instruction: types_js_1.TokenInstruction.TransferChecked,\n    amount: BigInt(amount),\n    decimals: decimals\n  }, data);\n  return new web3_js_1.TransactionInstruction({\n    keys: keys,\n    programId: programId,\n    data: data\n  });\n}\nexports.createTransferCheckedInstruction = createTransferCheckedInstruction;\n/**\n * Decode a TransferChecked instruction and validate it\n *\n * @param instruction Transaction instruction to decode\n * @param programId   SPL Token program account\n *\n * @return Decoded, valid instruction\n */\nfunction decodeTransferCheckedInstruction(instruction) {\n  var programId = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : constants_js_1.TOKEN_PROGRAM_ID;\n  if (!instruction.programId.equals(programId)) throw new errors_js_1.TokenInvalidInstructionProgramError();\n  if (instruction.data.length !== exports.transferCheckedInstructionData.span) throw new errors_js_1.TokenInvalidInstructionDataError();\n  var _decodeTransferChecke = decodeTransferCheckedInstructionUnchecked(instruction),\n    _decodeTransferChecke2 = _decodeTransferChecke.keys,\n    source = _decodeTransferChecke2.source,\n    mint = _decodeTransferChecke2.mint,\n    destination = _decodeTransferChecke2.destination,\n    owner = _decodeTransferChecke2.owner,\n    multiSigners = _decodeTransferChecke2.multiSigners,\n    data = _decodeTransferChecke.data;\n  if (data.instruction !== types_js_1.TokenInstruction.TransferChecked) throw new errors_js_1.TokenInvalidInstructionTypeError();\n  if (!source || !mint || !destination || !owner) throw new errors_js_1.TokenInvalidInstructionKeysError();\n  // TODO: key checks?\n  return {\n    programId: programId,\n    keys: {\n      source: source,\n      mint: mint,\n      destination: destination,\n      owner: owner,\n      multiSigners: multiSigners\n    },\n    data: data\n  };\n}\nexports.decodeTransferCheckedInstruction = decodeTransferCheckedInstruction;\n/**\n * Decode a TransferChecked instruction without validating it\n *\n * @param instruction Transaction instruction to decode\n *\n * @return Decoded, non-validated instruction\n */\nfunction decodeTransferCheckedInstructionUnchecked(_ref) {\n  var programId = _ref.programId,\n    _ref$keys = _toArray(_ref.keys),\n    source = _ref$keys[0],\n    mint = _ref$keys[1],\n    destination = _ref$keys[2],\n    owner = _ref$keys[3],\n    multiSigners = _ref$keys.slice(4),\n    data = _ref.data;\n  return {\n    programId: programId,\n    keys: {\n      source: source,\n      mint: mint,\n      destination: destination,\n      owner: owner,\n      multiSigners: multiSigners\n    },\n    data: exports.transferCheckedInstructionData.decode(data)\n  };\n}\nexports.decodeTransferCheckedInstructionUnchecked = decodeTransferCheckedInstructionUnchecked;","map":{"version":3,"mappings":"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","names":["exports","createTransferCheckedInstruction","source","mint","destination","owner","amount","decimals","multiSigners","programId","constants_js_1","keys","pubkey","isSigner","isWritable","data","Buffer","alloc","span","encode","instruction","types_js_1","TransferChecked","BigInt","web3_js_1","decodeTransferCheckedInstruction","equals","errors_js_1","length","decodeTransferCheckedInstructionUnchecked","decode"],"sources":["/Users/ivan/Metadata/node_modules/@solana/spl-token/src/instructions/transferChecked.ts"],"sourcesContent":["import { struct, u8 } from '@solana/buffer-layout';\nimport { u64 } from '@solana/buffer-layout-utils';\nimport type { AccountMeta, PublicKey, Signer } from '@solana/web3.js';\nimport { TransactionInstruction } from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID } from '../constants.js';\nimport {\n    TokenInvalidInstructionDataError,\n    TokenInvalidInstructionKeysError,\n    TokenInvalidInstructionProgramError,\n    TokenInvalidInstructionTypeError,\n} from '../errors.js';\nimport { addSigners } from './internal.js';\nimport { TokenInstruction } from './types.js';\n\n/** TODO: docs */\nexport interface TransferCheckedInstructionData {\n    instruction: TokenInstruction.TransferChecked;\n    amount: bigint;\n    decimals: number;\n}\n\n/** TODO: docs */\nexport const transferCheckedInstructionData = struct<TransferCheckedInstructionData>([\n    u8('instruction'),\n    u64('amount'),\n    u8('decimals'),\n]);\n\n/**\n * Construct a TransferChecked instruction\n *\n * @param source       Source account\n * @param mint         Mint account\n * @param destination  Destination account\n * @param owner        Owner of the source account\n * @param amount       Number of tokens to transfer\n * @param decimals     Number of decimals in transfer amount\n * @param multiSigners Signing accounts if `owner` is a multisig\n * @param programId    SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\nexport function createTransferCheckedInstruction(\n    source: PublicKey,\n    mint: PublicKey,\n    destination: PublicKey,\n    owner: PublicKey,\n    amount: number | bigint,\n    decimals: number,\n    multiSigners: Signer[] = [],\n    programId = TOKEN_PROGRAM_ID\n): TransactionInstruction {\n    const keys = addSigners(\n        [\n            { pubkey: source, isSigner: false, isWritable: true },\n            { pubkey: mint, isSigner: false, isWritable: false },\n            { pubkey: destination, isSigner: false, isWritable: true },\n        ],\n        owner,\n        multiSigners\n    );\n\n    const data = Buffer.alloc(transferCheckedInstructionData.span);\n    transferCheckedInstructionData.encode(\n        {\n            instruction: TokenInstruction.TransferChecked,\n            amount: BigInt(amount),\n            decimals,\n        },\n        data\n    );\n\n    return new TransactionInstruction({ keys, programId, data });\n}\n\n/** A decoded, valid TransferChecked instruction */\nexport interface DecodedTransferCheckedInstruction {\n    programId: PublicKey;\n    keys: {\n        source: AccountMeta;\n        mint: AccountMeta;\n        destination: AccountMeta;\n        owner: AccountMeta;\n        multiSigners: AccountMeta[];\n    };\n    data: {\n        instruction: TokenInstruction.TransferChecked;\n        amount: bigint;\n        decimals: number;\n    };\n}\n\n/**\n * Decode a TransferChecked instruction and validate it\n *\n * @param instruction Transaction instruction to decode\n * @param programId   SPL Token program account\n *\n * @return Decoded, valid instruction\n */\nexport function decodeTransferCheckedInstruction(\n    instruction: TransactionInstruction,\n    programId = TOKEN_PROGRAM_ID\n): DecodedTransferCheckedInstruction {\n    if (!instruction.programId.equals(programId)) throw new TokenInvalidInstructionProgramError();\n    if (instruction.data.length !== transferCheckedInstructionData.span) throw new TokenInvalidInstructionDataError();\n\n    const {\n        keys: { source, mint, destination, owner, multiSigners },\n        data,\n    } = decodeTransferCheckedInstructionUnchecked(instruction);\n    if (data.instruction !== TokenInstruction.TransferChecked) throw new TokenInvalidInstructionTypeError();\n    if (!source || !mint || !destination || !owner) throw new TokenInvalidInstructionKeysError();\n\n    // TODO: key checks?\n\n    return {\n        programId,\n        keys: {\n            source,\n            mint,\n            destination,\n            owner,\n            multiSigners,\n        },\n        data,\n    };\n}\n\n/** A decoded, non-validated TransferChecked instruction */\nexport interface DecodedTransferCheckedInstructionUnchecked {\n    programId: PublicKey;\n    keys: {\n        source: AccountMeta | undefined;\n        mint: AccountMeta | undefined;\n        destination: AccountMeta | undefined;\n        owner: AccountMeta | undefined;\n        multiSigners: AccountMeta[];\n    };\n    data: {\n        instruction: number;\n        amount: bigint;\n        decimals: number;\n    };\n}\n\n/**\n * Decode a TransferChecked instruction without validating it\n *\n * @param instruction Transaction instruction to decode\n *\n * @return Decoded, non-validated instruction\n */\nexport function decodeTransferCheckedInstructionUnchecked({\n    programId,\n    keys: [source, mint, destination, owner, ...multiSigners],\n    data,\n}: TransactionInstruction): DecodedTransferCheckedInstructionUnchecked {\n    return {\n        programId,\n        keys: {\n            source,\n            mint,\n            destination,\n            owner,\n            multiSigners,\n        },\n        data: transferCheckedInstructionData.decode(data),\n    };\n}\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}