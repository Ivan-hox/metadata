{"ast":null,"code":"import _toArray from \"/Users/ivan/Metadata/node_modules/@babel/runtime/helpers/esm/toArray.js\";\nimport { struct, u8 } from '@solana/buffer-layout';\nimport { TransactionInstruction } from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID } from '../constants.js';\nimport { TokenInvalidInstructionDataError, TokenInvalidInstructionKeysError, TokenInvalidInstructionProgramError, TokenInvalidInstructionTypeError } from '../errors.js';\nimport { addSigners } from './internal.js';\nimport { TokenInstruction } from './types.js';\n/** TODO: docs */\nexport var freezeAccountInstructionData = struct([u8('instruction')]);\n/**\n * Construct a FreezeAccount instruction\n *\n * @param account      Account to freeze\n * @param mint         Mint account\n * @param authority    Mint freeze authority\n * @param multiSigners Signing accounts if `authority` is a multisig\n * @param programId    SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\nexport function createFreezeAccountInstruction(account, mint, authority) {\n  var multiSigners = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [];\n  var programId = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : TOKEN_PROGRAM_ID;\n  var keys = addSigners([{\n    pubkey: account,\n    isSigner: false,\n    isWritable: true\n  }, {\n    pubkey: mint,\n    isSigner: false,\n    isWritable: false\n  }], authority, multiSigners);\n  var data = Buffer.alloc(freezeAccountInstructionData.span);\n  freezeAccountInstructionData.encode({\n    instruction: TokenInstruction.FreezeAccount\n  }, data);\n  return new TransactionInstruction({\n    keys: keys,\n    programId: programId,\n    data: data\n  });\n}\n/**\n * Decode a FreezeAccount instruction and validate it\n *\n * @param instruction Transaction instruction to decode\n * @param programId   SPL Token program account\n *\n * @return Decoded, valid instruction\n */\nexport function decodeFreezeAccountInstruction(instruction) {\n  var programId = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : TOKEN_PROGRAM_ID;\n  if (!instruction.programId.equals(programId)) throw new TokenInvalidInstructionProgramError();\n  if (instruction.data.length !== freezeAccountInstructionData.span) throw new TokenInvalidInstructionDataError();\n  var _decodeFreezeAccountI = decodeFreezeAccountInstructionUnchecked(instruction),\n    _decodeFreezeAccountI2 = _decodeFreezeAccountI.keys,\n    account = _decodeFreezeAccountI2.account,\n    mint = _decodeFreezeAccountI2.mint,\n    authority = _decodeFreezeAccountI2.authority,\n    multiSigners = _decodeFreezeAccountI2.multiSigners,\n    data = _decodeFreezeAccountI.data;\n  if (data.instruction !== TokenInstruction.FreezeAccount) throw new TokenInvalidInstructionTypeError();\n  if (!account || !mint || !authority) throw new TokenInvalidInstructionKeysError();\n  // TODO: key checks?\n  return {\n    programId: programId,\n    keys: {\n      account: account,\n      mint: mint,\n      authority: authority,\n      multiSigners: multiSigners\n    },\n    data: data\n  };\n}\n/**\n * Decode a FreezeAccount instruction without validating it\n *\n * @param instruction Transaction instruction to decode\n *\n * @return Decoded, non-validated instruction\n */\nexport function decodeFreezeAccountInstructionUnchecked(_ref) {\n  var programId = _ref.programId,\n    _ref$keys = _toArray(_ref.keys),\n    account = _ref$keys[0],\n    mint = _ref$keys[1],\n    authority = _ref$keys[2],\n    multiSigners = _ref$keys.slice(3),\n    data = _ref.data;\n  return {\n    programId: programId,\n    keys: {\n      account: account,\n      mint: mint,\n      authority: authority,\n      multiSigners: multiSigners\n    },\n    data: freezeAccountInstructionData.decode(data)\n  };\n}","map":{"version":3,"mappings":"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","names":["struct","u8","TransactionInstruction","TOKEN_PROGRAM_ID","TokenInvalidInstructionDataError","TokenInvalidInstructionKeysError","TokenInvalidInstructionProgramError","TokenInvalidInstructionTypeError","addSigners","TokenInstruction","freezeAccountInstructionData","createFreezeAccountInstruction","account","mint","authority","multiSigners","programId","keys","pubkey","isSigner","isWritable","data","Buffer","alloc","span","encode","instruction","FreezeAccount","decodeFreezeAccountInstruction","equals","length","decodeFreezeAccountInstructionUnchecked","decode"],"sources":["/Users/ivan/Metadata/node_modules/@solana/spl-token/src/instructions/freezeAccount.ts"],"sourcesContent":["import { struct, u8 } from '@solana/buffer-layout';\nimport type { AccountMeta, PublicKey, Signer } from '@solana/web3.js';\nimport { TransactionInstruction } from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID } from '../constants.js';\nimport {\n    TokenInvalidInstructionDataError,\n    TokenInvalidInstructionKeysError,\n    TokenInvalidInstructionProgramError,\n    TokenInvalidInstructionTypeError,\n} from '../errors.js';\nimport { addSigners } from './internal.js';\nimport { TokenInstruction } from './types.js';\n\n/** TODO: docs */\nexport interface FreezeAccountInstructionData {\n    instruction: TokenInstruction.FreezeAccount;\n}\n\n/** TODO: docs */\nexport const freezeAccountInstructionData = struct<FreezeAccountInstructionData>([u8('instruction')]);\n\n/**\n * Construct a FreezeAccount instruction\n *\n * @param account      Account to freeze\n * @param mint         Mint account\n * @param authority    Mint freeze authority\n * @param multiSigners Signing accounts if `authority` is a multisig\n * @param programId    SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\nexport function createFreezeAccountInstruction(\n    account: PublicKey,\n    mint: PublicKey,\n    authority: PublicKey,\n    multiSigners: Signer[] = [],\n    programId = TOKEN_PROGRAM_ID\n): TransactionInstruction {\n    const keys = addSigners(\n        [\n            { pubkey: account, isSigner: false, isWritable: true },\n            { pubkey: mint, isSigner: false, isWritable: false },\n        ],\n        authority,\n        multiSigners\n    );\n\n    const data = Buffer.alloc(freezeAccountInstructionData.span);\n    freezeAccountInstructionData.encode({ instruction: TokenInstruction.FreezeAccount }, data);\n\n    return new TransactionInstruction({ keys, programId, data });\n}\n\n/** A decoded, valid FreezeAccount instruction */\nexport interface DecodedFreezeAccountInstruction {\n    programId: PublicKey;\n    keys: {\n        account: AccountMeta;\n        mint: AccountMeta;\n        authority: AccountMeta;\n        multiSigners: AccountMeta[];\n    };\n    data: {\n        instruction: TokenInstruction.FreezeAccount;\n    };\n}\n\n/**\n * Decode a FreezeAccount instruction and validate it\n *\n * @param instruction Transaction instruction to decode\n * @param programId   SPL Token program account\n *\n * @return Decoded, valid instruction\n */\nexport function decodeFreezeAccountInstruction(\n    instruction: TransactionInstruction,\n    programId = TOKEN_PROGRAM_ID\n): DecodedFreezeAccountInstruction {\n    if (!instruction.programId.equals(programId)) throw new TokenInvalidInstructionProgramError();\n    if (instruction.data.length !== freezeAccountInstructionData.span) throw new TokenInvalidInstructionDataError();\n\n    const {\n        keys: { account, mint, authority, multiSigners },\n        data,\n    } = decodeFreezeAccountInstructionUnchecked(instruction);\n    if (data.instruction !== TokenInstruction.FreezeAccount) throw new TokenInvalidInstructionTypeError();\n    if (!account || !mint || !authority) throw new TokenInvalidInstructionKeysError();\n\n    // TODO: key checks?\n\n    return {\n        programId,\n        keys: {\n            account,\n            mint,\n            authority,\n            multiSigners,\n        },\n        data,\n    };\n}\n\n/** A decoded, non-validated FreezeAccount instruction */\nexport interface DecodedFreezeAccountInstructionUnchecked {\n    programId: PublicKey;\n    keys: {\n        account: AccountMeta | undefined;\n        mint: AccountMeta | undefined;\n        authority: AccountMeta | undefined;\n        multiSigners: AccountMeta[];\n    };\n    data: {\n        instruction: number;\n    };\n}\n\n/**\n * Decode a FreezeAccount instruction without validating it\n *\n * @param instruction Transaction instruction to decode\n *\n * @return Decoded, non-validated instruction\n */\nexport function decodeFreezeAccountInstructionUnchecked({\n    programId,\n    keys: [account, mint, authority, ...multiSigners],\n    data,\n}: TransactionInstruction): DecodedFreezeAccountInstructionUnchecked {\n    return {\n        programId,\n        keys: {\n            account,\n            mint,\n            authority,\n            multiSigners,\n        },\n        data: freezeAccountInstructionData.decode(data),\n    };\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}