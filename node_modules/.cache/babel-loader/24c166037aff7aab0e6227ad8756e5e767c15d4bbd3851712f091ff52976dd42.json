{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"/Users/ivan/Metadata/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\").default;\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createNativeMint = void 0;\nvar web3_js_1 = require(\"@solana/web3.js\");\nvar constants_js_1 = require(\"../constants.js\");\nvar createNativeMint_js_1 = require(\"../instructions/createNativeMint.js\");\n/**\n * Create native mint\n *\n * @param connection               Connection to use\n * @param payer                    Payer of the transaction and initialization fees\n * @param confirmOptions           Options for confirming the transaction\n * @param programId                SPL Token program account\n * @param nativeMint               Native mint id associated with program\n */\nfunction createNativeMint(connection, payer, confirmOptions) {\n  var nativeMint = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : constants_js_1.NATIVE_MINT_2022;\n  var programId = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : constants_js_1.TOKEN_2022_PROGRAM_ID;\n  return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n    var transaction;\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            transaction = new web3_js_1.Transaction().add((0, createNativeMint_js_1.createCreateNativeMintInstruction)(payer.publicKey, nativeMint, programId));\n            _context.next = 3;\n            return (0, web3_js_1.sendAndConfirmTransaction)(connection, transaction, [payer], confirmOptions);\n          case 3:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n}\nexports.createNativeMint = createNativeMint;","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA;AACA;AACA;AAEA;;;;;;;;;AASA,SAAsBA,gBAAgB,CAClCC,UAAsB,EACtBC,KAAa,EACbC,cAA+B,EAEE;EAAA,IADjCC,UAAU,uEAAGC,+BAAgB;EAAA,IAC7BC,SAAS,uEAAGD,oCAAqB;;;;;;;YAE3BE,WAAW,GAAG,IAAIC,qBAAW,EAAE,CAACC,GAAG,CACrC,2DAAiC,EAACP,KAAK,CAACQ,SAAS,EAAEN,UAAU,EAAEE,SAAS,CAAC,CAC5E;YAAA;YACD,OAAM,uCAAyB,EAACL,UAAU,EAAEM,WAAW,EAAE,CAACL,KAAK,CAAC,EAAEC,cAAc,CAAC;UAAA;UAAA;YAAA;QAAA;MAAA;IAAA;EAAA,CACpF;;AAXDQ","names":["createNativeMint","connection","payer","confirmOptions","nativeMint","constants_js_1","programId","transaction","web3_js_1","add","publicKey","exports"],"sources":["/Users/ivan/Metadata/node_modules/@solana/spl-token/src/actions/createNativeMint.ts"],"sourcesContent":["import type { ConfirmOptions, Connection, Signer } from '@solana/web3.js';\nimport { sendAndConfirmTransaction, Transaction } from '@solana/web3.js';\nimport { NATIVE_MINT_2022, TOKEN_2022_PROGRAM_ID } from '../constants.js';\nimport { createCreateNativeMintInstruction } from '../instructions/createNativeMint.js';\n\n/**\n * Create native mint\n *\n * @param connection               Connection to use\n * @param payer                    Payer of the transaction and initialization fees\n * @param confirmOptions           Options for confirming the transaction\n * @param programId                SPL Token program account\n * @param nativeMint               Native mint id associated with program\n */\nexport async function createNativeMint(\n    connection: Connection,\n    payer: Signer,\n    confirmOptions?: ConfirmOptions,\n    nativeMint = NATIVE_MINT_2022,\n    programId = TOKEN_2022_PROGRAM_ID\n): Promise<void> {\n    const transaction = new Transaction().add(\n        createCreateNativeMintInstruction(payer.publicKey, nativeMint, programId)\n    );\n    await sendAndConfirmTransaction(connection, transaction, [payer], confirmOptions);\n}\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}