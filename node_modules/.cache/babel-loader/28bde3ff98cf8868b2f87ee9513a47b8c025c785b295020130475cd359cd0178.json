{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.bool = void 0;\nvar buffer_layout_1 = require(\"@solana/buffer-layout\");\nvar base_1 = require(\"./base\");\nvar bool = function bool(property) {\n  var layout = (0, buffer_layout_1.u8)(property);\n  var _ref = (0, base_1.encodeDecode)(layout),\n    encode = _ref.encode,\n    decode = _ref.decode;\n  var boolLayout = layout;\n  boolLayout.decode = function (buffer, offset) {\n    var src = decode(buffer, offset);\n    return !!src;\n  };\n  boolLayout.encode = function (bool, buffer, offset) {\n    var src = Number(bool);\n    return encode(src, buffer, offset);\n  };\n  return boolLayout;\n};\nexports.bool = bool;","map":{"version":3,"mappings":";;;;;;AAAA;AACA;AAEO,IAAMA,IAAI,GAAG,SAAPA,IAAI,CAAIC,QAAiB,EAAqB;EACvD,IAAMC,MAAM,GAAG,sBAAE,EAACD,QAAQ,CAAC;EAC3B,WAA2B,uBAAY,EAACC,MAAM,CAAC;IAAvCC,MAAM,QAANA,MAAM;IAAEC,MAAM,QAANA,MAAM;EAEtB,IAAMC,UAAU,GAAGH,MAA4C;EAE/DG,UAAU,CAACD,MAAM,GAAG,UAACE,MAAc,EAAEC,MAAc,EAAI;IACnD,IAAMC,GAAG,GAAGJ,MAAM,CAACE,MAAM,EAAEC,MAAM,CAAC;IAClC,OAAO,CAAC,CAACC,GAAG;EAChB,CAAC;EAEDH,UAAU,CAACF,MAAM,GAAG,UAACH,IAAa,EAAEM,MAAc,EAAEC,MAAc,EAAI;IAClE,IAAMC,GAAG,GAAGC,MAAM,CAACT,IAAI,CAAC;IACxB,OAAOG,MAAM,CAACK,GAAG,EAAEF,MAAM,EAAEC,MAAM,CAAC;EACtC,CAAC;EAED,OAAOF,UAAU;AACrB,CAAC;AAjBYK,YAAI","names":["bool","property","layout","encode","decode","boolLayout","buffer","offset","src","Number","exports"],"sources":["/Users/ivan/Metadata/node_modules/@solana/buffer-layout-utils/src/native.ts"],"sourcesContent":["import { Layout, u8 } from '@solana/buffer-layout';\nimport { encodeDecode } from './base';\n\nexport const bool = (property?: string): Layout<boolean> => {\n    const layout = u8(property);\n    const { encode, decode } = encodeDecode(layout);\n\n    const boolLayout = layout as Layout<unknown> as Layout<boolean>;\n\n    boolLayout.decode = (buffer: Buffer, offset: number) => {\n        const src = decode(buffer, offset);\n        return !!src;\n    };\n\n    boolLayout.encode = (bool: boolean, buffer: Buffer, offset: number) => {\n        const src = Number(bool);\n        return encode(src, buffer, offset);\n    };\n\n    return boolLayout;\n};\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}