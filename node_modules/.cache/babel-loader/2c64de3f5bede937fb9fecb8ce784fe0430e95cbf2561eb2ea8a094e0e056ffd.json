{"ast":null,"code":"import _toArray from \"/Users/ivan/Metadata/node_modules/@babel/runtime/helpers/esm/toArray.js\";\nimport { struct, u8 } from '@solana/buffer-layout';\nimport { TransactionInstruction } from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID } from '../constants.js';\nimport { TokenInvalidInstructionDataError, TokenInvalidInstructionKeysError, TokenInvalidInstructionProgramError, TokenInvalidInstructionTypeError } from '../errors.js';\nimport { addSigners } from './internal.js';\nimport { TokenInstruction } from './types.js';\n/** TODO: docs */\nexport var closeAccountInstructionData = struct([u8('instruction')]);\n/**\n * Construct a CloseAccount instruction\n *\n * @param account      Account to close\n * @param destination  Account to receive the remaining balance of the closed account\n * @param authority    Account close authority\n * @param multiSigners Signing accounts if `authority` is a multisig\n * @param programId    SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\nexport function createCloseAccountInstruction(account, destination, authority) {\n  var multiSigners = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [];\n  var programId = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : TOKEN_PROGRAM_ID;\n  var keys = addSigners([{\n    pubkey: account,\n    isSigner: false,\n    isWritable: true\n  }, {\n    pubkey: destination,\n    isSigner: false,\n    isWritable: true\n  }], authority, multiSigners);\n  var data = Buffer.alloc(closeAccountInstructionData.span);\n  closeAccountInstructionData.encode({\n    instruction: TokenInstruction.CloseAccount\n  }, data);\n  return new TransactionInstruction({\n    keys: keys,\n    programId: programId,\n    data: data\n  });\n}\n/**\n * Decode a CloseAccount instruction and validate it\n *\n * @param instruction Transaction instruction to decode\n * @param programId   SPL Token program account\n *\n * @return Decoded, valid instruction\n */\nexport function decodeCloseAccountInstruction(instruction) {\n  var programId = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : TOKEN_PROGRAM_ID;\n  if (!instruction.programId.equals(programId)) throw new TokenInvalidInstructionProgramError();\n  if (instruction.data.length !== closeAccountInstructionData.span) throw new TokenInvalidInstructionDataError();\n  var _decodeCloseAccountIn = decodeCloseAccountInstructionUnchecked(instruction),\n    _decodeCloseAccountIn2 = _decodeCloseAccountIn.keys,\n    account = _decodeCloseAccountIn2.account,\n    destination = _decodeCloseAccountIn2.destination,\n    authority = _decodeCloseAccountIn2.authority,\n    multiSigners = _decodeCloseAccountIn2.multiSigners,\n    data = _decodeCloseAccountIn.data;\n  if (data.instruction !== TokenInstruction.CloseAccount) throw new TokenInvalidInstructionTypeError();\n  if (!account || !destination || !authority) throw new TokenInvalidInstructionKeysError();\n  // TODO: key checks?\n  return {\n    programId: programId,\n    keys: {\n      account: account,\n      destination: destination,\n      authority: authority,\n      multiSigners: multiSigners\n    },\n    data: data\n  };\n}\n/**\n * Decode a CloseAccount instruction without validating it\n *\n * @param instruction Transaction instruction to decode\n *\n * @return Decoded, non-validated instruction\n */\nexport function decodeCloseAccountInstructionUnchecked(_ref) {\n  var programId = _ref.programId,\n    _ref$keys = _toArray(_ref.keys),\n    account = _ref$keys[0],\n    destination = _ref$keys[1],\n    authority = _ref$keys[2],\n    multiSigners = _ref$keys.slice(3),\n    data = _ref.data;\n  return {\n    programId: programId,\n    keys: {\n      account: account,\n      destination: destination,\n      authority: authority,\n      multiSigners: multiSigners\n    },\n    data: closeAccountInstructionData.decode(data)\n  };\n}","map":{"version":3,"mappings":"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","names":["struct","u8","TransactionInstruction","TOKEN_PROGRAM_ID","TokenInvalidInstructionDataError","TokenInvalidInstructionKeysError","TokenInvalidInstructionProgramError","TokenInvalidInstructionTypeError","addSigners","TokenInstruction","closeAccountInstructionData","createCloseAccountInstruction","account","destination","authority","multiSigners","programId","keys","pubkey","isSigner","isWritable","data","Buffer","alloc","span","encode","instruction","CloseAccount","decodeCloseAccountInstruction","equals","length","decodeCloseAccountInstructionUnchecked","decode"],"sources":["/Users/ivan/Metadata/node_modules/@solana/spl-token/src/instructions/closeAccount.ts"],"sourcesContent":["import { struct, u8 } from '@solana/buffer-layout';\nimport type { AccountMeta, PublicKey, Signer } from '@solana/web3.js';\nimport { TransactionInstruction } from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID } from '../constants.js';\nimport {\n    TokenInvalidInstructionDataError,\n    TokenInvalidInstructionKeysError,\n    TokenInvalidInstructionProgramError,\n    TokenInvalidInstructionTypeError,\n} from '../errors.js';\nimport { addSigners } from './internal.js';\nimport { TokenInstruction } from './types.js';\n\n/** TODO: docs */\nexport interface CloseAccountInstructionData {\n    instruction: TokenInstruction.CloseAccount;\n}\n\n/** TODO: docs */\nexport const closeAccountInstructionData = struct<CloseAccountInstructionData>([u8('instruction')]);\n\n/**\n * Construct a CloseAccount instruction\n *\n * @param account      Account to close\n * @param destination  Account to receive the remaining balance of the closed account\n * @param authority    Account close authority\n * @param multiSigners Signing accounts if `authority` is a multisig\n * @param programId    SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\nexport function createCloseAccountInstruction(\n    account: PublicKey,\n    destination: PublicKey,\n    authority: PublicKey,\n    multiSigners: Signer[] = [],\n    programId = TOKEN_PROGRAM_ID\n): TransactionInstruction {\n    const keys = addSigners(\n        [\n            { pubkey: account, isSigner: false, isWritable: true },\n            { pubkey: destination, isSigner: false, isWritable: true },\n        ],\n        authority,\n        multiSigners\n    );\n\n    const data = Buffer.alloc(closeAccountInstructionData.span);\n    closeAccountInstructionData.encode({ instruction: TokenInstruction.CloseAccount }, data);\n\n    return new TransactionInstruction({ keys, programId, data });\n}\n\n/** A decoded, valid CloseAccount instruction */\nexport interface DecodedCloseAccountInstruction {\n    programId: PublicKey;\n    keys: {\n        account: AccountMeta;\n        destination: AccountMeta;\n        authority: AccountMeta;\n        multiSigners: AccountMeta[];\n    };\n    data: {\n        instruction: TokenInstruction.CloseAccount;\n    };\n}\n\n/**\n * Decode a CloseAccount instruction and validate it\n *\n * @param instruction Transaction instruction to decode\n * @param programId   SPL Token program account\n *\n * @return Decoded, valid instruction\n */\nexport function decodeCloseAccountInstruction(\n    instruction: TransactionInstruction,\n    programId = TOKEN_PROGRAM_ID\n): DecodedCloseAccountInstruction {\n    if (!instruction.programId.equals(programId)) throw new TokenInvalidInstructionProgramError();\n    if (instruction.data.length !== closeAccountInstructionData.span) throw new TokenInvalidInstructionDataError();\n\n    const {\n        keys: { account, destination, authority, multiSigners },\n        data,\n    } = decodeCloseAccountInstructionUnchecked(instruction);\n    if (data.instruction !== TokenInstruction.CloseAccount) throw new TokenInvalidInstructionTypeError();\n    if (!account || !destination || !authority) throw new TokenInvalidInstructionKeysError();\n\n    // TODO: key checks?\n\n    return {\n        programId,\n        keys: {\n            account,\n            destination,\n            authority,\n            multiSigners,\n        },\n        data,\n    };\n}\n\n/** A decoded, non-validated CloseAccount instruction */\nexport interface DecodedCloseAccountInstructionUnchecked {\n    programId: PublicKey;\n    keys: {\n        account: AccountMeta | undefined;\n        destination: AccountMeta | undefined;\n        authority: AccountMeta | undefined;\n        multiSigners: AccountMeta[];\n    };\n    data: {\n        instruction: number;\n    };\n}\n\n/**\n * Decode a CloseAccount instruction without validating it\n *\n * @param instruction Transaction instruction to decode\n *\n * @return Decoded, non-validated instruction\n */\nexport function decodeCloseAccountInstructionUnchecked({\n    programId,\n    keys: [account, destination, authority, ...multiSigners],\n    data,\n}: TransactionInstruction): DecodedCloseAccountInstructionUnchecked {\n    return {\n        programId,\n        keys: {\n            account,\n            destination,\n            authority,\n            multiSigners,\n        },\n        data: closeAccountInstructionData.decode(data),\n    };\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}