{"ast":null,"code":"import _regeneratorRuntime from \"/Users/ivan/Metadata/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"/Users/ivan/Metadata/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { sendAndConfirmTransaction, SystemProgram, Transaction } from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID } from '../constants.js';\nimport { getAccountLenForMint } from '../extensions/extensionType.js';\nimport { createInitializeAccountInstruction } from '../instructions/initializeAccount.js';\nimport { getMint } from '../state/mint.js';\nimport { createAssociatedTokenAccount } from './createAssociatedTokenAccount.js';\n/**\n * Create and initialize a new token account\n *\n * @param connection     Connection to use\n * @param payer          Payer of the transaction and initialization fees\n * @param mint           Mint for the account\n * @param owner          Owner of the new account\n * @param keypair        Optional keypair, defaulting to the associated token account for the `mint` and `owner`\n * @param confirmOptions Options for confirming the transaction\n * @param programId      SPL Token program account\n *\n * @return Address of the new token account\n */\nexport function createAccount(_x, _x2, _x3, _x4, _x5, _x6) {\n  return _createAccount.apply(this, arguments);\n}\nfunction _createAccount() {\n  _createAccount = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(connection, payer, mint, owner, keypair, confirmOptions) {\n    var programId,\n      mintState,\n      space,\n      lamports,\n      transaction,\n      _args = arguments;\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            programId = _args.length > 6 && _args[6] !== undefined ? _args[6] : TOKEN_PROGRAM_ID;\n            if (keypair) {\n              _context.next = 5;\n              break;\n            }\n            _context.next = 4;\n            return createAssociatedTokenAccount(connection, payer, mint, owner, confirmOptions, programId);\n          case 4:\n            return _context.abrupt(\"return\", _context.sent);\n          case 5:\n            _context.next = 7;\n            return getMint(connection, mint, confirmOptions === null || confirmOptions === void 0 ? void 0 : confirmOptions.commitment, programId);\n          case 7:\n            mintState = _context.sent;\n            space = getAccountLenForMint(mintState);\n            _context.next = 11;\n            return connection.getMinimumBalanceForRentExemption(space);\n          case 11:\n            lamports = _context.sent;\n            transaction = new Transaction().add(SystemProgram.createAccount({\n              fromPubkey: payer.publicKey,\n              newAccountPubkey: keypair.publicKey,\n              space: space,\n              lamports: lamports,\n              programId: programId\n            }), createInitializeAccountInstruction(keypair.publicKey, mint, owner, programId));\n            _context.next = 15;\n            return sendAndConfirmTransaction(connection, transaction, [payer, keypair], confirmOptions);\n          case 15:\n            return _context.abrupt(\"return\", keypair.publicKey);\n          case 16:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _createAccount.apply(this, arguments);\n}","map":{"version":3,"mappings":";;AACA,SAASA,yBAAyB,EAAEC,aAAa,EAAEC,WAAW,QAAQ,iBAAiB;AACvF,SAASC,gBAAgB,QAAQ,iBAAiB;AAClD,SAASC,oBAAoB,QAAQ,gCAAgC;AACrE,SAASC,kCAAkC,QAAQ,sCAAsC;AACzF,SAASC,OAAO,QAAQ,kBAAkB;AAC1C,SAASC,4BAA4B,QAAQ,mCAAmC;AAEhF;;;;;;;;;;;;;AAaA,gBAAsBC,aAAa;EAAA;AAAA;AA+BlC;EAAA,4EA/BM,iBACHC,UAAsB,EACtBC,KAAa,EACbC,IAAe,EACfC,KAAgB,EAChBC,OAAiB,EACjBC,cAA+B;IAAA;MAAA;MAAA;MAAA;MAAA;MAAA;IAAA;MAAA;QAAA;UAAA;YAC/BC,SAAS,2DAAGZ,gBAAgB;YAAA,IAGvBU,OAAO;cAAA;cAAA;YAAA;YAAA;YAAA,OAAeN,4BAA4B,CAACE,UAAU,EAAEC,KAAK,EAAEC,IAAI,EAAEC,KAAK,EAAEE,cAAc,EAAEC,SAAS,CAAC;UAAA;YAAA;UAAA;YAAA;YAAA,OAG1FT,OAAO,CAACG,UAAU,EAAEE,IAAI,EAAEG,cAAc,aAAdA,cAAc,uBAAdA,cAAc,CAAEE,UAAU,EAAED,SAAS,CAAC;UAAA;YAAlFE,SAAS;YACTC,KAAK,GAAGd,oBAAoB,CAACa,SAAS,CAAC;YAAA;YAAA,OACtBR,UAAU,CAACU,iCAAiC,CAACD,KAAK,CAAC;UAAA;YAApEE,QAAQ;YAERC,WAAW,GAAG,IAAInB,WAAW,EAAE,CAACoB,GAAG,CACrCrB,aAAa,CAACO,aAAa,CAAC;cACxBe,UAAU,EAAEb,KAAK,CAACc,SAAS;cAC3BC,gBAAgB,EAAEZ,OAAO,CAACW,SAAS;cACnCN,KAAK,EAALA,KAAK;cACLE,QAAQ,EAARA,QAAQ;cACRL,SAAS,EAATA;aACH,CAAC,EACFV,kCAAkC,CAACQ,OAAO,CAACW,SAAS,EAAEb,IAAI,EAAEC,KAAK,EAAEG,SAAS,CAAC,CAChF;YAAA;YAAA,OAEKf,yBAAyB,CAACS,UAAU,EAAEY,WAAW,EAAE,CAACX,KAAK,EAAEG,OAAO,CAAC,EAAEC,cAAc,CAAC;UAAA;YAAA,iCAEnFD,OAAO,CAACW,SAAS;UAAA;UAAA;YAAA;QAAA;MAAA;IAAA;EAAA,CAC3B;EAAA;AAAA","names":["sendAndConfirmTransaction","SystemProgram","Transaction","TOKEN_PROGRAM_ID","getAccountLenForMint","createInitializeAccountInstruction","getMint","createAssociatedTokenAccount","createAccount","connection","payer","mint","owner","keypair","confirmOptions","programId","commitment","mintState","space","getMinimumBalanceForRentExemption","lamports","transaction","add","fromPubkey","publicKey","newAccountPubkey"],"sources":["/Users/ivan/Metadata/node_modules/@solana/spl-token/src/actions/createAccount.ts"],"sourcesContent":["import type { ConfirmOptions, Connection, Keypair, PublicKey, Signer } from '@solana/web3.js';\nimport { sendAndConfirmTransaction, SystemProgram, Transaction } from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID } from '../constants.js';\nimport { getAccountLenForMint } from '../extensions/extensionType.js';\nimport { createInitializeAccountInstruction } from '../instructions/initializeAccount.js';\nimport { getMint } from '../state/mint.js';\nimport { createAssociatedTokenAccount } from './createAssociatedTokenAccount.js';\n\n/**\n * Create and initialize a new token account\n *\n * @param connection     Connection to use\n * @param payer          Payer of the transaction and initialization fees\n * @param mint           Mint for the account\n * @param owner          Owner of the new account\n * @param keypair        Optional keypair, defaulting to the associated token account for the `mint` and `owner`\n * @param confirmOptions Options for confirming the transaction\n * @param programId      SPL Token program account\n *\n * @return Address of the new token account\n */\nexport async function createAccount(\n    connection: Connection,\n    payer: Signer,\n    mint: PublicKey,\n    owner: PublicKey,\n    keypair?: Keypair,\n    confirmOptions?: ConfirmOptions,\n    programId = TOKEN_PROGRAM_ID\n): Promise<PublicKey> {\n    // If a keypair isn't provided, create the associated token account and return its address\n    if (!keypair) return await createAssociatedTokenAccount(connection, payer, mint, owner, confirmOptions, programId);\n\n    // Otherwise, create the account with the provided keypair and return its public key\n    const mintState = await getMint(connection, mint, confirmOptions?.commitment, programId);\n    const space = getAccountLenForMint(mintState);\n    const lamports = await connection.getMinimumBalanceForRentExemption(space);\n\n    const transaction = new Transaction().add(\n        SystemProgram.createAccount({\n            fromPubkey: payer.publicKey,\n            newAccountPubkey: keypair.publicKey,\n            space,\n            lamports,\n            programId,\n        }),\n        createInitializeAccountInstruction(keypair.publicKey, mint, owner, programId)\n    );\n\n    await sendAndConfirmTransaction(connection, transaction, [payer, keypair], confirmOptions);\n\n    return keypair.publicKey;\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}