{"ast":null,"code":"\"use strict\";\n\nvar _slicedToArray = require(\"/Users/ivan/Metadata/node_modules/@babel/runtime/helpers/slicedToArray.js\").default;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.decodeUiAmountToAmountInstructionUnchecked = exports.decodeUiAmountToAmountInstruction = exports.createUiAmountToAmountInstruction = void 0;\nvar buffer_layout_1 = require(\"@solana/buffer-layout\");\nvar web3_js_1 = require(\"@solana/web3.js\");\nvar constants_js_1 = require(\"../constants.js\");\nvar errors_js_1 = require(\"../errors.js\");\nvar types_js_1 = require(\"./types.js\");\n/** TODO: docs */\n/**\n * Construct a UiAmountToAmount instruction\n *\n * @param mint         Public key of the mint\n * @param amount       UiAmount of tokens to be converted to Amount\n * @param programId    SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\nfunction createUiAmountToAmountInstruction(mint, amount) {\n  var programId = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : constants_js_1.TOKEN_PROGRAM_ID;\n  var keys = [{\n    pubkey: mint,\n    isSigner: false,\n    isWritable: false\n  }];\n  var buf = Buffer.from(amount, 'utf8');\n  var uiAmountToAmountInstructionData = (0, buffer_layout_1.struct)([(0, buffer_layout_1.u8)('instruction'), (0, buffer_layout_1.blob)(buf.length, 'amount')]);\n  var data = Buffer.alloc(uiAmountToAmountInstructionData.span);\n  uiAmountToAmountInstructionData.encode({\n    instruction: types_js_1.TokenInstruction.UiAmountToAmount,\n    amount: buf\n  }, data);\n  return new web3_js_1.TransactionInstruction({\n    keys: keys,\n    programId: programId,\n    data: data\n  });\n}\nexports.createUiAmountToAmountInstruction = createUiAmountToAmountInstruction;\n/**\n * Decode a UiAmountToAmount instruction and validate it\n *\n * @param instruction Transaction instruction to decode\n * @param programId   SPL Token program account\n *\n * @return Decoded, valid instruction\n */\nfunction decodeUiAmountToAmountInstruction(instruction) {\n  var programId = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : constants_js_1.TOKEN_PROGRAM_ID;\n  if (!instruction.programId.equals(programId)) throw new errors_js_1.TokenInvalidInstructionProgramError();\n  var uiAmountToAmountInstructionData = (0, buffer_layout_1.struct)([(0, buffer_layout_1.u8)('instruction'), (0, buffer_layout_1.blob)(instruction.data.length - 1, 'amount')]);\n  if (instruction.data.length !== uiAmountToAmountInstructionData.span) throw new errors_js_1.TokenInvalidInstructionDataError();\n  var _decodeUiAmountToAmou = decodeUiAmountToAmountInstructionUnchecked(instruction),\n    mint = _decodeUiAmountToAmou.keys.mint,\n    data = _decodeUiAmountToAmou.data;\n  if (data.instruction !== types_js_1.TokenInstruction.UiAmountToAmount) throw new errors_js_1.TokenInvalidInstructionTypeError();\n  if (!mint) throw new errors_js_1.TokenInvalidInstructionKeysError();\n  return {\n    programId: programId,\n    keys: {\n      mint: mint\n    },\n    data: data\n  };\n}\nexports.decodeUiAmountToAmountInstruction = decodeUiAmountToAmountInstruction;\n/**\n * Decode a UiAmountToAmount instruction without validating it\n *\n * @param instruction Transaction instruction to decode\n *\n * @return Decoded, non-validated instruction\n */\nfunction decodeUiAmountToAmountInstructionUnchecked(_ref) {\n  var programId = _ref.programId,\n    _ref$keys = _slicedToArray(_ref.keys, 1),\n    mint = _ref$keys[0],\n    data = _ref.data;\n  var uiAmountToAmountInstructionData = (0, buffer_layout_1.struct)([(0, buffer_layout_1.u8)('instruction'), (0, buffer_layout_1.blob)(data.length - 1, 'amount')]);\n  return {\n    programId: programId,\n    keys: {\n      mint: mint\n    },\n    data: uiAmountToAmountInstructionData.decode(data)\n  };\n}\nexports.decodeUiAmountToAmountInstructionUnchecked = decodeUiAmountToAmountInstructionUnchecked;","map":{"version":3,"mappings":";;;;;;;AAAA;AAEA;AACA;AACA;AAMA;AAQA;AAEA;;;;;;;;;AASA,SAAgBA,iCAAiC,CAC7CC,IAAe,EACfC,MAAc,EACc;EAAA,IAA5BC,SAAS,uEAAGC,+BAAgB;EAE5B,IAAMC,IAAI,GAAG,CAAC;IAAEC,MAAM,EAAEL,IAAI;IAAEM,QAAQ,EAAE,KAAK;IAAEC,UAAU,EAAE;EAAK,CAAE,CAAC;EACnE,IAAMC,GAAG,GAAGC,MAAM,CAACC,IAAI,CAACT,MAAM,EAAE,MAAM,CAAC;EACvC,IAAMU,+BAA+B,GAAG,0BAAM,EAAkC,CAC5E,sBAAE,EAAC,aAAa,CAAC,EACjB,wBAAI,EAACH,GAAG,CAACI,MAAM,EAAE,QAAQ,CAAC,CAC7B,CAAC;EAEF,IAAMC,IAAI,GAAGJ,MAAM,CAACK,KAAK,CAACH,+BAA+B,CAACI,IAAI,CAAC;EAC/DJ,+BAA+B,CAACK,MAAM,CAClC;IACIC,WAAW,EAAEC,2BAAgB,CAACC,gBAAgB;IAC9ClB,MAAM,EAAEO;GACX,EACDK,IAAI,CACP;EAED,OAAO,IAAIO,gCAAsB,CAAC;IAAEhB,IAAI,EAAJA,IAAI;IAAEF,SAAS,EAATA,SAAS;IAAEW,IAAI,EAAJA;EAAI,CAAE,CAAC;AAChE;AAtBAQ;AAoCA;;;;;;;;AAQA,SAAgBC,iCAAiC,CAC7CL,WAAmC,EACP;EAAA,IAA5Bf,SAAS,uEAAGC,+BAAgB;EAE5B,IAAI,CAACc,WAAW,CAACf,SAAS,CAACqB,MAAM,CAACrB,SAAS,CAAC,EAAE,MAAM,IAAIsB,+CAAmC,EAAE;EAC7F,IAAMb,+BAA+B,GAAG,0BAAM,EAAkC,CAC5E,sBAAE,EAAC,aAAa,CAAC,EACjB,wBAAI,EAACM,WAAW,CAACJ,IAAI,CAACD,MAAM,GAAG,CAAC,EAAE,QAAQ,CAAC,CAC9C,CAAC;EACF,IAAIK,WAAW,CAACJ,IAAI,CAACD,MAAM,KAAKD,+BAA+B,CAACI,IAAI,EAAE,MAAM,IAAIS,4CAAgC,EAAE;EAElH,4BAGIC,0CAA0C,CAACR,WAAW,CAAC;IAF/CjB,IAAI,yBAAZI,IAAI,CAAIJ,IAAI;IACZa,IAAI,yBAAJA,IAAI;EAER,IAAIA,IAAI,CAACI,WAAW,KAAKC,2BAAgB,CAACC,gBAAgB,EAAE,MAAM,IAAIK,4CAAgC,EAAE;EACxG,IAAI,CAACxB,IAAI,EAAE,MAAM,IAAIwB,4CAAgC,EAAE;EAEvD,OAAO;IACHtB,SAAS,EAATA,SAAS;IACTE,IAAI,EAAE;MACFJ,IAAI,EAAJA;KACH;IACDa,IAAI,EAAJA;GACH;AACL;AAzBAQ;AAuCA;;;;;;;AAOA,SAAgBI,0CAA0C,OAIjC;EAAA,IAHrBvB,SAAS,QAATA,SAAS;IAAA,gCACTE,IAAI;IAAGJ,IAAI;IACXa,IAAI,QAAJA,IAAI;EAEJ,IAAMF,+BAA+B,GAAG,0BAAM,EAAkC,CAC5E,sBAAE,EAAC,aAAa,CAAC,EACjB,wBAAI,EAACE,IAAI,CAACD,MAAM,GAAG,CAAC,EAAE,QAAQ,CAAC,CAClC,CAAC;EACF,OAAO;IACHV,SAAS,EAATA,SAAS;IACTE,IAAI,EAAE;MACFJ,IAAI,EAAJA;KACH;IACDa,IAAI,EAAEF,+BAA+B,CAACe,MAAM,CAACb,IAAI;GACpD;AACL;AAhBAQ","names":["createUiAmountToAmountInstruction","mint","amount","programId","constants_js_1","keys","pubkey","isSigner","isWritable","buf","Buffer","from","uiAmountToAmountInstructionData","length","data","alloc","span","encode","instruction","types_js_1","UiAmountToAmount","web3_js_1","exports","decodeUiAmountToAmountInstruction","equals","errors_js_1","decodeUiAmountToAmountInstructionUnchecked","decode"],"sources":["/Users/ivan/Metadata/node_modules/@solana/spl-token/src/instructions/uiAmountToAmount.ts"],"sourcesContent":["import { blob, struct, u8 } from '@solana/buffer-layout';\nimport type { AccountMeta, PublicKey } from '@solana/web3.js';\nimport { TransactionInstruction } from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID } from '../constants.js';\nimport {\n    TokenInvalidInstructionDataError,\n    TokenInvalidInstructionKeysError,\n    TokenInvalidInstructionProgramError,\n    TokenInvalidInstructionTypeError,\n} from '../errors.js';\nimport { TokenInstruction } from './types.js';\n\n/** TODO: docs */\nexport interface UiAmountToAmountInstructionData {\n    instruction: TokenInstruction.UiAmountToAmount;\n    amount: Uint8Array;\n}\n\n/** TODO: docs */\n\n/**\n * Construct a UiAmountToAmount instruction\n *\n * @param mint         Public key of the mint\n * @param amount       UiAmount of tokens to be converted to Amount\n * @param programId    SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\nexport function createUiAmountToAmountInstruction(\n    mint: PublicKey,\n    amount: string,\n    programId = TOKEN_PROGRAM_ID\n): TransactionInstruction {\n    const keys = [{ pubkey: mint, isSigner: false, isWritable: false }];\n    const buf = Buffer.from(amount, 'utf8');\n    const uiAmountToAmountInstructionData = struct<UiAmountToAmountInstructionData>([\n        u8('instruction'),\n        blob(buf.length, 'amount'),\n    ]);\n\n    const data = Buffer.alloc(uiAmountToAmountInstructionData.span);\n    uiAmountToAmountInstructionData.encode(\n        {\n            instruction: TokenInstruction.UiAmountToAmount,\n            amount: buf,\n        },\n        data\n    );\n\n    return new TransactionInstruction({ keys, programId, data });\n}\n\n/** A decoded, valid UiAmountToAmount instruction */\nexport interface DecodedUiAmountToAmountInstruction {\n    programId: PublicKey;\n    keys: {\n        mint: AccountMeta;\n    };\n    data: {\n        instruction: TokenInstruction.UiAmountToAmount;\n        amount: Uint8Array;\n    };\n}\n\n/**\n * Decode a UiAmountToAmount instruction and validate it\n *\n * @param instruction Transaction instruction to decode\n * @param programId   SPL Token program account\n *\n * @return Decoded, valid instruction\n */\nexport function decodeUiAmountToAmountInstruction(\n    instruction: TransactionInstruction,\n    programId = TOKEN_PROGRAM_ID\n): DecodedUiAmountToAmountInstruction {\n    if (!instruction.programId.equals(programId)) throw new TokenInvalidInstructionProgramError();\n    const uiAmountToAmountInstructionData = struct<UiAmountToAmountInstructionData>([\n        u8('instruction'),\n        blob(instruction.data.length - 1, 'amount'),\n    ]);\n    if (instruction.data.length !== uiAmountToAmountInstructionData.span) throw new TokenInvalidInstructionDataError();\n\n    const {\n        keys: { mint },\n        data,\n    } = decodeUiAmountToAmountInstructionUnchecked(instruction);\n    if (data.instruction !== TokenInstruction.UiAmountToAmount) throw new TokenInvalidInstructionTypeError();\n    if (!mint) throw new TokenInvalidInstructionKeysError();\n\n    return {\n        programId,\n        keys: {\n            mint,\n        },\n        data,\n    };\n}\n\n/** A decoded, non-validated UiAmountToAmount instruction */\nexport interface DecodedUiAmountToAmountInstructionUnchecked {\n    programId: PublicKey;\n    keys: {\n        mint: AccountMeta | undefined;\n    };\n    data: {\n        instruction: number;\n        amount: Uint8Array;\n    };\n}\n\n/**\n * Decode a UiAmountToAmount instruction without validating it\n *\n * @param instruction Transaction instruction to decode\n *\n * @return Decoded, non-validated instruction\n */\nexport function decodeUiAmountToAmountInstructionUnchecked({\n    programId,\n    keys: [mint],\n    data,\n}: TransactionInstruction): DecodedUiAmountToAmountInstructionUnchecked {\n    const uiAmountToAmountInstructionData = struct<UiAmountToAmountInstructionData>([\n        u8('instruction'),\n        blob(data.length - 1, 'amount'),\n    ]);\n    return {\n        programId,\n        keys: {\n            mint,\n        },\n        data: uiAmountToAmountInstructionData.decode(data),\n    };\n}\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}