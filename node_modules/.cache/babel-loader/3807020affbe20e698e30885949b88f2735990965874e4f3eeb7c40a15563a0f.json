{"ast":null,"code":"import _toArray from \"/Users/ivan/Metadata/node_modules/@babel/runtime/helpers/esm/toArray.js\";\nimport { struct, u8 } from '@solana/buffer-layout';\nimport { TransactionInstruction } from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID } from '../constants.js';\nimport { TokenInvalidInstructionDataError, TokenInvalidInstructionKeysError, TokenInvalidInstructionProgramError, TokenInvalidInstructionTypeError } from '../errors.js';\nimport { addSigners } from './internal.js';\nimport { TokenInstruction } from './types.js';\n/** TODO: docs */\nexport var revokeInstructionData = struct([u8('instruction')]);\n/**\n * Construct a Revoke instruction\n *\n * @param account      Address of the token account\n * @param owner        Owner of the account\n * @param multiSigners Signing accounts if `owner` is a multisig\n * @param programId    SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\nexport function createRevokeInstruction(account, owner) {\n  var multiSigners = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n  var programId = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : TOKEN_PROGRAM_ID;\n  var keys = addSigners([{\n    pubkey: account,\n    isSigner: false,\n    isWritable: true\n  }], owner, multiSigners);\n  var data = Buffer.alloc(revokeInstructionData.span);\n  revokeInstructionData.encode({\n    instruction: TokenInstruction.Revoke\n  }, data);\n  return new TransactionInstruction({\n    keys: keys,\n    programId: programId,\n    data: data\n  });\n}\n/**\n * Decode a Revoke instruction and validate it\n *\n * @param instruction Transaction instruction to decode\n * @param programId   SPL Token program account\n *\n * @return Decoded, valid instruction\n */\nexport function decodeRevokeInstruction(instruction) {\n  var programId = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : TOKEN_PROGRAM_ID;\n  if (!instruction.programId.equals(programId)) throw new TokenInvalidInstructionProgramError();\n  if (instruction.data.length !== revokeInstructionData.span) throw new TokenInvalidInstructionDataError();\n  var _decodeRevokeInstruct = decodeRevokeInstructionUnchecked(instruction),\n    _decodeRevokeInstruct2 = _decodeRevokeInstruct.keys,\n    account = _decodeRevokeInstruct2.account,\n    owner = _decodeRevokeInstruct2.owner,\n    multiSigners = _decodeRevokeInstruct2.multiSigners,\n    data = _decodeRevokeInstruct.data;\n  if (data.instruction !== TokenInstruction.Revoke) throw new TokenInvalidInstructionTypeError();\n  if (!account || !owner) throw new TokenInvalidInstructionKeysError();\n  // TODO: key checks?\n  return {\n    programId: programId,\n    keys: {\n      account: account,\n      owner: owner,\n      multiSigners: multiSigners\n    },\n    data: data\n  };\n}\n/**\n * Decode a Revoke instruction without validating it\n *\n * @param instruction Transaction instruction to decode\n *\n * @return Decoded, non-validated instruction\n */\nexport function decodeRevokeInstructionUnchecked(_ref) {\n  var programId = _ref.programId,\n    _ref$keys = _toArray(_ref.keys),\n    account = _ref$keys[0],\n    owner = _ref$keys[1],\n    multiSigners = _ref$keys.slice(2),\n    data = _ref.data;\n  return {\n    programId: programId,\n    keys: {\n      account: account,\n      owner: owner,\n      multiSigners: multiSigners\n    },\n    data: revokeInstructionData.decode(data)\n  };\n}","map":{"version":3,"mappings":";AAAA,SAASA,MAAM,EAAEC,EAAE,QAAQ,uBAAuB;AAElD,SAASC,sBAAsB,QAAQ,iBAAiB;AACxD,SAASC,gBAAgB,QAAQ,iBAAiB;AAClD,SACIC,gCAAgC,EAChCC,gCAAgC,EAChCC,mCAAmC,EACnCC,gCAAgC,QAC7B,cAAc;AACrB,SAASC,UAAU,QAAQ,eAAe;AAC1C,SAASC,gBAAgB,QAAQ,YAAY;AAO7C;AACA,OAAO,IAAMC,qBAAqB,GAAGV,MAAM,CAAwB,CAACC,EAAE,CAAC,aAAa,CAAC,CAAC,CAAC;AAEvF;;;;;;;;;;AAUA,OAAM,SAAUU,uBAAuB,CACnCC,OAAkB,EAClBC,KAAgB,EAEY;EAAA,IAD5BC,mFAAyB,EAAE;EAAA,IAC3BC,SAAS,uEAAGZ,gBAAgB;EAE5B,IAAMa,IAAI,GAAGR,UAAU,CAAC,CAAC;IAAES,MAAM,EAAEL,OAAO;IAAEM,QAAQ,EAAE,KAAK;IAAEC,UAAU,EAAE;EAAI,CAAE,CAAC,EAAEN,KAAK,EAAEC,YAAY,CAAC;EAEtG,IAAMM,IAAI,GAAGC,MAAM,CAACC,KAAK,CAACZ,qBAAqB,CAACa,IAAI,CAAC;EACrDb,qBAAqB,CAACc,MAAM,CAAC;IAAEC,WAAW,EAAEhB,gBAAgB,CAACiB;EAAM,CAAE,EAAEN,IAAI,CAAC;EAE5E,OAAO,IAAIlB,sBAAsB,CAAC;IAAEc,IAAI,EAAJA,IAAI;IAAED,SAAS,EAATA,SAAS;IAAEK,IAAI,EAAJA;EAAI,CAAE,CAAC;AAChE;AAeA;;;;;;;;AAQA,OAAM,SAAUO,uBAAuB,CACnCF,WAAmC,EACP;EAAA,IAA5BV,SAAS,uEAAGZ,gBAAgB;EAE5B,IAAI,CAACsB,WAAW,CAACV,SAAS,CAACa,MAAM,CAACb,SAAS,CAAC,EAAE,MAAM,IAAIT,mCAAmC,EAAE;EAC7F,IAAImB,WAAW,CAACL,IAAI,CAACS,MAAM,KAAKnB,qBAAqB,CAACa,IAAI,EAAE,MAAM,IAAInB,gCAAgC,EAAE;EAExG,4BAGI0B,gCAAgC,CAACL,WAAW,CAAC;IAAA,+CAF7CT,IAAI;IAAIJ,OAAO,0BAAPA,OAAO;IAAEC,KAAK,0BAALA,KAAK;IAAEC,YAAY,0BAAZA,YAAY;IACpCM,IAAI,yBAAJA,IAAI;EAER,IAAIA,IAAI,CAACK,WAAW,KAAKhB,gBAAgB,CAACiB,MAAM,EAAE,MAAM,IAAInB,gCAAgC,EAAE;EAC9F,IAAI,CAACK,OAAO,IAAI,CAACC,KAAK,EAAE,MAAM,IAAIR,gCAAgC,EAAE;EAEpE;EAEA,OAAO;IACHU,SAAS,EAATA,SAAS;IACTC,IAAI,EAAE;MACFJ,OAAO,EAAPA,OAAO;MACPC,KAAK,EAALA,KAAK;MACLC,YAAY,EAAZA;KACH;IACDM,IAAI,EAAJA;GACH;AACL;AAeA;;;;;;;AAOA,OAAM,SAAUU,gCAAgC,OAIvB;EAAA,IAHrBf,SAAS,QAATA,SAAS;IAAA,0BACTC,IAAI;IAAGJ,OAAO;IAAEC,KAAK;IAAKC,YAAY;IACtCM,IAAI,QAAJA,IAAI;EAEJ,OAAO;IACHL,SAAS,EAATA,SAAS;IACTC,IAAI,EAAE;MACFJ,OAAO,EAAPA,OAAO;MACPC,KAAK,EAALA,KAAK;MACLC,YAAY,EAAZA;KACH;IACDM,IAAI,EAAEV,qBAAqB,CAACqB,MAAM,CAACX,IAAI;GAC1C;AACL","names":["struct","u8","TransactionInstruction","TOKEN_PROGRAM_ID","TokenInvalidInstructionDataError","TokenInvalidInstructionKeysError","TokenInvalidInstructionProgramError","TokenInvalidInstructionTypeError","addSigners","TokenInstruction","revokeInstructionData","createRevokeInstruction","account","owner","multiSigners","programId","keys","pubkey","isSigner","isWritable","data","Buffer","alloc","span","encode","instruction","Revoke","decodeRevokeInstruction","equals","length","decodeRevokeInstructionUnchecked","decode"],"sources":["/Users/ivan/Metadata/node_modules/@solana/spl-token/src/instructions/revoke.ts"],"sourcesContent":["import { struct, u8 } from '@solana/buffer-layout';\nimport type { AccountMeta, PublicKey, Signer } from '@solana/web3.js';\nimport { TransactionInstruction } from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID } from '../constants.js';\nimport {\n    TokenInvalidInstructionDataError,\n    TokenInvalidInstructionKeysError,\n    TokenInvalidInstructionProgramError,\n    TokenInvalidInstructionTypeError,\n} from '../errors.js';\nimport { addSigners } from './internal.js';\nimport { TokenInstruction } from './types.js';\n\n/** TODO: docs */\nexport interface RevokeInstructionData {\n    instruction: TokenInstruction.Revoke;\n}\n\n/** TODO: docs */\nexport const revokeInstructionData = struct<RevokeInstructionData>([u8('instruction')]);\n\n/**\n * Construct a Revoke instruction\n *\n * @param account      Address of the token account\n * @param owner        Owner of the account\n * @param multiSigners Signing accounts if `owner` is a multisig\n * @param programId    SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\nexport function createRevokeInstruction(\n    account: PublicKey,\n    owner: PublicKey,\n    multiSigners: Signer[] = [],\n    programId = TOKEN_PROGRAM_ID\n): TransactionInstruction {\n    const keys = addSigners([{ pubkey: account, isSigner: false, isWritable: true }], owner, multiSigners);\n\n    const data = Buffer.alloc(revokeInstructionData.span);\n    revokeInstructionData.encode({ instruction: TokenInstruction.Revoke }, data);\n\n    return new TransactionInstruction({ keys, programId, data });\n}\n\n/** A decoded, valid Revoke instruction */\nexport interface DecodedRevokeInstruction {\n    programId: PublicKey;\n    keys: {\n        account: AccountMeta;\n        owner: AccountMeta;\n        multiSigners: AccountMeta[];\n    };\n    data: {\n        instruction: TokenInstruction.Revoke;\n    };\n}\n\n/**\n * Decode a Revoke instruction and validate it\n *\n * @param instruction Transaction instruction to decode\n * @param programId   SPL Token program account\n *\n * @return Decoded, valid instruction\n */\nexport function decodeRevokeInstruction(\n    instruction: TransactionInstruction,\n    programId = TOKEN_PROGRAM_ID\n): DecodedRevokeInstruction {\n    if (!instruction.programId.equals(programId)) throw new TokenInvalidInstructionProgramError();\n    if (instruction.data.length !== revokeInstructionData.span) throw new TokenInvalidInstructionDataError();\n\n    const {\n        keys: { account, owner, multiSigners },\n        data,\n    } = decodeRevokeInstructionUnchecked(instruction);\n    if (data.instruction !== TokenInstruction.Revoke) throw new TokenInvalidInstructionTypeError();\n    if (!account || !owner) throw new TokenInvalidInstructionKeysError();\n\n    // TODO: key checks?\n\n    return {\n        programId,\n        keys: {\n            account,\n            owner,\n            multiSigners,\n        },\n        data,\n    };\n}\n\n/** A decoded, non-validated Revoke instruction */\nexport interface DecodedRevokeInstructionUnchecked {\n    programId: PublicKey;\n    keys: {\n        account: AccountMeta | undefined;\n        owner: AccountMeta | undefined;\n        multiSigners: AccountMeta[];\n    };\n    data: {\n        instruction: number;\n    };\n}\n\n/**\n * Decode a Revoke instruction without validating it\n *\n * @param instruction Transaction instruction to decode\n *\n * @return Decoded, non-validated instruction\n */\nexport function decodeRevokeInstructionUnchecked({\n    programId,\n    keys: [account, owner, ...multiSigners],\n    data,\n}: TransactionInstruction): DecodedRevokeInstructionUnchecked {\n    return {\n        programId,\n        keys: {\n            account,\n            owner,\n            multiSigners,\n        },\n        data: revokeInstructionData.decode(data),\n    };\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}