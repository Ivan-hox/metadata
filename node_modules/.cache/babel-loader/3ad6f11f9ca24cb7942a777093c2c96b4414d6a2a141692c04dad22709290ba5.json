{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"/Users/ivan/Metadata/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\").default;\nvar _toConsumableArray = require(\"/Users/ivan/Metadata/node_modules/@babel/runtime/helpers/toConsumableArray.js\").default;\nvar _slicedToArray = require(\"/Users/ivan/Metadata/node_modules/@babel/runtime/helpers/slicedToArray.js\").default;\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.harvestWithheldTokensToMint = exports.withdrawWithheldTokensFromAccounts = exports.withdrawWithheldTokensFromMint = exports.transferCheckedWithFee = void 0;\nvar web3_js_1 = require(\"@solana/web3.js\");\nvar internal_js_1 = require(\"../../actions/internal.js\");\nvar constants_js_1 = require(\"../../constants.js\");\nvar instructions_js_1 = require(\"./instructions.js\");\n/**\n * Transfer tokens from one account to another, asserting the transfer fee, token mint, and decimals\n *\n * @param connection     Connection to use\n * @param payer          Payer of the transaction fees\n * @param source         Source account\n * @param mint           Mint for the account\n * @param destination    Destination account\n * @param owner          Owner of the source account\n * @param amount         Number of tokens to transfer\n * @param decimals       Number of decimals in transfer amount\n * @param multiSigners   Signing accounts if `owner` is a multisig\n * @param confirmOptions Options for confirming the transaction\n * @param programId      SPL Token program account\n *\n * @return Signature of the confirmed transaction\n */\nfunction transferCheckedWithFee(connection, payer, source, mint, destination, owner, amount, decimals, fee) {\n  var multiSigners = arguments.length > 9 && arguments[9] !== undefined ? arguments[9] : [];\n  var confirmOptions = arguments.length > 10 ? arguments[10] : undefined;\n  var programId = arguments.length > 11 && arguments[11] !== undefined ? arguments[11] : constants_js_1.TOKEN_2022_PROGRAM_ID;\n  return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n    var _ref, _ref2, ownerPublicKey, signers, transaction;\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _ref = (0, internal_js_1.getSigners)(owner, multiSigners), _ref2 = _slicedToArray(_ref, 2), ownerPublicKey = _ref2[0], signers = _ref2[1];\n            transaction = new web3_js_1.Transaction().add((0, instructions_js_1.createTransferCheckedWithFeeInstruction)(source, mint, destination, ownerPublicKey, amount, decimals, fee, multiSigners, programId));\n            _context.next = 4;\n            return (0, web3_js_1.sendAndConfirmTransaction)(connection, transaction, [payer].concat(_toConsumableArray(signers)), confirmOptions);\n          case 4:\n            return _context.abrupt(\"return\", _context.sent);\n          case 5:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n}\nexports.transferCheckedWithFee = transferCheckedWithFee;\n/**\n * Withdraw withheld tokens from mint\n *\n * @param connection     Connection to use\n * @param payer          Payer of the transaction fees\n * @param mint           The token mint\n * @param destination    The destination account\n * @param authority      The mint's withdraw withheld tokens authority\n * @param multiSigners   Signing accounts if `owner` is a multisig\n * @param confirmOptions Options for confirming the transaction\n * @param programId      SPL Token program account\n *\n * @return Signature of the confirmed transaction\n */\nfunction withdrawWithheldTokensFromMint(connection, payer, mint, destination, authority) {\n  var multiSigners = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : [];\n  var confirmOptions = arguments.length > 6 ? arguments[6] : undefined;\n  var programId = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : constants_js_1.TOKEN_2022_PROGRAM_ID;\n  return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n    var _ref3, _ref4, authorityPublicKey, signers, transaction;\n    return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _ref3 = (0, internal_js_1.getSigners)(authority, multiSigners), _ref4 = _slicedToArray(_ref3, 2), authorityPublicKey = _ref4[0], signers = _ref4[1];\n            transaction = new web3_js_1.Transaction().add((0, instructions_js_1.createWithdrawWithheldTokensFromMintInstruction)(mint, destination, authorityPublicKey, signers, programId));\n            _context2.next = 4;\n            return (0, web3_js_1.sendAndConfirmTransaction)(connection, transaction, [payer].concat(_toConsumableArray(signers)), confirmOptions);\n          case 4:\n            return _context2.abrupt(\"return\", _context2.sent);\n          case 5:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n}\nexports.withdrawWithheldTokensFromMint = withdrawWithheldTokensFromMint;\n/**\n * Withdraw withheld tokens from accounts\n *\n * @param connection     Connection to use\n * @param payer          Payer of the transaction fees\n * @param mint           The token mint\n * @param destination    The destination account\n * @param authority      The mint's withdraw withheld tokens authority\n * @param multiSigners   Signing accounts if `owner` is a multisig\n * @param sources        Source accounts from which to withdraw withheld fees\n * @param confirmOptions Options for confirming the transaction\n * @param programId      SPL Token program account\n *\n * @return Signature of the confirmed transaction\n */\nfunction withdrawWithheldTokensFromAccounts(connection, payer, mint, destination, authority, multiSigners, sources, confirmOptions) {\n  var programId = arguments.length > 8 && arguments[8] !== undefined ? arguments[8] : constants_js_1.TOKEN_2022_PROGRAM_ID;\n  return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {\n    var _ref5, _ref6, authorityPublicKey, signers, transaction;\n    return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            _ref5 = (0, internal_js_1.getSigners)(authority, multiSigners), _ref6 = _slicedToArray(_ref5, 2), authorityPublicKey = _ref6[0], signers = _ref6[1];\n            transaction = new web3_js_1.Transaction().add((0, instructions_js_1.createWithdrawWithheldTokensFromAccountsInstruction)(mint, destination, authorityPublicKey, signers, sources, programId));\n            _context3.next = 4;\n            return (0, web3_js_1.sendAndConfirmTransaction)(connection, transaction, [payer].concat(_toConsumableArray(signers)), confirmOptions);\n          case 4:\n            return _context3.abrupt(\"return\", _context3.sent);\n          case 5:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3);\n  }));\n}\nexports.withdrawWithheldTokensFromAccounts = withdrawWithheldTokensFromAccounts;\n/**\n * Harvest withheld tokens from accounts to the mint\n *\n * @param connection     Connection to use\n * @param payer          Payer of the transaction fees\n * @param mint           The token mint\n * @param sources        Source accounts from which to withdraw withheld fees\n * @param confirmOptions Options for confirming the transaction\n * @param programId      SPL Token program account\n *\n * @return Signature of the confirmed transaction\n */\nfunction harvestWithheldTokensToMint(connection, payer, mint, sources, confirmOptions) {\n  var programId = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : constants_js_1.TOKEN_2022_PROGRAM_ID;\n  return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee4() {\n    var transaction;\n    return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            transaction = new web3_js_1.Transaction().add((0, instructions_js_1.createHarvestWithheldTokensToMintInstruction)(mint, sources, programId));\n            _context4.next = 3;\n            return (0, web3_js_1.sendAndConfirmTransaction)(connection, transaction, [payer], confirmOptions);\n          case 3:\n            return _context4.abrupt(\"return\", _context4.sent);\n          case 4:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, _callee4);\n  }));\n}\nexports.harvestWithheldTokensToMint = harvestWithheldTokensToMint;","map":{"version":3,"mappings":"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","names":["transferCheckedWithFee","connection","payer","source","mint","destination","owner","amount","decimals","fee","multiSigners","confirmOptions","programId","constants_js_1","ownerPublicKey","signers","transaction","web3_js_1","add","exports","withdrawWithheldTokensFromMint","authority","authorityPublicKey","withdrawWithheldTokensFromAccounts","sources","harvestWithheldTokensToMint"],"sources":["/Users/ivan/Metadata/node_modules/@solana/spl-token/src/extensions/transferFee/actions.ts"],"sourcesContent":["import type { ConfirmOptions, Connection, PublicKey, Signer, TransactionSignature } from '@solana/web3.js';\nimport { sendAndConfirmTransaction, Transaction } from '@solana/web3.js';\nimport { getSigners } from '../../actions/internal.js';\nimport { TOKEN_2022_PROGRAM_ID } from '../../constants.js';\nimport {\n    createHarvestWithheldTokensToMintInstruction,\n    createTransferCheckedWithFeeInstruction,\n    createWithdrawWithheldTokensFromAccountsInstruction,\n    createWithdrawWithheldTokensFromMintInstruction,\n} from './instructions.js';\n\n/**\n * Transfer tokens from one account to another, asserting the transfer fee, token mint, and decimals\n *\n * @param connection     Connection to use\n * @param payer          Payer of the transaction fees\n * @param source         Source account\n * @param mint           Mint for the account\n * @param destination    Destination account\n * @param owner          Owner of the source account\n * @param amount         Number of tokens to transfer\n * @param decimals       Number of decimals in transfer amount\n * @param multiSigners   Signing accounts if `owner` is a multisig\n * @param confirmOptions Options for confirming the transaction\n * @param programId      SPL Token program account\n *\n * @return Signature of the confirmed transaction\n */\nexport async function transferCheckedWithFee(\n    connection: Connection,\n    payer: Signer,\n    source: PublicKey,\n    mint: PublicKey,\n    destination: PublicKey,\n    owner: Signer | PublicKey,\n    amount: bigint,\n    decimals: number,\n    fee: bigint,\n    multiSigners: Signer[] = [],\n    confirmOptions?: ConfirmOptions,\n    programId = TOKEN_2022_PROGRAM_ID\n): Promise<TransactionSignature> {\n    const [ownerPublicKey, signers] = getSigners(owner, multiSigners);\n\n    const transaction = new Transaction().add(\n        createTransferCheckedWithFeeInstruction(\n            source,\n            mint,\n            destination,\n            ownerPublicKey,\n            amount,\n            decimals,\n            fee,\n            multiSigners,\n            programId\n        )\n    );\n\n    return await sendAndConfirmTransaction(connection, transaction, [payer, ...signers], confirmOptions);\n}\n\n/**\n * Withdraw withheld tokens from mint\n *\n * @param connection     Connection to use\n * @param payer          Payer of the transaction fees\n * @param mint           The token mint\n * @param destination    The destination account\n * @param authority      The mint's withdraw withheld tokens authority\n * @param multiSigners   Signing accounts if `owner` is a multisig\n * @param confirmOptions Options for confirming the transaction\n * @param programId      SPL Token program account\n *\n * @return Signature of the confirmed transaction\n */\nexport async function withdrawWithheldTokensFromMint(\n    connection: Connection,\n    payer: Signer,\n    mint: PublicKey,\n    destination: PublicKey,\n    authority: Signer | PublicKey,\n    multiSigners: Signer[] = [],\n    confirmOptions?: ConfirmOptions,\n    programId = TOKEN_2022_PROGRAM_ID\n): Promise<TransactionSignature> {\n    const [authorityPublicKey, signers] = getSigners(authority, multiSigners);\n\n    const transaction = new Transaction().add(\n        createWithdrawWithheldTokensFromMintInstruction(mint, destination, authorityPublicKey, signers, programId)\n    );\n\n    return await sendAndConfirmTransaction(connection, transaction, [payer, ...signers], confirmOptions);\n}\n\n/**\n * Withdraw withheld tokens from accounts\n *\n * @param connection     Connection to use\n * @param payer          Payer of the transaction fees\n * @param mint           The token mint\n * @param destination    The destination account\n * @param authority      The mint's withdraw withheld tokens authority\n * @param multiSigners   Signing accounts if `owner` is a multisig\n * @param sources        Source accounts from which to withdraw withheld fees\n * @param confirmOptions Options for confirming the transaction\n * @param programId      SPL Token program account\n *\n * @return Signature of the confirmed transaction\n */\nexport async function withdrawWithheldTokensFromAccounts(\n    connection: Connection,\n    payer: Signer,\n    mint: PublicKey,\n    destination: PublicKey,\n    authority: Signer | PublicKey,\n    multiSigners: Signer[],\n    sources: PublicKey[],\n    confirmOptions?: ConfirmOptions,\n    programId = TOKEN_2022_PROGRAM_ID\n): Promise<TransactionSignature> {\n    const [authorityPublicKey, signers] = getSigners(authority, multiSigners);\n\n    const transaction = new Transaction().add(\n        createWithdrawWithheldTokensFromAccountsInstruction(\n            mint,\n            destination,\n            authorityPublicKey,\n            signers,\n            sources,\n            programId\n        )\n    );\n\n    return await sendAndConfirmTransaction(connection, transaction, [payer, ...signers], confirmOptions);\n}\n\n/**\n * Harvest withheld tokens from accounts to the mint\n *\n * @param connection     Connection to use\n * @param payer          Payer of the transaction fees\n * @param mint           The token mint\n * @param sources        Source accounts from which to withdraw withheld fees\n * @param confirmOptions Options for confirming the transaction\n * @param programId      SPL Token program account\n *\n * @return Signature of the confirmed transaction\n */\nexport async function harvestWithheldTokensToMint(\n    connection: Connection,\n    payer: Signer,\n    mint: PublicKey,\n    sources: PublicKey[],\n    confirmOptions?: ConfirmOptions,\n    programId = TOKEN_2022_PROGRAM_ID\n): Promise<TransactionSignature> {\n    const transaction = new Transaction().add(createHarvestWithheldTokensToMintInstruction(mint, sources, programId));\n\n    return await sendAndConfirmTransaction(connection, transaction, [payer], confirmOptions);\n}\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}