{"ast":null,"code":"import _regeneratorRuntime from \"/Users/ivan/Metadata/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"/Users/ivan/Metadata/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { Keypair, sendAndConfirmTransaction, SystemProgram, Transaction } from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID } from '../constants.js';\nimport { createInitializeMint2Instruction } from '../instructions/initializeMint2.js';\nimport { getMinimumBalanceForRentExemptMint, MINT_SIZE } from '../state/mint.js';\n/**\n * Create and initialize a new mint\n *\n * @param connection      Connection to use\n * @param payer           Payer of the transaction and initialization fees\n * @param mintAuthority   Account or multisig that will control minting\n * @param freezeAuthority Optional account or multisig that can freeze token accounts\n * @param decimals        Location of the decimal place\n * @param keypair         Optional keypair, defaulting to a new random one\n * @param confirmOptions  Options for confirming the transaction\n * @param programId       SPL Token program account\n *\n * @return Address of the new mint\n */\nexport function createMint(_x, _x2, _x3, _x4, _x5) {\n  return _createMint.apply(this, arguments);\n}\nfunction _createMint() {\n  _createMint = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(connection, payer, mintAuthority, freezeAuthority, decimals) {\n    var keypair,\n      confirmOptions,\n      programId,\n      lamports,\n      transaction,\n      _args = arguments;\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            keypair = _args.length > 5 && _args[5] !== undefined ? _args[5] : Keypair.generate();\n            confirmOptions = _args.length > 6 ? _args[6] : undefined;\n            programId = _args.length > 7 && _args[7] !== undefined ? _args[7] : TOKEN_PROGRAM_ID;\n            _context.next = 5;\n            return getMinimumBalanceForRentExemptMint(connection);\n          case 5:\n            lamports = _context.sent;\n            transaction = new Transaction().add(SystemProgram.createAccount({\n              fromPubkey: payer.publicKey,\n              newAccountPubkey: keypair.publicKey,\n              space: MINT_SIZE,\n              lamports: lamports,\n              programId: programId\n            }), createInitializeMint2Instruction(keypair.publicKey, decimals, mintAuthority, freezeAuthority, programId));\n            _context.next = 9;\n            return sendAndConfirmTransaction(connection, transaction, [payer, keypair], confirmOptions);\n          case 9:\n            return _context.abrupt(\"return\", keypair.publicKey);\n          case 10:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _createMint.apply(this, arguments);\n}","map":{"version":3,"mappings":";;AACA,SAASA,OAAO,EAAEC,yBAAyB,EAAEC,aAAa,EAAEC,WAAW,QAAQ,iBAAiB;AAChG,SAASC,gBAAgB,QAAQ,iBAAiB;AAClD,SAASC,gCAAgC,QAAQ,oCAAoC;AACrF,SAASC,kCAAkC,EAAEC,SAAS,QAAQ,kBAAkB;AAEhF;;;;;;;;;;;;;;AAcA,gBAAsBC,UAAU;EAAA;AAAA;AA0B/B;EAAA,yEA1BM,iBACHC,UAAsB,EACtBC,KAAa,EACbC,aAAwB,EACxBC,eAAiC,EACjCC,QAAgB;IAAA;MAAA;MAAA;MAAA;MAAA;MAAA;IAAA;MAAA;QAAA;UAAA;YAChBC,OAAO,2DAAGd,OAAO,CAACe,QAAQ,EAAE;YAC5BC,cAA+B;YAC/BC,SAAS,2DAAGb,gBAAgB;YAAA;YAAA,OAELE,kCAAkC,CAACG,UAAU,CAAC;UAAA;YAA/DS,QAAQ;YAERC,WAAW,GAAG,IAAIhB,WAAW,EAAE,CAACiB,GAAG,CACrClB,aAAa,CAACmB,aAAa,CAAC;cACxBC,UAAU,EAAEZ,KAAK,CAACa,SAAS;cAC3BC,gBAAgB,EAAEV,OAAO,CAACS,SAAS;cACnCE,KAAK,EAAElB,SAAS;cAChBW,QAAQ,EAARA,QAAQ;cACRD,SAAS,EAATA;aACH,CAAC,EACFZ,gCAAgC,CAACS,OAAO,CAACS,SAAS,EAAEV,QAAQ,EAAEF,aAAa,EAAEC,eAAe,EAAEK,SAAS,CAAC,CAC3G;YAAA;YAAA,OAEKhB,yBAAyB,CAACQ,UAAU,EAAEU,WAAW,EAAE,CAACT,KAAK,EAAEI,OAAO,CAAC,EAAEE,cAAc,CAAC;UAAA;YAAA,iCAEnFF,OAAO,CAACS,SAAS;UAAA;UAAA;YAAA;QAAA;MAAA;IAAA;EAAA,CAC3B;EAAA;AAAA","names":["Keypair","sendAndConfirmTransaction","SystemProgram","Transaction","TOKEN_PROGRAM_ID","createInitializeMint2Instruction","getMinimumBalanceForRentExemptMint","MINT_SIZE","createMint","connection","payer","mintAuthority","freezeAuthority","decimals","keypair","generate","confirmOptions","programId","lamports","transaction","add","createAccount","fromPubkey","publicKey","newAccountPubkey","space"],"sources":["/Users/ivan/Metadata/node_modules/@solana/spl-token/src/actions/createMint.ts"],"sourcesContent":["import type { ConfirmOptions, Connection, PublicKey, Signer } from '@solana/web3.js';\nimport { Keypair, sendAndConfirmTransaction, SystemProgram, Transaction } from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID } from '../constants.js';\nimport { createInitializeMint2Instruction } from '../instructions/initializeMint2.js';\nimport { getMinimumBalanceForRentExemptMint, MINT_SIZE } from '../state/mint.js';\n\n/**\n * Create and initialize a new mint\n *\n * @param connection      Connection to use\n * @param payer           Payer of the transaction and initialization fees\n * @param mintAuthority   Account or multisig that will control minting\n * @param freezeAuthority Optional account or multisig that can freeze token accounts\n * @param decimals        Location of the decimal place\n * @param keypair         Optional keypair, defaulting to a new random one\n * @param confirmOptions  Options for confirming the transaction\n * @param programId       SPL Token program account\n *\n * @return Address of the new mint\n */\nexport async function createMint(\n    connection: Connection,\n    payer: Signer,\n    mintAuthority: PublicKey,\n    freezeAuthority: PublicKey | null,\n    decimals: number,\n    keypair = Keypair.generate(),\n    confirmOptions?: ConfirmOptions,\n    programId = TOKEN_PROGRAM_ID\n): Promise<PublicKey> {\n    const lamports = await getMinimumBalanceForRentExemptMint(connection);\n\n    const transaction = new Transaction().add(\n        SystemProgram.createAccount({\n            fromPubkey: payer.publicKey,\n            newAccountPubkey: keypair.publicKey,\n            space: MINT_SIZE,\n            lamports,\n            programId,\n        }),\n        createInitializeMint2Instruction(keypair.publicKey, decimals, mintAuthority, freezeAuthority, programId)\n    );\n\n    await sendAndConfirmTransaction(connection, transaction, [payer, keypair], confirmOptions);\n\n    return keypair.publicKey;\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}