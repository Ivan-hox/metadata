{"ast":null,"code":"import _createForOfIteratorHelper from \"/Users/ivan/Metadata/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\n/** @internal */\nexport function addSigners(keys, ownerOrAuthority, multiSigners) {\n  if (multiSigners.length) {\n    keys.push({\n      pubkey: ownerOrAuthority,\n      isSigner: false,\n      isWritable: false\n    });\n    var _iterator = _createForOfIteratorHelper(multiSigners),\n      _step;\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var signer = _step.value;\n        keys.push({\n          pubkey: signer.publicKey,\n          isSigner: true,\n          isWritable: false\n        });\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n  } else {\n    keys.push({\n      pubkey: ownerOrAuthority,\n      isSigner: true,\n      isWritable: false\n    });\n  }\n  return keys;\n}","map":{"version":3,"mappings":";AAEA;AACA,OAAM,SAAUA,UAAU,CAACC,IAAmB,EAAEC,gBAA2B,EAAEC,YAAsB;EAC/F,IAAIA,YAAY,CAACC,MAAM,EAAE;IACrBH,IAAI,CAACI,IAAI,CAAC;MAAEC,MAAM,EAAEJ,gBAAgB;MAAEK,QAAQ,EAAE,KAAK;MAAEC,UAAU,EAAE;IAAK,CAAE,CAAC;IAAC,2CACvDL,YAAY;MAAA;IAAA;MAAjC,oDAAmC;QAAA,IAAxBM,MAAM;QACbR,IAAI,CAACI,IAAI,CAAC;UAAEC,MAAM,EAAEG,MAAM,CAACC,SAAS;UAAEH,QAAQ,EAAE,IAAI;UAAEC,UAAU,EAAE;QAAK,CAAE,CAAC;;IAC7E;MAAA;IAAA;MAAA;IAAA;GACJ,MAAM;IACHP,IAAI,CAACI,IAAI,CAAC;MAAEC,MAAM,EAAEJ,gBAAgB;MAAEK,QAAQ,EAAE,IAAI;MAAEC,UAAU,EAAE;IAAK,CAAE,CAAC;;EAE9E,OAAOP,IAAI;AACf","names":["addSigners","keys","ownerOrAuthority","multiSigners","length","push","pubkey","isSigner","isWritable","signer","publicKey"],"sources":["/Users/ivan/Metadata/node_modules/@solana/spl-token/src/instructions/internal.ts"],"sourcesContent":["import type { AccountMeta, PublicKey, Signer } from '@solana/web3.js';\n\n/** @internal */\nexport function addSigners(keys: AccountMeta[], ownerOrAuthority: PublicKey, multiSigners: Signer[]): AccountMeta[] {\n    if (multiSigners.length) {\n        keys.push({ pubkey: ownerOrAuthority, isSigner: false, isWritable: false });\n        for (const signer of multiSigners) {\n            keys.push({ pubkey: signer.publicKey, isSigner: true, isWritable: false });\n        }\n    } else {\n        keys.push({ pubkey: ownerOrAuthority, isSigner: true, isWritable: false });\n    }\n    return keys;\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}