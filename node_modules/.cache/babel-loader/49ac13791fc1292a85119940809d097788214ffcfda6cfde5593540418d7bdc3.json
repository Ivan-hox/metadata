{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.tuplesTypeMap = exports.tuple = exports.fixedSizeTuple = void 0;\nvar types_1 = require(\"../types\");\nvar assert_1 = require(\"assert\");\nvar beet_fixable_1 = require(\"../beet.fixable\");\n// Tuples are a special kind of composite which can be understood as\n// fixed length arrays where each tuple element can have a different data type.\n// Since the Tuple type itself dictates the length, and buffer layout, no extra\n// information is included in the serialized data.\n/**\n * De/Serializes a tuple with all fixed size tuple elements .\n * Since each tuple element can be of a different type not much type safety can\n * be provided here.\n *\n * @param elements the De/Serializer for each tuple element type\n *\n * @category beet/composite\n */\nfunction fixedSizeTuple(elements) {\n  var len = elements.length;\n  var elDescs = elements.map(function (x) {\n    return x.description;\n  });\n  var byteSizes = elements.map(function (x) {\n    return x.byteSize;\n  });\n  var byteSize = byteSizes.reduce(function (acc, x) {\n    return acc + x;\n  }, 0);\n  return {\n    write: function write(buf, offset, value) {\n      assert_1.strict.equal(value.length, len, \"tuple value element size \".concat(value.length, \" should match len \").concat(len));\n      var cursor = offset;\n      for (var i = 0; i < len; i++) {\n        var v = value[i];\n        var beetEl = elements[i];\n        beetEl.write(buf, cursor, v);\n        cursor += beetEl.byteSize;\n      }\n    },\n    read: function read(buf, offset) {\n      var els = [];\n      var cursor = offset;\n      for (var i = 0; i < len; i++) {\n        var elBeet = elements[i];\n        els[i] = elBeet.read(buf, cursor);\n        cursor += elBeet.byteSize;\n      }\n      return els;\n    },\n    byteSize: byteSize,\n    length: len,\n    description: \"FixedSizeTuple<\".concat(elDescs.join(','), \">[ \").concat(byteSizes.join(', '), \" ]\")\n  };\n}\nexports.fixedSizeTuple = fixedSizeTuple;\n/**\n * De/Serializes a tuple which contains some non-fixed size tuple elements.\n *\n * Since each tuple element can be of a different type not much type safety can\n * be provided here.\n *\n * @param elements the De/Serializer for each tuple element type\n * @category beet/composite\n */\nfunction tuple(elements) {\n  var len = elements.length;\n  var elDescs = elements.map(function (x) {\n    return x.description;\n  });\n  return {\n    toFixedFromData: function toFixedFromData(buf, offset) {\n      var cursor = offset;\n      var fixedElements = new Array(len);\n      for (var i = 0; i < len; i++) {\n        var fixedElement = (0, beet_fixable_1.fixBeetFromData)(elements[i], buf, cursor);\n        fixedElements[i] = fixedElement;\n        cursor += fixedElement.byteSize;\n      }\n      return fixedSizeTuple(fixedElements);\n    },\n    toFixedFromValue: function toFixedFromValue(vals) {\n      (0, assert_1.strict)(Array.isArray(vals), \"\".concat(vals, \" should be an array of tuple values\"));\n      assert_1.strict.equal(vals.length, len, \"There should be \".concat(len, \" tuple values, but there are \").concat(vals.length));\n      var fixedElements = new Array(len);\n      for (var i = 0; i < vals.length; i++) {\n        var fixedElement = (0, beet_fixable_1.fixBeetFromValue)(elements[i], vals[i]);\n        fixedElements[i] = fixedElement;\n      }\n      return fixedSizeTuple(fixedElements);\n    },\n    description: \"Tuple<\".concat(elDescs.join(','), \">\")\n  };\n}\nexports.tuple = tuple;\n/**\n * Maps tuples beet exports to metadata which describes in which package it\n * is defined as well as which TypeScript type is used to represent the\n * deserialized value in JavaScript.\n *\n * @category TypeDefinition\n */\nexports.tuplesTypeMap = {\n  Tuple: {\n    beet: 'tuple',\n    isFixable: true,\n    sourcePack: types_1.BEET_PACKAGE,\n    ts: '[__tuple_elements__]'\n  },\n  FixedSizeTuple: {\n    beet: 'fixedSizeTuple',\n    isFixable: false,\n    sourcePack: types_1.BEET_PACKAGE,\n    ts: '[__tuple_elements__]'\n  }\n};","map":{"version":3,"mappings":"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","names":["fixedSizeTuple","elements","len","length","elDescs","map","x","description","byteSizes","byteSize","reduce","acc","write","buf","offset","value","assert_1","equal","cursor","i","v","beetEl","read","els","elBeet","join","exports","tuple","toFixedFromData","fixedElements","Array","fixedElement","toFixedFromValue","vals","isArray","Tuple","beet","isFixable","sourcePack","types_1","ts","FixedSizeTuple"],"sources":["../../../../src/beets/tuples.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script","externalDependencies":[]}