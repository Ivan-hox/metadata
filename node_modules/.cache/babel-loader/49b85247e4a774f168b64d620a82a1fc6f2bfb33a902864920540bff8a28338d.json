{"ast":null,"code":"import _regeneratorRuntime from \"/Users/ivan/Metadata/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"/Users/ivan/Metadata/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { sendAndConfirmTransaction, Transaction } from '@solana/web3.js';\nimport { NATIVE_MINT_2022, TOKEN_2022_PROGRAM_ID } from '../constants.js';\nimport { createCreateNativeMintInstruction } from '../instructions/createNativeMint.js';\n/**\n * Create native mint\n *\n * @param connection               Connection to use\n * @param payer                    Payer of the transaction and initialization fees\n * @param confirmOptions           Options for confirming the transaction\n * @param programId                SPL Token program account\n * @param nativeMint               Native mint id associated with program\n */\nexport function createNativeMint(_x, _x2, _x3) {\n  return _createNativeMint.apply(this, arguments);\n}\nfunction _createNativeMint() {\n  _createNativeMint = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(connection, payer, confirmOptions) {\n    var nativeMint,\n      programId,\n      transaction,\n      _args = arguments;\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            nativeMint = _args.length > 3 && _args[3] !== undefined ? _args[3] : NATIVE_MINT_2022;\n            programId = _args.length > 4 && _args[4] !== undefined ? _args[4] : TOKEN_2022_PROGRAM_ID;\n            transaction = new Transaction().add(createCreateNativeMintInstruction(payer.publicKey, nativeMint, programId));\n            _context.next = 5;\n            return sendAndConfirmTransaction(connection, transaction, [payer], confirmOptions);\n          case 5:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _createNativeMint.apply(this, arguments);\n}","map":{"version":3,"mappings":";;AACA,SAASA,yBAAyB,EAAEC,WAAW,QAAQ,iBAAiB;AACxE,SAASC,gBAAgB,EAAEC,qBAAqB,QAAQ,iBAAiB;AACzE,SAASC,iCAAiC,QAAQ,qCAAqC;AAEvF;;;;;;;;;AASA,gBAAsBC,gBAAgB;EAAA;AAAA;AAWrC;EAAA,+EAXM,iBACHC,UAAsB,EACtBC,KAAa,EACbC,cAA+B;IAAA;MAAA;MAAA;MAAA;IAAA;MAAA;QAAA;UAAA;YAC/BC,UAAU,2DAAGP,gBAAgB;YAC7BQ,SAAS,2DAAGP,qBAAqB;YAE3BQ,WAAW,GAAG,IAAIV,WAAW,EAAE,CAACW,GAAG,CACrCR,iCAAiC,CAACG,KAAK,CAACM,SAAS,EAAEJ,UAAU,EAAEC,SAAS,CAAC,CAC5E;YAAA;YAAA,OACKV,yBAAyB,CAACM,UAAU,EAAEK,WAAW,EAAE,CAACJ,KAAK,CAAC,EAAEC,cAAc,CAAC;UAAA;UAAA;YAAA;QAAA;MAAA;IAAA;EAAA,CACpF;EAAA;AAAA","names":["sendAndConfirmTransaction","Transaction","NATIVE_MINT_2022","TOKEN_2022_PROGRAM_ID","createCreateNativeMintInstruction","createNativeMint","connection","payer","confirmOptions","nativeMint","programId","transaction","add","publicKey"],"sources":["/Users/ivan/Metadata/node_modules/@solana/spl-token/src/actions/createNativeMint.ts"],"sourcesContent":["import type { ConfirmOptions, Connection, Signer } from '@solana/web3.js';\nimport { sendAndConfirmTransaction, Transaction } from '@solana/web3.js';\nimport { NATIVE_MINT_2022, TOKEN_2022_PROGRAM_ID } from '../constants.js';\nimport { createCreateNativeMintInstruction } from '../instructions/createNativeMint.js';\n\n/**\n * Create native mint\n *\n * @param connection               Connection to use\n * @param payer                    Payer of the transaction and initialization fees\n * @param confirmOptions           Options for confirming the transaction\n * @param programId                SPL Token program account\n * @param nativeMint               Native mint id associated with program\n */\nexport async function createNativeMint(\n    connection: Connection,\n    payer: Signer,\n    confirmOptions?: ConfirmOptions,\n    nativeMint = NATIVE_MINT_2022,\n    programId = TOKEN_2022_PROGRAM_ID\n): Promise<void> {\n    const transaction = new Transaction().add(\n        createCreateNativeMintInstruction(payer.publicKey, nativeMint, programId)\n    );\n    await sendAndConfirmTransaction(connection, transaction, [payer], confirmOptions);\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}