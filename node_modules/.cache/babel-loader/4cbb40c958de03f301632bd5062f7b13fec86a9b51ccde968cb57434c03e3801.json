{"ast":null,"code":"import _regeneratorRuntime from \"/Users/ivan/Metadata/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"/Users/ivan/Metadata/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _toConsumableArray from \"/Users/ivan/Metadata/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _defineProperty from '@babel/runtime/helpers/defineProperty';\nimport merge from 'lodash.merge';\nimport logLevel, { levels } from 'loglevel';\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n  return target;\n}\nvar log = logLevel.getLogger(\"http-helpers\");\nlog.setLevel(levels.INFO);\nvar apiKey = \"torus-default\";\nvar embedHost = \"\"; // #region API Keys\n\nvar gatewayAuthHeader = \"x-api-key\";\nvar gatewayEmbedHostHeader = \"x-embed-host\";\nvar sentry = null;\nvar tracingOrigins = [];\nvar tracingPaths = [];\nfunction enableSentryTracing(_sentry, _tracingOrigins, _tracingPaths) {\n  sentry = _sentry;\n  tracingOrigins.push.apply(tracingOrigins, _toConsumableArray(_tracingOrigins));\n  tracingPaths.push.apply(tracingPaths, _toConsumableArray(_tracingPaths));\n}\nfunction setEmbedHost(embedHost_) {\n  embedHost = embedHost_;\n}\nfunction clearEmbedHost() {\n  embedHost = \"\";\n}\nfunction getEmbedHost() {\n  return embedHost;\n}\nfunction setAPIKey(apiKey_) {\n  apiKey = apiKey_;\n}\nfunction clearAPIKey() {\n  apiKey = \"torus-default\";\n}\nfunction getAPIKey() {\n  return apiKey;\n} // #endregion\n\nfunction setLogLevel(level) {\n  log.setLevel(level);\n}\nfunction fetchAndTrace(_x, _x2) {\n  return _fetchAndTrace.apply(this, arguments);\n}\nfunction _fetchAndTrace() {\n  _fetchAndTrace = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5(url, init) {\n    var _url, transaction, span, response;\n    return _regeneratorRuntime().wrap(function _callee5$(_context5) {\n      while (1) {\n        switch (_context5.prev = _context5.next) {\n          case 0:\n            _url = null;\n            try {\n              _url = new URL(url);\n            } catch (error) {}\n            if (!(sentry && _url && (tracingOrigins.includes(_url.origin) || tracingPaths.includes(_url.pathname)))) {\n              _context5.next = 11;\n              break;\n            }\n            transaction = sentry.startTransaction({\n              name: url\n            });\n            span = transaction.startChild({\n              op: \"http\"\n            }); // This function returns a Span\n            _context5.next = 7;\n            return fetch(url, init);\n          case 7:\n            response = _context5.sent;\n            span.finish(); // Remember that only finished spans will be sent with the transaction\n\n            transaction.finish(); // Finishing the transaction will send it to Sentry\n            return _context5.abrupt(\"return\", response);\n          case 11:\n            return _context5.abrupt(\"return\", fetch(url, init));\n          case 12:\n          case \"end\":\n            return _context5.stop();\n        }\n      }\n    }, _callee5);\n  }));\n  return _fetchAndTrace.apply(this, arguments);\n}\nfunction getApiKeyHeaders() {\n  var headers = {};\n  if (apiKey) headers[gatewayAuthHeader] = apiKey;\n  if (embedHost) headers[gatewayEmbedHostHeader] = embedHost;\n  return headers;\n}\nfunction debugLogResponse(response) {\n  log.info(\"Response: \".concat(response.status, \" \").concat(response.statusText));\n  log.info(\"Url: \".concat(response.url));\n}\nvar promiseTimeout = function promiseTimeout(ms, promise) {\n  var timeout = new Promise(function (resolve, reject) {\n    var id = setTimeout(function () {\n      clearTimeout(id);\n      reject(new Error(\"Timed out in \".concat(ms, \"ms\")));\n    }, ms);\n  });\n  return Promise.race([promise, timeout]);\n};\nvar get = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(url) {\n    var options_,\n      customOptions,\n      defaultOptions,\n      options,\n      response,\n      _args = arguments;\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            options_ = _args.length > 1 && _args[1] !== undefined ? _args[1] : {};\n            customOptions = _args.length > 2 && _args[2] !== undefined ? _args[2] : {};\n            defaultOptions = {\n              mode: \"cors\",\n              headers: {}\n            };\n            if (customOptions.useAPIKey) {\n              defaultOptions.headers = _objectSpread(_objectSpread({}, defaultOptions.headers), getApiKeyHeaders());\n            }\n            options = merge(defaultOptions, options_, {\n              method: \"GET\"\n            });\n            _context.next = 7;\n            return fetchAndTrace(url, options);\n          case 7:\n            response = _context.sent;\n            if (!response.ok) {\n              _context.next = 10;\n              break;\n            }\n            return _context.abrupt(\"return\", response.json());\n          case 10:\n            debugLogResponse(response);\n            throw response;\n          case 12:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return function get(_x3) {\n    return _ref.apply(this, arguments);\n  };\n}();\nvar post = function post(url) {\n  var data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var options_ = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  var customOptions = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n  var defaultOptions = {\n    mode: \"cors\",\n    headers: {\n      \"Content-Type\": \"application/json; charset=utf-8\"\n    }\n  };\n  if (customOptions.useAPIKey) {\n    defaultOptions.headers = _objectSpread(_objectSpread({}, defaultOptions.headers), getApiKeyHeaders());\n  }\n  var options = merge(defaultOptions, options_, {\n    method: \"POST\"\n  }); // deep merge changes the structure of form data and url encoded data ,\n  // so we should not deepmerge body data\n\n  if (customOptions.isUrlEncodedData) {\n    // for multipart request browser/client will add multipart content type\n    // along with multipart boundary , so for multipart request send\n    // content-type: undefined or send with multipart boundary if already known\n    options.body = data; // If url encoded data, this must not be the content type\n\n    if (options.headers[\"Content-Type\"] === \"application/json; charset=utf-8\") delete options.headers[\"Content-Type\"];\n  } else {\n    options.body = JSON.stringify(data);\n  }\n  return promiseTimeout(customOptions.timeout || 60000, fetchAndTrace(url, options).then(function (response) {\n    if (response.ok) {\n      return response.json();\n    }\n    debugLogResponse(response);\n    throw response;\n  }));\n};\nvar patch = /*#__PURE__*/function () {\n  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(url) {\n    var data,\n      options_,\n      customOptions,\n      defaultOptions,\n      options,\n      response,\n      _args2 = arguments;\n    return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            data = _args2.length > 1 && _args2[1] !== undefined ? _args2[1] : {};\n            options_ = _args2.length > 2 && _args2[2] !== undefined ? _args2[2] : {};\n            customOptions = _args2.length > 3 && _args2[3] !== undefined ? _args2[3] : {};\n            defaultOptions = {\n              mode: \"cors\",\n              headers: {\n                \"Content-Type\": \"application/json; charset=utf-8\"\n              }\n            }; // for multipart request browser/client will add multipart content type\n            // along with multipart boundary , so for multipart request send\n            // content-type: undefined or send with multipart boundary if already known\n            if (customOptions.useAPIKey) {\n              defaultOptions.headers = _objectSpread(_objectSpread({}, defaultOptions.headers), getApiKeyHeaders());\n            }\n            options = merge(defaultOptions, options_, {\n              method: \"PATCH\"\n            }); // deep merge changes the structure of form data and url encoded data ,\n            // so we should not deepmerge body data\n            if (customOptions.isUrlEncodedData) {\n              // for multipart request browser/client will add multipart content type\n              // along with multipart boundary , so for multipart request send\n              // content-type: undefined or send with multipart boundary if already known\n              options.body = data; // If url encoded data, this must not be the content type\n\n              if (options.headers[\"Content-Type\"] === \"application/json; charset=utf-8\") delete options.headers[\"Content-Type\"];\n            } else {\n              options.body = JSON.stringify(data);\n            }\n            _context2.next = 9;\n            return fetchAndTrace(url, options);\n          case 9:\n            response = _context2.sent;\n            if (!response.ok) {\n              _context2.next = 12;\n              break;\n            }\n            return _context2.abrupt(\"return\", response.json());\n          case 12:\n            debugLogResponse(response);\n            throw response;\n          case 14:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n  return function patch(_x4) {\n    return _ref2.apply(this, arguments);\n  };\n}();\nvar put = /*#__PURE__*/function () {\n  var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(url) {\n    var data,\n      options_,\n      customOptions,\n      defaultOptions,\n      options,\n      response,\n      _args3 = arguments;\n    return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            data = _args3.length > 1 && _args3[1] !== undefined ? _args3[1] : {};\n            options_ = _args3.length > 2 && _args3[2] !== undefined ? _args3[2] : {};\n            customOptions = _args3.length > 3 && _args3[3] !== undefined ? _args3[3] : {};\n            defaultOptions = {\n              mode: \"cors\",\n              headers: {\n                \"Content-Type\": \"application/json; charset=utf-8\"\n              }\n            }; // for multipart request browser/client will add multipart content type\n            // along with multipart boundary , so for multipart request send\n            // content-type: undefined or send with multipart boundary if already known\n            if (customOptions.useAPIKey) {\n              defaultOptions.headers = _objectSpread(_objectSpread({}, defaultOptions.headers), getApiKeyHeaders());\n            }\n            options = merge(defaultOptions, options_, {\n              method: \"PUT\"\n            }); // deep merge changes the structure of form data and url encoded data ,\n            // so we should not deepmerge body data\n            if (customOptions.isUrlEncodedData) {\n              // for multipart request browser/client will add multipart content type\n              // along with multipart boundary , so for multipart request send\n              // content-type: undefined or send with multipart boundary if already known\n              options.body = data; // If url encoded data, this must not be the content type\n\n              if (options.headers[\"Content-Type\"] === \"application/json; charset=utf-8\") delete options.headers[\"Content-Type\"];\n            } else {\n              options.body = JSON.stringify(data);\n            }\n            _context3.next = 9;\n            return fetchAndTrace(url, options);\n          case 9:\n            response = _context3.sent;\n            if (!response.ok) {\n              _context3.next = 12;\n              break;\n            }\n            return _context3.abrupt(\"return\", response.json());\n          case 12:\n            debugLogResponse(response);\n            throw response;\n          case 14:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3);\n  }));\n  return function put(_x5) {\n    return _ref3.apply(this, arguments);\n  };\n}();\nvar remove = /*#__PURE__*/function () {\n  var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(url) {\n    var data,\n      options_,\n      customOptions,\n      defaultOptions,\n      options,\n      response,\n      _args4 = arguments;\n    return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            data = _args4.length > 1 && _args4[1] !== undefined ? _args4[1] : {};\n            options_ = _args4.length > 2 && _args4[2] !== undefined ? _args4[2] : {};\n            customOptions = _args4.length > 3 && _args4[3] !== undefined ? _args4[3] : {};\n            defaultOptions = {\n              mode: \"cors\",\n              headers: {\n                \"Content-Type\": \"application/json; charset=utf-8\"\n              }\n            }; // for multipart request browser/client will add multipart content type\n            // along with multipart boundary , so for multipart request send\n            // content-type: undefined or send with multipart boundary if already known\n            if (customOptions.useAPIKey) {\n              defaultOptions.headers = _objectSpread(_objectSpread({}, defaultOptions.headers), getApiKeyHeaders());\n            }\n            options = merge(defaultOptions, options_, {\n              method: \"DELETE\"\n            });\n            if (customOptions.isUrlEncodedData) {\n              // for multipart request browser/client will add multipart content type\n              // along with multipart boundary , so for multipart request send\n              // content-type: undefined or send with multipart boundary if already known\n              options.body = data; // If url encoded data, this must not be the content type\n\n              if (options.headers[\"Content-Type\"] === \"application/json; charset=utf-8\") delete options.headers[\"Content-Type\"];\n            } else {\n              options.body = JSON.stringify(data);\n            }\n            _context4.next = 9;\n            return fetchAndTrace(url, options);\n          case 9:\n            response = _context4.sent;\n            if (!response.ok) {\n              _context4.next = 12;\n              break;\n            }\n            return _context4.abrupt(\"return\", response.json());\n          case 12:\n            debugLogResponse(response);\n            throw response;\n          case 14:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, _callee4);\n  }));\n  return function remove(_x6) {\n    return _ref4.apply(this, arguments);\n  };\n}();\nvar generateJsonRPCObject = function generateJsonRPCObject(method, parameters) {\n  return {\n    jsonrpc: \"2.0\",\n    method: method,\n    id: 10,\n    params: parameters\n  };\n};\nvar promiseRace = function promiseRace(url, options) {\n  var timeout = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 60000;\n  return Promise.race([get(url, options), new Promise(function (resolve, reject) {\n    setTimeout(function () {\n      reject(new Error(\"timed out\"));\n    }, timeout);\n  })]);\n};\nexport { clearAPIKey, clearEmbedHost, enableSentryTracing, gatewayAuthHeader, gatewayEmbedHostHeader, generateJsonRPCObject, get, getAPIKey, getEmbedHost, patch, post, promiseRace, promiseTimeout, put, remove, setAPIKey, setEmbedHost, setLogLevel };","map":{"version":3,"mappings":"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","names":["log","logLevel","getLogger","setLevel","levels","INFO","apiKey","embedHost","gatewayAuthHeader","gatewayEmbedHostHeader","sentry","tracingOrigins","tracingPaths","enableSentryTracing","_sentry","_tracingOrigins","_tracingPaths","push","setEmbedHost","embedHost_","clearEmbedHost","getEmbedHost","setAPIKey","apiKey_","clearAPIKey","getAPIKey","setLogLevel","level","fetchAndTrace","url","init","_url","URL","error","includes","origin","pathname","transaction","startTransaction","name","span","startChild","op","fetch","response","finish","getApiKeyHeaders","headers","debugLogResponse","info","status","statusText","promiseTimeout","ms","promise","timeout","Promise","resolve","reject","id","setTimeout","clearTimeout","Error","race","get","options_","customOptions","defaultOptions","mode","useAPIKey","options","merge","method","ok","json","post","data","isUrlEncodedData","body","JSON","stringify","then","patch","put","remove","generateJsonRPCObject","parameters","jsonrpc","params","promiseRace"],"sources":["/Users/ivan/Metadata/node_modules/@toruslabs/http-helpers/src/index.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-throw-literal */\nimport type { SpanContext, TransactionContext } from \"@sentry/types\";\nimport merge from \"lodash.merge\";\nimport logLevel, { levels, LogLevelDesc } from \"loglevel\";\nconst log = logLevel.getLogger(\"http-helpers\");\nlog.setLevel(levels.INFO);\nexport interface CustomOptions {\n  [key: string]: unknown;\n  useAPIKey?: boolean;\n  isUrlEncodedData?: boolean;\n  timeout?: number;\n}\n\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\nexport interface Data {}\n\nlet apiKey = \"torus-default\";\nlet embedHost = \"\";\n\n// #region API Keys\nexport const gatewayAuthHeader = \"x-api-key\";\nexport const gatewayEmbedHostHeader = \"x-embed-host\";\n\ninterface Sentry {\n  startTransaction(_: TransactionContext): {\n    startChild(a: SpanContext): {\n      finish(): void;\n    };\n    finish(): void;\n  };\n}\n\nlet sentry: Sentry | null = null;\nconst tracingOrigins: string[] = [];\nconst tracingPaths: string[] = [];\n\nexport function enableSentryTracing(_sentry: Sentry, _tracingOrigins: string[], _tracingPaths: string[]) {\n  sentry = _sentry;\n  tracingOrigins.push(..._tracingOrigins);\n  tracingPaths.push(..._tracingPaths);\n}\n\nexport function setEmbedHost(embedHost_: string): void {\n  embedHost = embedHost_;\n}\n\nexport function clearEmbedHost(): void {\n  embedHost = \"\";\n}\n\nexport function getEmbedHost(): string {\n  return embedHost;\n}\n\nexport function setAPIKey(apiKey_: string): void {\n  apiKey = apiKey_;\n}\n\nexport function clearAPIKey(): void {\n  apiKey = \"torus-default\";\n}\n\nexport function getAPIKey(): string {\n  return apiKey;\n}\n\n// #endregion\n\nexport function setLogLevel(level: LogLevelDesc) {\n  log.setLevel(level);\n}\n\nasync function fetchAndTrace(url: string, init: RequestInit): Promise<Response> {\n  let _url: URL | null = null;\n  try {\n    _url = new URL(url);\n  } catch (error) {}\n  if (sentry && _url && (tracingOrigins.includes(_url.origin) || tracingPaths.includes(_url.pathname))) {\n    const transaction = sentry.startTransaction({\n      name: url,\n    });\n    const span = transaction.startChild({\n      op: \"http\",\n    }); // This function returns a Span\n\n    const response = await fetch(url, init);\n    span.finish(); // Remember that only finished spans will be sent with the transaction\n\n    transaction.finish(); // Finishing the transaction will send it to Sentry\n\n    return response;\n  }\n\n  return fetch(url, init);\n}\nfunction getApiKeyHeaders(): Record<string, string> {\n  const headers = {};\n  if (apiKey) headers[gatewayAuthHeader] = apiKey;\n  if (embedHost) headers[gatewayEmbedHostHeader] = embedHost;\n  return headers;\n}\n\nfunction debugLogResponse(response: Response) {\n  log.info(`Response: ${response.status} ${response.statusText}`);\n  log.info(`Url: ${response.url}`);\n}\n\nexport const promiseTimeout = <T>(ms: number, promise: Promise<T>): Promise<T> => {\n  const timeout = new Promise<T>((resolve, reject) => {\n    const id = setTimeout(() => {\n      clearTimeout(id);\n      reject(new Error(`Timed out in ${ms}ms`));\n    }, ms);\n  });\n  return Promise.race<T>([promise, timeout]);\n};\n\nexport const get = async <T>(url: string, options_: RequestInit = {}, customOptions: CustomOptions = {}) => {\n  const defaultOptions = {\n    mode: \"cors\" as RequestMode,\n    headers: {},\n  };\n  if (customOptions.useAPIKey) {\n    defaultOptions.headers = { ...defaultOptions.headers, ...getApiKeyHeaders() };\n  }\n  const options = merge(defaultOptions, options_, { method: \"GET\" });\n  const response = await fetchAndTrace(url, options);\n  if (response.ok) {\n    return response.json() as Promise<T>;\n  }\n  debugLogResponse(response);\n  throw response;\n};\n\nexport const post = <T>(url: string, data: Data = {}, options_: RequestInit = {}, customOptions: CustomOptions = {}) => {\n  const defaultOptions = {\n    mode: \"cors\" as RequestMode,\n    headers: {\n      \"Content-Type\": \"application/json; charset=utf-8\",\n    },\n  };\n  if (customOptions.useAPIKey) {\n    defaultOptions.headers = { ...defaultOptions.headers, ...getApiKeyHeaders() };\n  }\n  const options = merge(defaultOptions, options_, { method: \"POST\" });\n\n  // deep merge changes the structure of form data and url encoded data ,\n  // so we should not deepmerge body data\n  if (customOptions.isUrlEncodedData) {\n    // for multipart request browser/client will add multipart content type\n    // along with multipart boundary , so for multipart request send\n    // content-type: undefined or send with multipart boundary if already known\n    options.body = data as string;\n    // If url encoded data, this must not be the content type\n    if (options.headers[\"Content-Type\"] === \"application/json; charset=utf-8\") delete options.headers[\"Content-Type\"];\n  } else {\n    options.body = JSON.stringify(data);\n  }\n\n  return promiseTimeout<T>(\n    (customOptions.timeout as number) || 60000,\n    fetchAndTrace(url, options).then((response) => {\n      if (response.ok) {\n        return response.json() as Promise<T>;\n      }\n      debugLogResponse(response);\n      throw response;\n    })\n  );\n};\n\nexport const patch = async <T>(url: string, data: Data = {}, options_: RequestInit = {}, customOptions: CustomOptions = {}) => {\n  const defaultOptions = {\n    mode: \"cors\" as RequestMode,\n    headers: {\n      \"Content-Type\": \"application/json; charset=utf-8\",\n    },\n  };\n  // for multipart request browser/client will add multipart content type\n  // along with multipart boundary , so for multipart request send\n  // content-type: undefined or send with multipart boundary if already known\n  if (customOptions.useAPIKey) {\n    defaultOptions.headers = { ...defaultOptions.headers, ...getApiKeyHeaders() };\n  }\n  const options = merge(defaultOptions, options_, { method: \"PATCH\" });\n  // deep merge changes the structure of form data and url encoded data ,\n  // so we should not deepmerge body data\n  if (customOptions.isUrlEncodedData) {\n    // for multipart request browser/client will add multipart content type\n    // along with multipart boundary , so for multipart request send\n    // content-type: undefined or send with multipart boundary if already known\n    options.body = data as string;\n    // If url encoded data, this must not be the content type\n    if (options.headers[\"Content-Type\"] === \"application/json; charset=utf-8\") delete options.headers[\"Content-Type\"];\n  } else {\n    options.body = JSON.stringify(data);\n  }\n  const response = await fetchAndTrace(url, options);\n  if (response.ok) {\n    return response.json() as Promise<T>;\n  }\n  debugLogResponse(response);\n  throw response;\n};\n\nexport const put = async <T>(url: string, data: Data = {}, options_: RequestInit = {}, customOptions: CustomOptions = {}) => {\n  const defaultOptions = {\n    mode: \"cors\" as RequestMode,\n    headers: {\n      \"Content-Type\": \"application/json; charset=utf-8\",\n    },\n  };\n  // for multipart request browser/client will add multipart content type\n  // along with multipart boundary , so for multipart request send\n  // content-type: undefined or send with multipart boundary if already known\n  if (customOptions.useAPIKey) {\n    defaultOptions.headers = { ...defaultOptions.headers, ...getApiKeyHeaders() };\n  }\n  const options = merge(defaultOptions, options_, { method: \"PUT\" });\n  // deep merge changes the structure of form data and url encoded data ,\n  // so we should not deepmerge body data\n  if (customOptions.isUrlEncodedData) {\n    // for multipart request browser/client will add multipart content type\n    // along with multipart boundary , so for multipart request send\n    // content-type: undefined or send with multipart boundary if already known\n    options.body = data as string;\n    // If url encoded data, this must not be the content type\n    if (options.headers[\"Content-Type\"] === \"application/json; charset=utf-8\") delete options.headers[\"Content-Type\"];\n  } else {\n    options.body = JSON.stringify(data);\n  }\n  const response = await fetchAndTrace(url, options);\n  if (response.ok) {\n    return response.json() as Promise<T>;\n  }\n  debugLogResponse(response);\n  throw response;\n};\n\nexport const remove = async <T>(url: string, data: Data = {}, options_: RequestInit = {}, customOptions: CustomOptions = {}) => {\n  const defaultOptions = {\n    mode: \"cors\" as RequestMode,\n    headers: {\n      \"Content-Type\": \"application/json; charset=utf-8\",\n    },\n  };\n  // for multipart request browser/client will add multipart content type\n  // along with multipart boundary , so for multipart request send\n  // content-type: undefined or send with multipart boundary if already known\n  if (customOptions.useAPIKey) {\n    defaultOptions.headers = { ...defaultOptions.headers, ...getApiKeyHeaders() };\n  }\n  const options = merge(defaultOptions, options_, { method: \"DELETE\" });\n  if (customOptions.isUrlEncodedData) {\n    // for multipart request browser/client will add multipart content type\n    // along with multipart boundary , so for multipart request send\n    // content-type: undefined or send with multipart boundary if already known\n    options.body = data as string;\n    // If url encoded data, this must not be the content type\n    if (options.headers[\"Content-Type\"] === \"application/json; charset=utf-8\") delete options.headers[\"Content-Type\"];\n  } else {\n    options.body = JSON.stringify(data);\n  }\n  const response = await fetchAndTrace(url, options);\n  if (response.ok) {\n    return response.json() as Promise<T>;\n  }\n  debugLogResponse(response);\n  throw response;\n};\n\nexport const generateJsonRPCObject = (method: string, parameters: unknown) => ({\n  jsonrpc: \"2.0\",\n  method,\n  id: 10,\n  params: parameters,\n});\n\nexport const promiseRace = <T>(url: string, options: RequestInit, timeout = 60000) =>\n  Promise.race([\n    get<T>(url, options),\n    new Promise<T>((resolve, reject) => {\n      setTimeout(() => {\n        reject(new Error(\"timed out\"));\n      }, timeout);\n    }),\n  ]);\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}