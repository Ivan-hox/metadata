{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createInitializeNonTransferableMintInstruction = exports.initializeNonTransferableMintInstructionData = void 0;\nvar buffer_layout_1 = require(\"@solana/buffer-layout\");\nvar web3_js_1 = require(\"@solana/web3.js\");\nvar constants_js_1 = require(\"../constants.js\");\nvar errors_js_1 = require(\"../errors.js\");\nvar types_js_1 = require(\"./types.js\");\n/** The struct that represents the instruction data as it is read by the program */\nexports.initializeNonTransferableMintInstructionData = (0, buffer_layout_1.struct)([(0, buffer_layout_1.u8)('instruction')]);\n/**\n * Construct an InitializeNonTransferableMint instruction\n *\n * @param mint           Mint Account to make non-transferable\n * @param programId         SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\nfunction createInitializeNonTransferableMintInstruction(mint, programId) {\n  if (!(0, constants_js_1.programSupportsExtensions)(programId)) {\n    throw new errors_js_1.TokenUnsupportedInstructionError();\n  }\n  var keys = [{\n    pubkey: mint,\n    isSigner: false,\n    isWritable: true\n  }];\n  var data = Buffer.alloc(exports.initializeNonTransferableMintInstructionData.span);\n  exports.initializeNonTransferableMintInstructionData.encode({\n    instruction: types_js_1.TokenInstruction.InitializeNonTransferableMint\n  }, data);\n  return new web3_js_1.TransactionInstruction({\n    keys: keys,\n    programId: programId,\n    data: data\n  });\n}\nexports.createInitializeNonTransferableMintInstruction = createInitializeNonTransferableMintInstruction;","map":{"version":3,"mappings":";;;;;;AAAA;AAEA;AACA;AACA;AACA;AAOA;AACaA,oDAA4C,GAAG,0BAAM,EAA+C,CAC7G,sBAAE,EAAC,aAAa,CAAC,CACpB,CAAC;AAEF;;;;;;;;AAQA,SAAgBC,8CAA8C,CAC1DC,IAAe,EACfC,SAAoB;EAEpB,IAAI,CAAC,4CAAyB,EAACA,SAAS,CAAC,EAAE;IACvC,MAAM,IAAIC,4CAAgC,EAAE;;EAEhD,IAAMC,IAAI,GAAG,CAAC;IAAEC,MAAM,EAAEJ,IAAI;IAAEK,QAAQ,EAAE,KAAK;IAAEC,UAAU,EAAE;EAAI,CAAE,CAAC;EAElE,IAAMC,IAAI,GAAGC,MAAM,CAACC,KAAK,CAACX,oDAA4C,CAACY,IAAI,CAAC;EAC5EZ,oDAA4C,CAACa,MAAM,CAC/C;IACIC,WAAW,EAAEC,2BAAgB,CAACC;GACjC,EACDP,IAAI,CACP;EAED,OAAO,IAAIQ,gCAAsB,CAAC;IAAEZ,IAAI,EAAJA,IAAI;IAAEF,SAAS,EAATA,SAAS;IAAEM,IAAI,EAAJA;EAAI,CAAE,CAAC;AAChE;AAlBAT","names":["exports","createInitializeNonTransferableMintInstruction","mint","programId","errors_js_1","keys","pubkey","isSigner","isWritable","data","Buffer","alloc","span","encode","instruction","types_js_1","InitializeNonTransferableMint","web3_js_1"],"sources":["/Users/ivan/Metadata/node_modules/@solana/spl-token/src/instructions/initializeNonTransferableMint.ts"],"sourcesContent":["import { struct, u8 } from '@solana/buffer-layout';\nimport type { PublicKey } from '@solana/web3.js';\nimport { TransactionInstruction } from '@solana/web3.js';\nimport { programSupportsExtensions } from '../constants.js';\nimport { TokenUnsupportedInstructionError } from '../errors.js';\nimport { TokenInstruction } from './types.js';\n\n/** Deserialized instruction for the initiation of an immutable owner account */\nexport interface InitializeNonTransferableMintInstructionData {\n    instruction: TokenInstruction.InitializeNonTransferableMint;\n}\n\n/** The struct that represents the instruction data as it is read by the program */\nexport const initializeNonTransferableMintInstructionData = struct<InitializeNonTransferableMintInstructionData>([\n    u8('instruction'),\n]);\n\n/**\n * Construct an InitializeNonTransferableMint instruction\n *\n * @param mint           Mint Account to make non-transferable\n * @param programId         SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\nexport function createInitializeNonTransferableMintInstruction(\n    mint: PublicKey,\n    programId: PublicKey\n): TransactionInstruction {\n    if (!programSupportsExtensions(programId)) {\n        throw new TokenUnsupportedInstructionError();\n    }\n    const keys = [{ pubkey: mint, isSigner: false, isWritable: true }];\n\n    const data = Buffer.alloc(initializeNonTransferableMintInstructionData.span);\n    initializeNonTransferableMintInstructionData.encode(\n        {\n            instruction: TokenInstruction.InitializeNonTransferableMint,\n        },\n        data\n    );\n\n    return new TransactionInstruction({ keys, programId, data });\n}\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}