{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createCreateNativeMintInstruction = exports.createNativeMintInstructionData = void 0;\nvar buffer_layout_1 = require(\"@solana/buffer-layout\");\nvar web3_js_1 = require(\"@solana/web3.js\");\nvar constants_js_1 = require(\"../constants.js\");\nvar errors_js_1 = require(\"../errors.js\");\nvar types_js_1 = require(\"./types.js\");\n/** TODO: docs */\nexports.createNativeMintInstructionData = (0, buffer_layout_1.struct)([(0, buffer_layout_1.u8)('instruction')]);\n/**\n * Construct a CreateNativeMint instruction\n *\n * @param account   New token account\n * @param mint      Mint account\n * @param owner     Owner of the new account\n * @param programId SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\nfunction createCreateNativeMintInstruction(payer) {\n  var nativeMintId = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : constants_js_1.NATIVE_MINT_2022;\n  var programId = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : constants_js_1.TOKEN_2022_PROGRAM_ID;\n  if (!(0, constants_js_1.programSupportsExtensions)(programId)) {\n    throw new errors_js_1.TokenUnsupportedInstructionError();\n  }\n  var keys = [{\n    pubkey: payer,\n    isSigner: true,\n    isWritable: true\n  }, {\n    pubkey: nativeMintId,\n    isSigner: false,\n    isWritable: true\n  }, {\n    pubkey: web3_js_1.SystemProgram.programId,\n    isSigner: false,\n    isWritable: false\n  }];\n  var data = Buffer.alloc(exports.createNativeMintInstructionData.span);\n  exports.createNativeMintInstructionData.encode({\n    instruction: types_js_1.TokenInstruction.CreateNativeMint\n  }, data);\n  return new web3_js_1.TransactionInstruction({\n    keys: keys,\n    programId: programId,\n    data: data\n  });\n}\nexports.createCreateNativeMintInstruction = createCreateNativeMintInstruction;","map":{"version":3,"mappings":";;;;;;AAAA;AAEA;AACA;AACA;AACA;AAOA;AACaA,uCAA+B,GAAG,0BAAM,EAAkC,CAAC,sBAAE,EAAC,aAAa,CAAC,CAAC,CAAC;AAE3G;;;;;;;;;;AAUA,SAAgBC,iCAAiC,CAC7CC,KAAgB,EAEiB;EAAA,IADjCC,YAAY,uEAAGC,+BAAgB;EAAA,IAC/BC,SAAS,uEAAGD,oCAAqB;EAEjC,IAAI,CAAC,4CAAyB,EAACC,SAAS,CAAC,EAAE;IACvC,MAAM,IAAIC,4CAAgC,EAAE;;EAEhD,IAAMC,IAAI,GAAG,CACT;IAAEC,MAAM,EAAEN,KAAK;IAAEO,QAAQ,EAAE,IAAI;IAAEC,UAAU,EAAE;EAAI,CAAE,EACnD;IAAEF,MAAM,EAAEL,YAAY;IAAEM,QAAQ,EAAE,KAAK;IAAEC,UAAU,EAAE;EAAI,CAAE,EAC3D;IAAEF,MAAM,EAAEG,uBAAa,CAACN,SAAS;IAAEI,QAAQ,EAAE,KAAK;IAAEC,UAAU,EAAE;EAAK,CAAE,CAC1E;EAED,IAAME,IAAI,GAAGC,MAAM,CAACC,KAAK,CAACd,uCAA+B,CAACe,IAAI,CAAC;EAC/Df,uCAA+B,CAACgB,MAAM,CAAC;IAAEC,WAAW,EAAEC,2BAAgB,CAACC;EAAgB,CAAE,EAAEP,IAAI,CAAC;EAEhG,OAAO,IAAID,gCAAsB,CAAC;IAAEJ,IAAI,EAAJA,IAAI;IAAEF,SAAS,EAATA,SAAS;IAAEO,IAAI,EAAJA;EAAI,CAAE,CAAC;AAChE;AAlBAZ","names":["exports","createCreateNativeMintInstruction","payer","nativeMintId","constants_js_1","programId","errors_js_1","keys","pubkey","isSigner","isWritable","web3_js_1","data","Buffer","alloc","span","encode","instruction","types_js_1","CreateNativeMint"],"sources":["/Users/ivan/Metadata/node_modules/@solana/spl-token/src/instructions/createNativeMint.ts"],"sourcesContent":["import { struct, u8 } from '@solana/buffer-layout';\nimport type { PublicKey } from '@solana/web3.js';\nimport { SystemProgram, TransactionInstruction } from '@solana/web3.js';\nimport { NATIVE_MINT_2022, programSupportsExtensions, TOKEN_2022_PROGRAM_ID } from '../constants.js';\nimport { TokenUnsupportedInstructionError } from '../errors.js';\nimport { TokenInstruction } from './types.js';\n\n/** TODO: docs */\nexport interface CreateNativeMintInstructionData {\n    instruction: TokenInstruction.CreateNativeMint;\n}\n\n/** TODO: docs */\nexport const createNativeMintInstructionData = struct<CreateNativeMintInstructionData>([u8('instruction')]);\n\n/**\n * Construct a CreateNativeMint instruction\n *\n * @param account   New token account\n * @param mint      Mint account\n * @param owner     Owner of the new account\n * @param programId SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\nexport function createCreateNativeMintInstruction(\n    payer: PublicKey,\n    nativeMintId = NATIVE_MINT_2022,\n    programId = TOKEN_2022_PROGRAM_ID\n): TransactionInstruction {\n    if (!programSupportsExtensions(programId)) {\n        throw new TokenUnsupportedInstructionError();\n    }\n    const keys = [\n        { pubkey: payer, isSigner: true, isWritable: true },\n        { pubkey: nativeMintId, isSigner: false, isWritable: true },\n        { pubkey: SystemProgram.programId, isSigner: false, isWritable: false },\n    ];\n\n    const data = Buffer.alloc(createNativeMintInstructionData.span);\n    createNativeMintInstructionData.encode({ instruction: TokenInstruction.CreateNativeMint }, data);\n\n    return new TransactionInstruction({ keys, programId, data });\n}\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}