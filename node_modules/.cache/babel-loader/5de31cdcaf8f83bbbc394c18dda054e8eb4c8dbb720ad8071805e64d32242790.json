{"ast":null,"code":"import _regeneratorRuntime from \"/Users/ivan/Metadata/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"/Users/ivan/Metadata/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { sendAndConfirmTransaction, Transaction } from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID } from '../constants.js';\nimport { createSyncNativeInstruction } from '../instructions/syncNative.js';\n/**\n * Sync the balance of a native SPL token account to the underlying system account's lamports\n *\n * @param connection     Connection to use\n * @param payer          Payer of the transaction fees\n * @param account        Native account to sync\n * @param confirmOptions Options for confirming the transaction\n * @param programId      SPL Token program account\n *\n * @return Signature of the confirmed transaction\n */\nexport function syncNative(_x, _x2, _x3, _x4) {\n  return _syncNative.apply(this, arguments);\n}\nfunction _syncNative() {\n  _syncNative = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(connection, payer, account, confirmOptions) {\n    var programId,\n      transaction,\n      _args = arguments;\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            programId = _args.length > 4 && _args[4] !== undefined ? _args[4] : TOKEN_PROGRAM_ID;\n            transaction = new Transaction().add(createSyncNativeInstruction(account, programId));\n            _context.next = 4;\n            return sendAndConfirmTransaction(connection, transaction, [payer], confirmOptions);\n          case 4:\n            return _context.abrupt(\"return\", _context.sent);\n          case 5:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _syncNative.apply(this, arguments);\n}","map":{"version":3,"mappings":";;AACA,SAASA,yBAAyB,EAAEC,WAAW,QAAQ,iBAAiB;AACxE,SAASC,gBAAgB,QAAQ,iBAAiB;AAClD,SAASC,2BAA2B,QAAQ,+BAA+B;AAE3E;;;;;;;;;;;AAWA,gBAAsBC,UAAU;EAAA;AAAA;AAU/B;EAAA,yEAVM,iBACHC,UAAsB,EACtBC,KAAa,EACbC,OAAkB,EAClBC,cAA+B;IAAA;MAAA;MAAA;IAAA;MAAA;QAAA;UAAA;YAC/BC,SAAS,2DAAGP,gBAAgB;YAEtBQ,WAAW,GAAG,IAAIT,WAAW,EAAE,CAACU,GAAG,CAACR,2BAA2B,CAACI,OAAO,EAAEE,SAAS,CAAC,CAAC;YAAA;YAAA,OAE7ET,yBAAyB,CAACK,UAAU,EAAEK,WAAW,EAAE,CAACJ,KAAK,CAAC,EAAEE,cAAc,CAAC;UAAA;YAAA;UAAA;UAAA;YAAA;QAAA;MAAA;IAAA;EAAA,CAC3F;EAAA;AAAA","names":["sendAndConfirmTransaction","Transaction","TOKEN_PROGRAM_ID","createSyncNativeInstruction","syncNative","connection","payer","account","confirmOptions","programId","transaction","add"],"sources":["/Users/ivan/Metadata/node_modules/@solana/spl-token/src/actions/syncNative.ts"],"sourcesContent":["import type { ConfirmOptions, Connection, PublicKey, Signer, TransactionSignature } from '@solana/web3.js';\nimport { sendAndConfirmTransaction, Transaction } from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID } from '../constants.js';\nimport { createSyncNativeInstruction } from '../instructions/syncNative.js';\n\n/**\n * Sync the balance of a native SPL token account to the underlying system account's lamports\n *\n * @param connection     Connection to use\n * @param payer          Payer of the transaction fees\n * @param account        Native account to sync\n * @param confirmOptions Options for confirming the transaction\n * @param programId      SPL Token program account\n *\n * @return Signature of the confirmed transaction\n */\nexport async function syncNative(\n    connection: Connection,\n    payer: Signer,\n    account: PublicKey,\n    confirmOptions?: ConfirmOptions,\n    programId = TOKEN_PROGRAM_ID\n): Promise<TransactionSignature> {\n    const transaction = new Transaction().add(createSyncNativeInstruction(account, programId));\n\n    return await sendAndConfirmTransaction(connection, transaction, [payer], confirmOptions);\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}