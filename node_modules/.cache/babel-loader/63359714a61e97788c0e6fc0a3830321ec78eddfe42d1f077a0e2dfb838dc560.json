{"ast":null,"code":"\"use strict\";\n\nvar _toArray = require(\"/Users/ivan/Metadata/node_modules/@babel/runtime/helpers/toArray.js\").default;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.decodeMintToInstructionUnchecked = exports.decodeMintToInstruction = exports.createMintToInstruction = exports.mintToInstructionData = void 0;\nvar buffer_layout_1 = require(\"@solana/buffer-layout\");\nvar buffer_layout_utils_1 = require(\"@solana/buffer-layout-utils\");\nvar web3_js_1 = require(\"@solana/web3.js\");\nvar constants_js_1 = require(\"../constants.js\");\nvar errors_js_1 = require(\"../errors.js\");\nvar internal_js_1 = require(\"./internal.js\");\nvar types_js_1 = require(\"./types.js\");\n/** TODO: docs */\nexports.mintToInstructionData = (0, buffer_layout_1.struct)([(0, buffer_layout_1.u8)('instruction'), (0, buffer_layout_utils_1.u64)('amount')]);\n/**\n * Construct a MintTo instruction\n *\n * @param mint         Public key of the mint\n * @param destination  Address of the token account to mint to\n * @param authority    The mint authority\n * @param amount       Amount to mint\n * @param multiSigners Signing accounts if `authority` is a multisig\n * @param programId    SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\nfunction createMintToInstruction(mint, destination, authority, amount) {\n  var multiSigners = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : [];\n  var programId = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : constants_js_1.TOKEN_PROGRAM_ID;\n  var keys = (0, internal_js_1.addSigners)([{\n    pubkey: mint,\n    isSigner: false,\n    isWritable: true\n  }, {\n    pubkey: destination,\n    isSigner: false,\n    isWritable: true\n  }], authority, multiSigners);\n  var data = Buffer.alloc(exports.mintToInstructionData.span);\n  exports.mintToInstructionData.encode({\n    instruction: types_js_1.TokenInstruction.MintTo,\n    amount: BigInt(amount)\n  }, data);\n  return new web3_js_1.TransactionInstruction({\n    keys: keys,\n    programId: programId,\n    data: data\n  });\n}\nexports.createMintToInstruction = createMintToInstruction;\n/**\n * Decode a MintTo instruction and validate it\n *\n * @param instruction Transaction instruction to decode\n * @param programId   SPL Token program account\n *\n * @return Decoded, valid instruction\n */\nfunction decodeMintToInstruction(instruction) {\n  var programId = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : constants_js_1.TOKEN_PROGRAM_ID;\n  if (!instruction.programId.equals(programId)) throw new errors_js_1.TokenInvalidInstructionProgramError();\n  if (instruction.data.length !== exports.mintToInstructionData.span) throw new errors_js_1.TokenInvalidInstructionDataError();\n  var _decodeMintToInstruct = decodeMintToInstructionUnchecked(instruction),\n    _decodeMintToInstruct2 = _decodeMintToInstruct.keys,\n    mint = _decodeMintToInstruct2.mint,\n    destination = _decodeMintToInstruct2.destination,\n    authority = _decodeMintToInstruct2.authority,\n    multiSigners = _decodeMintToInstruct2.multiSigners,\n    data = _decodeMintToInstruct.data;\n  if (data.instruction !== types_js_1.TokenInstruction.MintTo) throw new errors_js_1.TokenInvalidInstructionTypeError();\n  if (!mint || !destination || !authority) throw new errors_js_1.TokenInvalidInstructionKeysError();\n  // TODO: key checks?\n  return {\n    programId: programId,\n    keys: {\n      mint: mint,\n      destination: destination,\n      authority: authority,\n      multiSigners: multiSigners\n    },\n    data: data\n  };\n}\nexports.decodeMintToInstruction = decodeMintToInstruction;\n/**\n * Decode a MintTo instruction without validating it\n *\n * @param instruction Transaction instruction to decode\n *\n * @return Decoded, non-validated instruction\n */\nfunction decodeMintToInstructionUnchecked(_ref) {\n  var programId = _ref.programId,\n    _ref$keys = _toArray(_ref.keys),\n    mint = _ref$keys[0],\n    destination = _ref$keys[1],\n    authority = _ref$keys[2],\n    multiSigners = _ref$keys.slice(3),\n    data = _ref.data;\n  return {\n    programId: programId,\n    keys: {\n      mint: mint,\n      destination: destination,\n      authority: authority,\n      multiSigners: multiSigners\n    },\n    data: exports.mintToInstructionData.decode(data)\n  };\n}\nexports.decodeMintToInstructionUnchecked = decodeMintToInstructionUnchecked;","map":{"version":3,"mappings":";;;;;;;AAAA;AACA;AAEA;AACA;AACA;AAMA;AACA;AAQA;AACaA,6BAAqB,GAAG,0BAAM,EAAwB,CAAC,sBAAE,EAAC,aAAa,CAAC,EAAE,6BAAG,EAAC,QAAQ,CAAC,CAAC,CAAC;AAEtG;;;;;;;;;;;;AAYA,SAAgBC,uBAAuB,CACnCC,IAAe,EACfC,WAAsB,EACtBC,SAAoB,EACpBC,MAAuB,EAEK;EAAA,IAD5BC,mFAAyB,EAAE;EAAA,IAC3BC,SAAS,uEAAGC,+BAAgB;EAE5B,IAAMC,IAAI,GAAG,4BAAU,EACnB,CACI;IAAEC,MAAM,EAAER,IAAI;IAAES,QAAQ,EAAE,KAAK;IAAEC,UAAU,EAAE;EAAI,CAAE,EACnD;IAAEF,MAAM,EAAEP,WAAW;IAAEQ,QAAQ,EAAE,KAAK;IAAEC,UAAU,EAAE;EAAI,CAAE,CAC7D,EACDR,SAAS,EACTE,YAAY,CACf;EAED,IAAMO,IAAI,GAAGC,MAAM,CAACC,KAAK,CAACf,6BAAqB,CAACgB,IAAI,CAAC;EACrDhB,6BAAqB,CAACiB,MAAM,CACxB;IACIC,WAAW,EAAEC,2BAAgB,CAACC,MAAM;IACpCf,MAAM,EAAEgB,MAAM,CAAChB,MAAM;GACxB,EACDQ,IAAI,CACP;EAED,OAAO,IAAIS,gCAAsB,CAAC;IAAEb,IAAI,EAAJA,IAAI;IAAEF,SAAS,EAATA,SAAS;IAAEM,IAAI,EAAJA;EAAI,CAAE,CAAC;AAChE;AA3BAb;AA4CA;;;;;;;;AAQA,SAAgBuB,uBAAuB,CACnCL,WAAmC,EACP;EAAA,IAA5BX,SAAS,uEAAGC,+BAAgB;EAE5B,IAAI,CAACU,WAAW,CAACX,SAAS,CAACiB,MAAM,CAACjB,SAAS,CAAC,EAAE,MAAM,IAAIkB,+CAAmC,EAAE;EAC7F,IAAIP,WAAW,CAACL,IAAI,CAACa,MAAM,KAAK1B,6BAAqB,CAACgB,IAAI,EAAE,MAAM,IAAIS,4CAAgC,EAAE;EAExG,4BAGIE,gCAAgC,CAACT,WAAW,CAAC;IAAA,+CAF7CT,IAAI;IAAIP,IAAI,0BAAJA,IAAI;IAAEC,WAAW,0BAAXA,WAAW;IAAEC,SAAS,0BAATA,SAAS;IAAEE,YAAY,0BAAZA,YAAY;IAClDO,IAAI,yBAAJA,IAAI;EAER,IAAIA,IAAI,CAACK,WAAW,KAAKC,2BAAgB,CAACC,MAAM,EAAE,MAAM,IAAIK,4CAAgC,EAAE;EAC9F,IAAI,CAACvB,IAAI,IAAI,CAACC,WAAW,IAAI,CAACC,SAAS,EAAE,MAAM,IAAIqB,4CAAgC,EAAE;EAErF;EAEA,OAAO;IACHlB,SAAS,EAATA,SAAS;IACTE,IAAI,EAAE;MACFP,IAAI,EAAJA,IAAI;MACJC,WAAW,EAAXA,WAAW;MACXC,SAAS,EAATA,SAAS;MACTE,YAAY,EAAZA;KACH;IACDO,IAAI,EAAJA;GACH;AACL;AA1BAb;AA2CA;;;;;;;AAOA,SAAgB2B,gCAAgC,OAIvB;EAAA,IAHrBpB,SAAS,QAATA,SAAS;IAAA,0BACTE,IAAI;IAAGP,IAAI;IAAEC,WAAW;IAAEC,SAAS;IAAKE,YAAY;IACpDO,IAAI,QAAJA,IAAI;EAEJ,OAAO;IACHN,SAAS,EAATA,SAAS;IACTE,IAAI,EAAE;MACFP,IAAI,EAAJA,IAAI;MACJC,WAAW,EAAXA,WAAW;MACXC,SAAS,EAATA,SAAS;MACTE,YAAY,EAAZA;KACH;IACDO,IAAI,EAAEb,6BAAqB,CAAC4B,MAAM,CAACf,IAAI;GAC1C;AACL;AAfAb","names":["exports","createMintToInstruction","mint","destination","authority","amount","multiSigners","programId","constants_js_1","keys","pubkey","isSigner","isWritable","data","Buffer","alloc","span","encode","instruction","types_js_1","MintTo","BigInt","web3_js_1","decodeMintToInstruction","equals","errors_js_1","length","decodeMintToInstructionUnchecked","decode"],"sources":["/Users/ivan/Metadata/node_modules/@solana/spl-token/src/instructions/mintTo.ts"],"sourcesContent":["import { struct, u8 } from '@solana/buffer-layout';\nimport { u64 } from '@solana/buffer-layout-utils';\nimport type { AccountMeta, PublicKey, Signer } from '@solana/web3.js';\nimport { TransactionInstruction } from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID } from '../constants.js';\nimport {\n    TokenInvalidInstructionDataError,\n    TokenInvalidInstructionKeysError,\n    TokenInvalidInstructionProgramError,\n    TokenInvalidInstructionTypeError,\n} from '../errors.js';\nimport { addSigners } from './internal.js';\nimport { TokenInstruction } from './types.js';\n\n/** TODO: docs */\nexport interface MintToInstructionData {\n    instruction: TokenInstruction.MintTo;\n    amount: bigint;\n}\n\n/** TODO: docs */\nexport const mintToInstructionData = struct<MintToInstructionData>([u8('instruction'), u64('amount')]);\n\n/**\n * Construct a MintTo instruction\n *\n * @param mint         Public key of the mint\n * @param destination  Address of the token account to mint to\n * @param authority    The mint authority\n * @param amount       Amount to mint\n * @param multiSigners Signing accounts if `authority` is a multisig\n * @param programId    SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\nexport function createMintToInstruction(\n    mint: PublicKey,\n    destination: PublicKey,\n    authority: PublicKey,\n    amount: number | bigint,\n    multiSigners: Signer[] = [],\n    programId = TOKEN_PROGRAM_ID\n): TransactionInstruction {\n    const keys = addSigners(\n        [\n            { pubkey: mint, isSigner: false, isWritable: true },\n            { pubkey: destination, isSigner: false, isWritable: true },\n        ],\n        authority,\n        multiSigners\n    );\n\n    const data = Buffer.alloc(mintToInstructionData.span);\n    mintToInstructionData.encode(\n        {\n            instruction: TokenInstruction.MintTo,\n            amount: BigInt(amount),\n        },\n        data\n    );\n\n    return new TransactionInstruction({ keys, programId, data });\n}\n\n/** A decoded, valid MintTo instruction */\nexport interface DecodedMintToInstruction {\n    programId: PublicKey;\n    keys: {\n        mint: AccountMeta;\n        destination: AccountMeta;\n        authority: AccountMeta;\n        multiSigners: AccountMeta[];\n    };\n    data: {\n        instruction: TokenInstruction.MintTo;\n        amount: bigint;\n    };\n}\n\n/**\n * Decode a MintTo instruction and validate it\n *\n * @param instruction Transaction instruction to decode\n * @param programId   SPL Token program account\n *\n * @return Decoded, valid instruction\n */\nexport function decodeMintToInstruction(\n    instruction: TransactionInstruction,\n    programId = TOKEN_PROGRAM_ID\n): DecodedMintToInstruction {\n    if (!instruction.programId.equals(programId)) throw new TokenInvalidInstructionProgramError();\n    if (instruction.data.length !== mintToInstructionData.span) throw new TokenInvalidInstructionDataError();\n\n    const {\n        keys: { mint, destination, authority, multiSigners },\n        data,\n    } = decodeMintToInstructionUnchecked(instruction);\n    if (data.instruction !== TokenInstruction.MintTo) throw new TokenInvalidInstructionTypeError();\n    if (!mint || !destination || !authority) throw new TokenInvalidInstructionKeysError();\n\n    // TODO: key checks?\n\n    return {\n        programId,\n        keys: {\n            mint,\n            destination,\n            authority,\n            multiSigners,\n        },\n        data,\n    };\n}\n\n/** A decoded, non-validated MintTo instruction */\nexport interface DecodedMintToInstructionUnchecked {\n    programId: PublicKey;\n    keys: {\n        mint: AccountMeta | undefined;\n        destination: AccountMeta | undefined;\n        authority: AccountMeta | undefined;\n        multiSigners: AccountMeta[];\n    };\n    data: {\n        instruction: number;\n        amount: bigint;\n    };\n}\n\n/**\n * Decode a MintTo instruction without validating it\n *\n * @param instruction Transaction instruction to decode\n *\n * @return Decoded, non-validated instruction\n */\nexport function decodeMintToInstructionUnchecked({\n    programId,\n    keys: [mint, destination, authority, ...multiSigners],\n    data,\n}: TransactionInstruction): DecodedMintToInstructionUnchecked {\n    return {\n        programId,\n        keys: {\n            mint,\n            destination,\n            authority,\n            multiSigners,\n        },\n        data: mintToInstructionData.decode(data),\n    };\n}\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}