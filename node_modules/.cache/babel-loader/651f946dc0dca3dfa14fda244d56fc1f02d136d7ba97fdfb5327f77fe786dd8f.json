{"ast":null,"code":"import _regeneratorRuntime from \"/Users/ivan/Metadata/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"/Users/ivan/Metadata/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { u64 } from '@solana/buffer-layout-utils';\nimport { Transaction } from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID } from '../constants.js';\nimport { createUiAmountToAmountInstruction } from '../instructions/uiAmountToAmount.js';\n/**\n * Amount as a string using mint-prescribed decimals\n *\n * @param connection     Connection to use\n * @param payer          Payer of the transaction fees\n * @param mint           Mint for the account\n * @param amount         Ui Amount of tokens to be converted to Amount\n * @param programId      SPL Token program account\n *\n * @return Ui Amount generated\n */\nexport function uiAmountToAmount(_x, _x2, _x3, _x4) {\n  return _uiAmountToAmount.apply(this, arguments);\n}\nfunction _uiAmountToAmount() {\n  _uiAmountToAmount = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(connection, payer, mint, amount) {\n    var programId,\n      transaction,\n      _yield$connection$sim,\n      returnData,\n      err,\n      data,\n      _args = arguments;\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            programId = _args.length > 4 && _args[4] !== undefined ? _args[4] : TOKEN_PROGRAM_ID;\n            transaction = new Transaction().add(createUiAmountToAmountInstruction(mint, amount, programId));\n            _context.next = 4;\n            return connection.simulateTransaction(transaction, [payer], false);\n          case 4:\n            _yield$connection$sim = _context.sent.value;\n            returnData = _yield$connection$sim.returnData;\n            err = _yield$connection$sim.err;\n            if (!returnData) {\n              _context.next = 10;\n              break;\n            }\n            data = Buffer.from(returnData.data[0], returnData.data[1]);\n            return _context.abrupt(\"return\", u64().decode(data));\n          case 10:\n            return _context.abrupt(\"return\", err);\n          case 11:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _uiAmountToAmount.apply(this, arguments);\n}","map":{"version":3,"mappings":";;AAAA,SAASA,GAAG,QAAQ,6BAA6B;AAEjD,SAASC,WAAW,QAAQ,iBAAiB;AAC7C,SAASC,gBAAgB,QAAQ,iBAAiB;AAClD,SAASC,iCAAiC,QAAQ,qCAAqC;AAEvF;;;;;;;;;;;AAWA,gBAAsBC,gBAAgB;EAAA;AAAA;AAcrC;EAAA,+EAdM,iBACHC,UAAsB,EACtBC,KAAa,EACbC,IAAe,EACfC,MAAc;IAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;IAAA;MAAA;QAAA;UAAA;YACdC,SAAS,2DAAGP,gBAAgB;YAEtBQ,WAAW,GAAG,IAAIT,WAAW,EAAE,CAACU,GAAG,CAACR,iCAAiC,CAACI,IAAI,EAAEC,MAAM,EAAEC,SAAS,CAAC,CAAC;YAAA;YAAA,OAClEJ,UAAU,CAACO,mBAAmB,CAACF,WAAW,EAAE,CAACJ,KAAK,CAAC,EAAE,KAAK,CAAC;UAAA;YAAA,sCAAEO,KAAK;YAA7FC,UAAU,yBAAVA,UAAU;YAAEC,GAAG,yBAAHA,GAAG;YAAA,KACnBD,UAAU;cAAA;cAAA;YAAA;YACJE,IAAI,GAAGC,MAAM,CAACC,IAAI,CAACJ,UAAU,CAACE,IAAI,CAAC,CAAC,CAAC,EAAEF,UAAU,CAACE,IAAI,CAAC,CAAC,CAAC,CAAC;YAAA,iCACzDhB,GAAG,EAAE,CAACmB,MAAM,CAACH,IAAI,CAAC;UAAA;YAAA,iCAEtBD,GAAG;UAAA;UAAA;YAAA;QAAA;MAAA;IAAA;EAAA,CACb;EAAA;AAAA","names":["u64","Transaction","TOKEN_PROGRAM_ID","createUiAmountToAmountInstruction","uiAmountToAmount","connection","payer","mint","amount","programId","transaction","add","simulateTransaction","value","returnData","err","data","Buffer","from","decode"],"sources":["/Users/ivan/Metadata/node_modules/@solana/spl-token/src/actions/uiAmountToAmount.ts"],"sourcesContent":["import { u64 } from '@solana/buffer-layout-utils';\nimport type { Connection, PublicKey, Signer, TransactionError } from '@solana/web3.js';\nimport { Transaction } from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID } from '../constants.js';\nimport { createUiAmountToAmountInstruction } from '../instructions/uiAmountToAmount.js';\n\n/**\n * Amount as a string using mint-prescribed decimals\n *\n * @param connection     Connection to use\n * @param payer          Payer of the transaction fees\n * @param mint           Mint for the account\n * @param amount         Ui Amount of tokens to be converted to Amount\n * @param programId      SPL Token program account\n *\n * @return Ui Amount generated\n */\nexport async function uiAmountToAmount(\n    connection: Connection,\n    payer: Signer,\n    mint: PublicKey,\n    amount: string,\n    programId = TOKEN_PROGRAM_ID\n): Promise<bigint | TransactionError | null> {\n    const transaction = new Transaction().add(createUiAmountToAmountInstruction(mint, amount, programId));\n    const { returnData, err } = (await connection.simulateTransaction(transaction, [payer], false)).value;\n    if (returnData) {\n        const data = Buffer.from(returnData.data[0], returnData.data[1]);\n        return u64().decode(data);\n    }\n    return err;\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}