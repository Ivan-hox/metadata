{"ast":null,"code":"\"use strict\";\n\nvar _slicedToArray = require(\"/Users/ivan/Metadata/node_modules/@babel/runtime/helpers/slicedToArray.js\").default;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.decodeInitializeImmutableOwnerInstructionUnchecked = exports.decodeInitializeImmutableOwnerInstruction = exports.createInitializeImmutableOwnerInstruction = exports.initializeImmutableOwnerInstructionData = void 0;\nvar buffer_layout_1 = require(\"@solana/buffer-layout\");\nvar web3_js_1 = require(\"@solana/web3.js\");\nvar errors_js_1 = require(\"../errors.js\");\nvar types_js_1 = require(\"./types.js\");\n/** The struct that represents the instruction data as it is read by the program */\nexports.initializeImmutableOwnerInstructionData = (0, buffer_layout_1.struct)([(0, buffer_layout_1.u8)('instruction')]);\n/**\n * Construct an InitializeImmutableOwner instruction\n *\n * @param account           Immutable Owner Account\n * @param programId         SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\nfunction createInitializeImmutableOwnerInstruction(account, programId) {\n  var keys = [{\n    pubkey: account,\n    isSigner: false,\n    isWritable: true\n  }];\n  var data = Buffer.alloc(exports.initializeImmutableOwnerInstructionData.span);\n  exports.initializeImmutableOwnerInstructionData.encode({\n    instruction: types_js_1.TokenInstruction.InitializeImmutableOwner\n  }, data);\n  return new web3_js_1.TransactionInstruction({\n    keys: keys,\n    programId: programId,\n    data: data\n  });\n}\nexports.createInitializeImmutableOwnerInstruction = createInitializeImmutableOwnerInstruction;\n/**\n * Decode an InitializeImmutableOwner instruction and validate it\n *\n * @param instruction InitializeImmutableOwner instruction to decode\n * @param programId   SPL Token program account\n *\n * @return Decoded, valid instruction\n */\nfunction decodeInitializeImmutableOwnerInstruction(instruction, programId) {\n  if (!instruction.programId.equals(programId)) throw new errors_js_1.TokenInvalidInstructionProgramError();\n  if (instruction.data.length !== exports.initializeImmutableOwnerInstructionData.span) throw new errors_js_1.TokenInvalidInstructionDataError();\n  var _decodeInitializeImmu = decodeInitializeImmutableOwnerInstructionUnchecked(instruction),\n    account = _decodeInitializeImmu.keys.account,\n    data = _decodeInitializeImmu.data;\n  if (data.instruction !== types_js_1.TokenInstruction.InitializeImmutableOwner) throw new errors_js_1.TokenInvalidInstructionTypeError();\n  if (!account) throw new errors_js_1.TokenInvalidInstructionKeysError();\n  return {\n    programId: programId,\n    keys: {\n      account: account\n    },\n    data: data\n  };\n}\nexports.decodeInitializeImmutableOwnerInstruction = decodeInitializeImmutableOwnerInstruction;\n/**\n * Decode an InitializeImmutableOwner instruction without validating it\n *\n * @param instruction Transaction instruction to decode\n *\n * @return Decoded, non-validated instruction\n */\nfunction decodeInitializeImmutableOwnerInstructionUnchecked(_ref) {\n  var programId = _ref.programId,\n    _ref$keys = _slicedToArray(_ref.keys, 1),\n    account = _ref$keys[0],\n    data = _ref.data;\n  var _exports$initializeIm = exports.initializeImmutableOwnerInstructionData.decode(data),\n    instruction = _exports$initializeIm.instruction;\n  return {\n    programId: programId,\n    keys: {\n      account: account\n    },\n    data: {\n      instruction: instruction\n    }\n  };\n}\nexports.decodeInitializeImmutableOwnerInstructionUnchecked = decodeInitializeImmutableOwnerInstructionUnchecked;","map":{"version":3,"mappings":";;;;;;;AAAA;AAEA;AACA;AAMA;AAOA;AACaA,+CAAuC,GAAG,0BAAM,EAA0C,CACnG,sBAAE,EAAC,aAAa,CAAC,CACpB,CAAC;AAEF;;;;;;;;AAQA,SAAgBC,yCAAyC,CACrDC,OAAkB,EAClBC,SAAoB;EAEpB,IAAMC,IAAI,GAAG,CAAC;IAAEC,MAAM,EAAEH,OAAO;IAAEI,QAAQ,EAAE,KAAK;IAAEC,UAAU,EAAE;EAAI,CAAE,CAAC;EAErE,IAAMC,IAAI,GAAGC,MAAM,CAACC,KAAK,CAACV,+CAAuC,CAACW,IAAI,CAAC;EACvEX,+CAAuC,CAACY,MAAM,CAC1C;IACIC,WAAW,EAAEC,2BAAgB,CAACC;GACjC,EACDP,IAAI,CACP;EAED,OAAO,IAAIQ,gCAAsB,CAAC;IAAEZ,IAAI,EAAJA,IAAI;IAAED,SAAS,EAATA,SAAS;IAAEK,IAAI,EAAJA;EAAI,CAAE,CAAC;AAChE;AAfAR;AA4BA;;;;;;;;AAQA,SAAgBiB,yCAAyC,CACrDJ,WAAmC,EACnCV,SAAoB;EAEpB,IAAI,CAACU,WAAW,CAACV,SAAS,CAACe,MAAM,CAACf,SAAS,CAAC,EAAE,MAAM,IAAIgB,+CAAmC,EAAE;EAC7F,IAAIN,WAAW,CAACL,IAAI,CAACY,MAAM,KAAKpB,+CAAuC,CAACW,IAAI,EACxE,MAAM,IAAIQ,4CAAgC,EAAE;EAEhD,4BAGIE,kDAAkD,CAACR,WAAW,CAAC;IAFvDX,OAAO,yBAAfE,IAAI,CAAIF,OAAO;IACfM,IAAI,yBAAJA,IAAI;EAER,IAAIA,IAAI,CAACK,WAAW,KAAKC,2BAAgB,CAACC,wBAAwB,EAAE,MAAM,IAAII,4CAAgC,EAAE;EAChH,IAAI,CAACjB,OAAO,EAAE,MAAM,IAAIiB,4CAAgC,EAAE;EAE1D,OAAO;IACHhB,SAAS,EAATA,SAAS;IACTC,IAAI,EAAE;MACFF,OAAO,EAAPA;KACH;IACDM,IAAI,EAAJA;GACH;AACL;AAtBAR;AAmCA;;;;;;;AAOA,SAAgBqB,kDAAkD,OAIzC;EAAA,IAHrBlB,SAAS,QAATA,SAAS;IAAA,gCACTC,IAAI;IAAGF,OAAO;IACdM,IAAI,QAAJA,IAAI;EAEJ,4BAAwBR,+CAAuC,CAACsB,MAAM,CAACd,IAAI,CAAC;IAApEK,WAAW,yBAAXA,WAAW;EAEnB,OAAO;IACHV,SAAS,EAATA,SAAS;IACTC,IAAI,EAAE;MACFF,OAAO,EAAEA;KACZ;IACDM,IAAI,EAAE;MACFK,WAAW,EAAXA;;GAEP;AACL;AAhBAb","names":["exports","createInitializeImmutableOwnerInstruction","account","programId","keys","pubkey","isSigner","isWritable","data","Buffer","alloc","span","encode","instruction","types_js_1","InitializeImmutableOwner","web3_js_1","decodeInitializeImmutableOwnerInstruction","equals","errors_js_1","length","decodeInitializeImmutableOwnerInstructionUnchecked","decode"],"sources":["/Users/ivan/Metadata/node_modules/@solana/spl-token/src/instructions/initializeImmutableOwner.ts"],"sourcesContent":["import { struct, u8 } from '@solana/buffer-layout';\nimport type { AccountMeta, PublicKey } from '@solana/web3.js';\nimport { TransactionInstruction } from '@solana/web3.js';\nimport {\n    TokenInvalidInstructionDataError,\n    TokenInvalidInstructionKeysError,\n    TokenInvalidInstructionProgramError,\n    TokenInvalidInstructionTypeError,\n} from '../errors.js';\nimport { TokenInstruction } from './types.js';\n\n/** Deserialized instruction for the initiation of an immutable owner account */\nexport interface InitializeImmutableOwnerInstructionData {\n    instruction: TokenInstruction.InitializeImmutableOwner;\n}\n\n/** The struct that represents the instruction data as it is read by the program */\nexport const initializeImmutableOwnerInstructionData = struct<InitializeImmutableOwnerInstructionData>([\n    u8('instruction'),\n]);\n\n/**\n * Construct an InitializeImmutableOwner instruction\n *\n * @param account           Immutable Owner Account\n * @param programId         SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\nexport function createInitializeImmutableOwnerInstruction(\n    account: PublicKey,\n    programId: PublicKey\n): TransactionInstruction {\n    const keys = [{ pubkey: account, isSigner: false, isWritable: true }];\n\n    const data = Buffer.alloc(initializeImmutableOwnerInstructionData.span);\n    initializeImmutableOwnerInstructionData.encode(\n        {\n            instruction: TokenInstruction.InitializeImmutableOwner,\n        },\n        data\n    );\n\n    return new TransactionInstruction({ keys, programId, data });\n}\n\n/** A decoded, valid InitializeImmutableOwner instruction */\nexport interface DecodedInitializeImmutableOwnerInstruction {\n    programId: PublicKey;\n    keys: {\n        account: AccountMeta;\n    };\n    data: {\n        instruction: TokenInstruction.InitializeImmutableOwner;\n    };\n}\n\n/**\n * Decode an InitializeImmutableOwner instruction and validate it\n *\n * @param instruction InitializeImmutableOwner instruction to decode\n * @param programId   SPL Token program account\n *\n * @return Decoded, valid instruction\n */\nexport function decodeInitializeImmutableOwnerInstruction(\n    instruction: TransactionInstruction,\n    programId: PublicKey\n): DecodedInitializeImmutableOwnerInstruction {\n    if (!instruction.programId.equals(programId)) throw new TokenInvalidInstructionProgramError();\n    if (instruction.data.length !== initializeImmutableOwnerInstructionData.span)\n        throw new TokenInvalidInstructionDataError();\n\n    const {\n        keys: { account },\n        data,\n    } = decodeInitializeImmutableOwnerInstructionUnchecked(instruction);\n    if (data.instruction !== TokenInstruction.InitializeImmutableOwner) throw new TokenInvalidInstructionTypeError();\n    if (!account) throw new TokenInvalidInstructionKeysError();\n\n    return {\n        programId,\n        keys: {\n            account,\n        },\n        data,\n    };\n}\n\n/** A decoded, non-validated InitializeImmutableOwner instruction */\nexport interface DecodedInitializeImmutableOwnerInstructionUnchecked {\n    programId: PublicKey;\n    keys: {\n        account: AccountMeta | undefined;\n    };\n    data: {\n        instruction: number;\n    };\n}\n\n/**\n * Decode an InitializeImmutableOwner instruction without validating it\n *\n * @param instruction Transaction instruction to decode\n *\n * @return Decoded, non-validated instruction\n */\nexport function decodeInitializeImmutableOwnerInstructionUnchecked({\n    programId,\n    keys: [account],\n    data,\n}: TransactionInstruction): DecodedInitializeImmutableOwnerInstructionUnchecked {\n    const { instruction } = initializeImmutableOwnerInstructionData.decode(data);\n\n    return {\n        programId,\n        keys: {\n            account: account,\n        },\n        data: {\n            instruction,\n        },\n    };\n}\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}