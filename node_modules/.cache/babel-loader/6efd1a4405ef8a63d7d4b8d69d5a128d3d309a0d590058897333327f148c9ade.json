{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createAssociatedTokenAccountIdempotentInstruction = exports.createAssociatedTokenAccountInstruction = void 0;\nvar web3_js_1 = require(\"@solana/web3.js\");\nvar constants_js_1 = require(\"../constants.js\");\n/**\n * Construct a CreateAssociatedTokenAccount instruction\n *\n * @param payer                    Payer of the initialization fees\n * @param associatedToken          New associated token account\n * @param owner                    Owner of the new account\n * @param mint                     Token mint account\n * @param programId                SPL Token program account\n * @param associatedTokenProgramId SPL Associated Token program account\n *\n * @return Instruction to add to a transaction\n */\nfunction createAssociatedTokenAccountInstruction(payer, associatedToken, owner, mint) {\n  var programId = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : constants_js_1.TOKEN_PROGRAM_ID;\n  var associatedTokenProgramId = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : constants_js_1.ASSOCIATED_TOKEN_PROGRAM_ID;\n  return buildAssociatedTokenAccountInstruction(payer, associatedToken, owner, mint, Buffer.alloc(0), programId, associatedTokenProgramId);\n}\nexports.createAssociatedTokenAccountInstruction = createAssociatedTokenAccountInstruction;\n/**\n * Construct a CreateAssociatedTokenAccountIdempotent instruction\n *\n * @param payer                    Payer of the initialization fees\n * @param associatedToken          New associated token account\n * @param owner                    Owner of the new account\n * @param mint                     Token mint account\n * @param programId                SPL Token program account\n * @param associatedTokenProgramId SPL Associated Token program account\n *\n * @return Instruction to add to a transaction\n */\nfunction createAssociatedTokenAccountIdempotentInstruction(payer, associatedToken, owner, mint) {\n  var programId = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : constants_js_1.TOKEN_PROGRAM_ID;\n  var associatedTokenProgramId = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : constants_js_1.ASSOCIATED_TOKEN_PROGRAM_ID;\n  return buildAssociatedTokenAccountInstruction(payer, associatedToken, owner, mint, Buffer.from([1]), programId, associatedTokenProgramId);\n}\nexports.createAssociatedTokenAccountIdempotentInstruction = createAssociatedTokenAccountIdempotentInstruction;\nfunction buildAssociatedTokenAccountInstruction(payer, associatedToken, owner, mint, instructionData) {\n  var programId = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : constants_js_1.TOKEN_PROGRAM_ID;\n  var associatedTokenProgramId = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : constants_js_1.ASSOCIATED_TOKEN_PROGRAM_ID;\n  var keys = [{\n    pubkey: payer,\n    isSigner: true,\n    isWritable: true\n  }, {\n    pubkey: associatedToken,\n    isSigner: false,\n    isWritable: true\n  }, {\n    pubkey: owner,\n    isSigner: false,\n    isWritable: false\n  }, {\n    pubkey: mint,\n    isSigner: false,\n    isWritable: false\n  }, {\n    pubkey: web3_js_1.SystemProgram.programId,\n    isSigner: false,\n    isWritable: false\n  }, {\n    pubkey: programId,\n    isSigner: false,\n    isWritable: false\n  }];\n  return new web3_js_1.TransactionInstruction({\n    keys: keys,\n    programId: associatedTokenProgramId,\n    data: instructionData\n  });\n}","map":{"version":3,"mappings":";;;;;;AACA;AACA;AAEA;;;;;;;;;;;;AAYA,SAAgBA,uCAAuC,CACnDC,KAAgB,EAChBC,eAA0B,EAC1BC,KAAgB,EAChBC,IAAe,EAEuC;EAAA,IADtDC,SAAS,uEAAGC,+BAAgB;EAAA,IAC5BC,wBAAwB,uEAAGD,0CAA2B;EAEtD,OAAOE,sCAAsC,CACzCP,KAAK,EACLC,eAAe,EACfC,KAAK,EACLC,IAAI,EACJK,MAAM,CAACC,KAAK,CAAC,CAAC,CAAC,EACfL,SAAS,EACTE,wBAAwB,CAC3B;AACL;AAjBAI;AAmBA;;;;;;;;;;;;AAYA,SAAgBC,iDAAiD,CAC7DX,KAAgB,EAChBC,eAA0B,EAC1BC,KAAgB,EAChBC,IAAe,EAEuC;EAAA,IADtDC,SAAS,uEAAGC,+BAAgB;EAAA,IAC5BC,wBAAwB,uEAAGD,0CAA2B;EAEtD,OAAOE,sCAAsC,CACzCP,KAAK,EACLC,eAAe,EACfC,KAAK,EACLC,IAAI,EACJK,MAAM,CAACI,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,EAChBR,SAAS,EACTE,wBAAwB,CAC3B;AACL;AAjBAI;AAmBA,SAASH,sCAAsC,CAC3CP,KAAgB,EAChBC,eAA0B,EAC1BC,KAAgB,EAChBC,IAAe,EACfU,eAAuB,EAE+B;EAAA,IADtDT,SAAS,uEAAGC,+BAAgB;EAAA,IAC5BC,wBAAwB,uEAAGD,0CAA2B;EAEtD,IAAMS,IAAI,GAAG,CACT;IAAEC,MAAM,EAAEf,KAAK;IAAEgB,QAAQ,EAAE,IAAI;IAAEC,UAAU,EAAE;EAAI,CAAE,EACnD;IAAEF,MAAM,EAAEd,eAAe;IAAEe,QAAQ,EAAE,KAAK;IAAEC,UAAU,EAAE;EAAI,CAAE,EAC9D;IAAEF,MAAM,EAAEb,KAAK;IAAEc,QAAQ,EAAE,KAAK;IAAEC,UAAU,EAAE;EAAK,CAAE,EACrD;IAAEF,MAAM,EAAEZ,IAAI;IAAEa,QAAQ,EAAE,KAAK;IAAEC,UAAU,EAAE;EAAK,CAAE,EACpD;IAAEF,MAAM,EAAEG,uBAAa,CAACd,SAAS;IAAEY,QAAQ,EAAE,KAAK;IAAEC,UAAU,EAAE;EAAK,CAAE,EACvE;IAAEF,MAAM,EAAEX,SAAS;IAAEY,QAAQ,EAAE,KAAK;IAAEC,UAAU,EAAE;EAAK,CAAE,CAC5D;EAED,OAAO,IAAIC,gCAAsB,CAAC;IAC9BJ,IAAI,EAAJA,IAAI;IACJV,SAAS,EAAEE,wBAAwB;IACnCa,IAAI,EAAEN;GACT,CAAC;AACN","names":["createAssociatedTokenAccountInstruction","payer","associatedToken","owner","mint","programId","constants_js_1","associatedTokenProgramId","buildAssociatedTokenAccountInstruction","Buffer","alloc","exports","createAssociatedTokenAccountIdempotentInstruction","from","instructionData","keys","pubkey","isSigner","isWritable","web3_js_1","data"],"sources":["/Users/ivan/Metadata/node_modules/@solana/spl-token/src/instructions/associatedTokenAccount.ts"],"sourcesContent":["import type { PublicKey } from '@solana/web3.js';\nimport { SystemProgram, TransactionInstruction } from '@solana/web3.js';\nimport { ASSOCIATED_TOKEN_PROGRAM_ID, TOKEN_PROGRAM_ID } from '../constants.js';\n\n/**\n * Construct a CreateAssociatedTokenAccount instruction\n *\n * @param payer                    Payer of the initialization fees\n * @param associatedToken          New associated token account\n * @param owner                    Owner of the new account\n * @param mint                     Token mint account\n * @param programId                SPL Token program account\n * @param associatedTokenProgramId SPL Associated Token program account\n *\n * @return Instruction to add to a transaction\n */\nexport function createAssociatedTokenAccountInstruction(\n    payer: PublicKey,\n    associatedToken: PublicKey,\n    owner: PublicKey,\n    mint: PublicKey,\n    programId = TOKEN_PROGRAM_ID,\n    associatedTokenProgramId = ASSOCIATED_TOKEN_PROGRAM_ID\n): TransactionInstruction {\n    return buildAssociatedTokenAccountInstruction(\n        payer,\n        associatedToken,\n        owner,\n        mint,\n        Buffer.alloc(0),\n        programId,\n        associatedTokenProgramId\n    );\n}\n\n/**\n * Construct a CreateAssociatedTokenAccountIdempotent instruction\n *\n * @param payer                    Payer of the initialization fees\n * @param associatedToken          New associated token account\n * @param owner                    Owner of the new account\n * @param mint                     Token mint account\n * @param programId                SPL Token program account\n * @param associatedTokenProgramId SPL Associated Token program account\n *\n * @return Instruction to add to a transaction\n */\nexport function createAssociatedTokenAccountIdempotentInstruction(\n    payer: PublicKey,\n    associatedToken: PublicKey,\n    owner: PublicKey,\n    mint: PublicKey,\n    programId = TOKEN_PROGRAM_ID,\n    associatedTokenProgramId = ASSOCIATED_TOKEN_PROGRAM_ID\n): TransactionInstruction {\n    return buildAssociatedTokenAccountInstruction(\n        payer,\n        associatedToken,\n        owner,\n        mint,\n        Buffer.from([1]),\n        programId,\n        associatedTokenProgramId\n    );\n}\n\nfunction buildAssociatedTokenAccountInstruction(\n    payer: PublicKey,\n    associatedToken: PublicKey,\n    owner: PublicKey,\n    mint: PublicKey,\n    instructionData: Buffer,\n    programId = TOKEN_PROGRAM_ID,\n    associatedTokenProgramId = ASSOCIATED_TOKEN_PROGRAM_ID\n): TransactionInstruction {\n    const keys = [\n        { pubkey: payer, isSigner: true, isWritable: true },\n        { pubkey: associatedToken, isSigner: false, isWritable: true },\n        { pubkey: owner, isSigner: false, isWritable: false },\n        { pubkey: mint, isSigner: false, isWritable: false },\n        { pubkey: SystemProgram.programId, isSigner: false, isWritable: false },\n        { pubkey: programId, isSigner: false, isWritable: false },\n    ];\n\n    return new TransactionInstruction({\n        keys,\n        programId: associatedTokenProgramId,\n        data: instructionData,\n    });\n}\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}