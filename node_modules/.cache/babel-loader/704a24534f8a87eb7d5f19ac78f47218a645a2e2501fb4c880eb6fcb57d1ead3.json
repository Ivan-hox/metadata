{"ast":null,"code":"import _classCallCheck from \"/Users/ivan/Metadata/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/ivan/Metadata/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/Users/ivan/Metadata/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/ivan/Metadata/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport _slicedToArray from \"/Users/ivan/Metadata/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport assert from './_assert.js';\nimport u64 from './_u64.js';\nimport { Hash, u32, toBytes, wrapConstructor, wrapConstructorWithOpts } from './utils.js';\n// Various per round constants calculations\nvar SHA3_PI = [],\n  SHA3_ROTL = [],\n  _SHA3_IOTA = [];\nvar _0n = BigInt(0);\nvar _1n = BigInt(1);\nvar _2n = BigInt(2);\nvar _7n = BigInt(7);\nvar _256n = BigInt(256);\nvar _0x71n = BigInt(0x71);\nfor (var round = 0, R = _1n, x = 1, y = 0; round < 24; round++) {\n  // Pi\n  var _ref = [y, (2 * x + 3 * y) % 5];\n  x = _ref[0];\n  y = _ref[1];\n  SHA3_PI.push(2 * (5 * y + x));\n  // Rotational\n  SHA3_ROTL.push((round + 1) * (round + 2) / 2 % 64);\n  // Iota\n  var t = _0n;\n  for (var j = 0; j < 7; j++) {\n    R = (R << _1n ^ (R >> _7n) * _0x71n) % _256n;\n    if (R & _2n) t ^= _1n << (_1n << BigInt(j)) - _1n;\n  }\n  _SHA3_IOTA.push(t);\n}\nvar _u64$split = u64.split(_SHA3_IOTA, true),\n  _u64$split2 = _slicedToArray(_u64$split, 2),\n  SHA3_IOTA_H = _u64$split2[0],\n  SHA3_IOTA_L = _u64$split2[1];\n// Left rotation (without 0, 32, 64)\nvar rotlH = function rotlH(h, l, s) {\n  return s > 32 ? u64.rotlBH(h, l, s) : u64.rotlSH(h, l, s);\n};\nvar rotlL = function rotlL(h, l, s) {\n  return s > 32 ? u64.rotlBL(h, l, s) : u64.rotlSL(h, l, s);\n};\n// Same as keccakf1600, but allows to skip some rounds\nexport function keccakP(s) {\n  var rounds = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 24;\n  var B = new Uint32Array(5 * 2);\n  // NOTE: all indices are x2 since we store state as u32 instead of u64 (bigints to slow in js)\n  for (var round = 24 - rounds; round < 24; round++) {\n    // Theta θ\n    for (var x = 0; x < 10; x++) {\n      B[x] = s[x] ^ s[x + 10] ^ s[x + 20] ^ s[x + 30] ^ s[x + 40];\n    }\n    for (var _x = 0; _x < 10; _x += 2) {\n      var idx1 = (_x + 8) % 10;\n      var idx0 = (_x + 2) % 10;\n      var B0 = B[idx0];\n      var B1 = B[idx0 + 1];\n      var Th = rotlH(B0, B1, 1) ^ B[idx1];\n      var Tl = rotlL(B0, B1, 1) ^ B[idx1 + 1];\n      for (var y = 0; y < 50; y += 10) {\n        s[_x + y] ^= Th;\n        s[_x + y + 1] ^= Tl;\n      }\n    }\n    // Rho (ρ) and Pi (π)\n    var curH = s[2];\n    var curL = s[3];\n    for (var t = 0; t < 24; t++) {\n      var shift = SHA3_ROTL[t];\n      var _Th = rotlH(curH, curL, shift);\n      var _Tl = rotlL(curH, curL, shift);\n      var PI = SHA3_PI[t];\n      curH = s[PI];\n      curL = s[PI + 1];\n      s[PI] = _Th;\n      s[PI + 1] = _Tl;\n    }\n    // Chi (χ)\n    for (var _y = 0; _y < 50; _y += 10) {\n      for (var _x2 = 0; _x2 < 10; _x2++) {\n        B[_x2] = s[_y + _x2];\n      }\n      for (var _x3 = 0; _x3 < 10; _x3++) {\n        s[_y + _x3] ^= ~B[(_x3 + 2) % 10] & B[(_x3 + 4) % 10];\n      }\n    }\n    // Iota (ι)\n    s[0] ^= SHA3_IOTA_H[round];\n    s[1] ^= SHA3_IOTA_L[round];\n  }\n  B.fill(0);\n}\nexport var Keccak = /*#__PURE__*/function (_Hash) {\n  _inherits(Keccak, _Hash);\n  var _super = _createSuper(Keccak);\n  // NOTE: we accept arguments in bytes instead of bits here.\n  function Keccak(blockLen, suffix, outputLen) {\n    var _this;\n    var enableXOF = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n    var rounds = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 24;\n    _classCallCheck(this, Keccak);\n    _this = _super.call(this);\n    _this.blockLen = blockLen;\n    _this.suffix = suffix;\n    _this.outputLen = outputLen;\n    _this.enableXOF = enableXOF;\n    _this.rounds = rounds;\n    _this.pos = 0;\n    _this.posOut = 0;\n    _this.finished = false;\n    _this.destroyed = false;\n    // Can be passed from user as dkLen\n    assert.number(outputLen);\n    // 1600 = 5x5 matrix of 64bit.  1600 bits === 200 bytes\n    if (0 >= _this.blockLen || _this.blockLen >= 200) throw new Error('Sha3 supports only keccak-f1600 function');\n    _this.state = new Uint8Array(200);\n    _this.state32 = u32(_this.state);\n    return _this;\n  }\n  _createClass(Keccak, [{\n    key: \"keccak\",\n    value: function keccak() {\n      keccakP(this.state32, this.rounds);\n      this.posOut = 0;\n      this.pos = 0;\n    }\n  }, {\n    key: \"update\",\n    value: function update(data) {\n      assert.exists(this);\n      var blockLen = this.blockLen,\n        state = this.state;\n      data = toBytes(data);\n      var len = data.length;\n      for (var pos = 0; pos < len;) {\n        var take = Math.min(blockLen - this.pos, len - pos);\n        for (var i = 0; i < take; i++) {\n          state[this.pos++] ^= data[pos++];\n        }\n        if (this.pos === blockLen) this.keccak();\n      }\n      return this;\n    }\n  }, {\n    key: \"finish\",\n    value: function finish() {\n      if (this.finished) return;\n      this.finished = true;\n      var state = this.state,\n        suffix = this.suffix,\n        pos = this.pos,\n        blockLen = this.blockLen;\n      // Do the padding\n      state[pos] ^= suffix;\n      if ((suffix & 0x80) !== 0 && pos === blockLen - 1) this.keccak();\n      state[blockLen - 1] ^= 0x80;\n      this.keccak();\n    }\n  }, {\n    key: \"writeInto\",\n    value: function writeInto(out) {\n      assert.exists(this, false);\n      assert.bytes(out);\n      this.finish();\n      var bufferOut = this.state;\n      var blockLen = this.blockLen;\n      for (var pos = 0, len = out.length; pos < len;) {\n        if (this.posOut >= blockLen) this.keccak();\n        var take = Math.min(blockLen - this.posOut, len - pos);\n        out.set(bufferOut.subarray(this.posOut, this.posOut + take), pos);\n        this.posOut += take;\n        pos += take;\n      }\n      return out;\n    }\n  }, {\n    key: \"xofInto\",\n    value: function xofInto(out) {\n      // Sha3/Keccak usage with XOF is probably mistake, only SHAKE instances can do XOF\n      if (!this.enableXOF) throw new Error('XOF is not possible for this instance');\n      return this.writeInto(out);\n    }\n  }, {\n    key: \"xof\",\n    value: function xof(bytes) {\n      assert.number(bytes);\n      return this.xofInto(new Uint8Array(bytes));\n    }\n  }, {\n    key: \"digestInto\",\n    value: function digestInto(out) {\n      assert.output(out, this);\n      if (this.finished) throw new Error('digest() was already called');\n      this.writeInto(out);\n      this.destroy();\n      return out;\n    }\n  }, {\n    key: \"digest\",\n    value: function digest() {\n      return this.digestInto(new Uint8Array(this.outputLen));\n    }\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      this.destroyed = true;\n      this.state.fill(0);\n    }\n  }, {\n    key: \"_cloneInto\",\n    value: function _cloneInto(to) {\n      var blockLen = this.blockLen,\n        suffix = this.suffix,\n        outputLen = this.outputLen,\n        rounds = this.rounds,\n        enableXOF = this.enableXOF;\n      to || (to = new Keccak(blockLen, suffix, outputLen, enableXOF, rounds));\n      to.state32.set(this.state32);\n      to.pos = this.pos;\n      to.posOut = this.posOut;\n      to.finished = this.finished;\n      to.rounds = rounds;\n      // Suffix can change in cSHAKE\n      to.suffix = suffix;\n      to.outputLen = outputLen;\n      to.enableXOF = enableXOF;\n      to.destroyed = this.destroyed;\n      return to;\n    }\n  }]);\n  return Keccak;\n}(Hash);\nvar gen = function gen(suffix, blockLen, outputLen) {\n  return wrapConstructor(function () {\n    return new Keccak(blockLen, suffix, outputLen);\n  });\n};\nexport var sha3_224 = gen(0x06, 144, 224 / 8);\n/**\n * SHA3-256 hash function\n * @param message - that would be hashed\n */\nexport var sha3_256 = gen(0x06, 136, 256 / 8);\nexport var sha3_384 = gen(0x06, 104, 384 / 8);\nexport var sha3_512 = gen(0x06, 72, 512 / 8);\nexport var keccak_224 = gen(0x01, 144, 224 / 8);\n/**\n * keccak-256 hash function. Different from SHA3-256.\n * @param message - that would be hashed\n */\nexport var keccak_256 = gen(0x01, 136, 256 / 8);\nexport var keccak_384 = gen(0x01, 104, 384 / 8);\nexport var keccak_512 = gen(0x01, 72, 512 / 8);\nvar genShake = function genShake(suffix, blockLen, outputLen) {\n  return wrapConstructorWithOpts(function () {\n    var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    return new Keccak(blockLen, suffix, opts.dkLen === undefined ? outputLen : opts.dkLen, true);\n  });\n};\nexport var shake128 = genShake(0x1f, 168, 128 / 8);\nexport var shake256 = genShake(0x1f, 136, 256 / 8);","map":{"version":3,"names":["assert","u64","Hash","u32","toBytes","wrapConstructor","wrapConstructorWithOpts","SHA3_PI","SHA3_ROTL","_SHA3_IOTA","_0n","BigInt","_1n","_2n","_7n","_256n","_0x71n","round","R","x","y","push","t","j","split","SHA3_IOTA_H","SHA3_IOTA_L","rotlH","h","l","s","rotlBH","rotlSH","rotlL","rotlBL","rotlSL","keccakP","rounds","B","Uint32Array","idx1","idx0","B0","B1","Th","Tl","curH","curL","shift","PI","fill","Keccak","blockLen","suffix","outputLen","enableXOF","pos","posOut","finished","destroyed","number","Error","state","Uint8Array","state32","data","exists","len","length","take","Math","min","i","keccak","out","bytes","finish","bufferOut","set","subarray","writeInto","xofInto","output","destroy","digestInto","to","gen","sha3_224","sha3_256","sha3_384","sha3_512","keccak_224","keccak_256","keccak_384","keccak_512","genShake","opts","dkLen","undefined","shake128","shake256"],"sources":["/Users/ivan/Metadata/node_modules/@noble/hashes/esm/sha3.js"],"sourcesContent":["import assert from './_assert.js';\nimport u64 from './_u64.js';\nimport { Hash, u32, toBytes, wrapConstructor, wrapConstructorWithOpts, } from './utils.js';\n// Various per round constants calculations\nconst [SHA3_PI, SHA3_ROTL, _SHA3_IOTA] = [[], [], []];\nconst _0n = BigInt(0);\nconst _1n = BigInt(1);\nconst _2n = BigInt(2);\nconst _7n = BigInt(7);\nconst _256n = BigInt(256);\nconst _0x71n = BigInt(0x71);\nfor (let round = 0, R = _1n, x = 1, y = 0; round < 24; round++) {\n    // Pi\n    [x, y] = [y, (2 * x + 3 * y) % 5];\n    SHA3_PI.push(2 * (5 * y + x));\n    // Rotational\n    SHA3_ROTL.push((((round + 1) * (round + 2)) / 2) % 64);\n    // Iota\n    let t = _0n;\n    for (let j = 0; j < 7; j++) {\n        R = ((R << _1n) ^ ((R >> _7n) * _0x71n)) % _256n;\n        if (R & _2n)\n            t ^= _1n << ((_1n << BigInt(j)) - _1n);\n    }\n    _SHA3_IOTA.push(t);\n}\nconst [SHA3_IOTA_H, SHA3_IOTA_L] = u64.split(_SHA3_IOTA, true);\n// Left rotation (without 0, 32, 64)\nconst rotlH = (h, l, s) => s > 32 ? u64.rotlBH(h, l, s) : u64.rotlSH(h, l, s);\nconst rotlL = (h, l, s) => s > 32 ? u64.rotlBL(h, l, s) : u64.rotlSL(h, l, s);\n// Same as keccakf1600, but allows to skip some rounds\nexport function keccakP(s, rounds = 24) {\n    const B = new Uint32Array(5 * 2);\n    // NOTE: all indices are x2 since we store state as u32 instead of u64 (bigints to slow in js)\n    for (let round = 24 - rounds; round < 24; round++) {\n        // Theta θ\n        for (let x = 0; x < 10; x++)\n            B[x] = s[x] ^ s[x + 10] ^ s[x + 20] ^ s[x + 30] ^ s[x + 40];\n        for (let x = 0; x < 10; x += 2) {\n            const idx1 = (x + 8) % 10;\n            const idx0 = (x + 2) % 10;\n            const B0 = B[idx0];\n            const B1 = B[idx0 + 1];\n            const Th = rotlH(B0, B1, 1) ^ B[idx1];\n            const Tl = rotlL(B0, B1, 1) ^ B[idx1 + 1];\n            for (let y = 0; y < 50; y += 10) {\n                s[x + y] ^= Th;\n                s[x + y + 1] ^= Tl;\n            }\n        }\n        // Rho (ρ) and Pi (π)\n        let curH = s[2];\n        let curL = s[3];\n        for (let t = 0; t < 24; t++) {\n            const shift = SHA3_ROTL[t];\n            const Th = rotlH(curH, curL, shift);\n            const Tl = rotlL(curH, curL, shift);\n            const PI = SHA3_PI[t];\n            curH = s[PI];\n            curL = s[PI + 1];\n            s[PI] = Th;\n            s[PI + 1] = Tl;\n        }\n        // Chi (χ)\n        for (let y = 0; y < 50; y += 10) {\n            for (let x = 0; x < 10; x++)\n                B[x] = s[y + x];\n            for (let x = 0; x < 10; x++)\n                s[y + x] ^= ~B[(x + 2) % 10] & B[(x + 4) % 10];\n        }\n        // Iota (ι)\n        s[0] ^= SHA3_IOTA_H[round];\n        s[1] ^= SHA3_IOTA_L[round];\n    }\n    B.fill(0);\n}\nexport class Keccak extends Hash {\n    // NOTE: we accept arguments in bytes instead of bits here.\n    constructor(blockLen, suffix, outputLen, enableXOF = false, rounds = 24) {\n        super();\n        this.blockLen = blockLen;\n        this.suffix = suffix;\n        this.outputLen = outputLen;\n        this.enableXOF = enableXOF;\n        this.rounds = rounds;\n        this.pos = 0;\n        this.posOut = 0;\n        this.finished = false;\n        this.destroyed = false;\n        // Can be passed from user as dkLen\n        assert.number(outputLen);\n        // 1600 = 5x5 matrix of 64bit.  1600 bits === 200 bytes\n        if (0 >= this.blockLen || this.blockLen >= 200)\n            throw new Error('Sha3 supports only keccak-f1600 function');\n        this.state = new Uint8Array(200);\n        this.state32 = u32(this.state);\n    }\n    keccak() {\n        keccakP(this.state32, this.rounds);\n        this.posOut = 0;\n        this.pos = 0;\n    }\n    update(data) {\n        assert.exists(this);\n        const { blockLen, state } = this;\n        data = toBytes(data);\n        const len = data.length;\n        for (let pos = 0; pos < len;) {\n            const take = Math.min(blockLen - this.pos, len - pos);\n            for (let i = 0; i < take; i++)\n                state[this.pos++] ^= data[pos++];\n            if (this.pos === blockLen)\n                this.keccak();\n        }\n        return this;\n    }\n    finish() {\n        if (this.finished)\n            return;\n        this.finished = true;\n        const { state, suffix, pos, blockLen } = this;\n        // Do the padding\n        state[pos] ^= suffix;\n        if ((suffix & 0x80) !== 0 && pos === blockLen - 1)\n            this.keccak();\n        state[blockLen - 1] ^= 0x80;\n        this.keccak();\n    }\n    writeInto(out) {\n        assert.exists(this, false);\n        assert.bytes(out);\n        this.finish();\n        const bufferOut = this.state;\n        const { blockLen } = this;\n        for (let pos = 0, len = out.length; pos < len;) {\n            if (this.posOut >= blockLen)\n                this.keccak();\n            const take = Math.min(blockLen - this.posOut, len - pos);\n            out.set(bufferOut.subarray(this.posOut, this.posOut + take), pos);\n            this.posOut += take;\n            pos += take;\n        }\n        return out;\n    }\n    xofInto(out) {\n        // Sha3/Keccak usage with XOF is probably mistake, only SHAKE instances can do XOF\n        if (!this.enableXOF)\n            throw new Error('XOF is not possible for this instance');\n        return this.writeInto(out);\n    }\n    xof(bytes) {\n        assert.number(bytes);\n        return this.xofInto(new Uint8Array(bytes));\n    }\n    digestInto(out) {\n        assert.output(out, this);\n        if (this.finished)\n            throw new Error('digest() was already called');\n        this.writeInto(out);\n        this.destroy();\n        return out;\n    }\n    digest() {\n        return this.digestInto(new Uint8Array(this.outputLen));\n    }\n    destroy() {\n        this.destroyed = true;\n        this.state.fill(0);\n    }\n    _cloneInto(to) {\n        const { blockLen, suffix, outputLen, rounds, enableXOF } = this;\n        to || (to = new Keccak(blockLen, suffix, outputLen, enableXOF, rounds));\n        to.state32.set(this.state32);\n        to.pos = this.pos;\n        to.posOut = this.posOut;\n        to.finished = this.finished;\n        to.rounds = rounds;\n        // Suffix can change in cSHAKE\n        to.suffix = suffix;\n        to.outputLen = outputLen;\n        to.enableXOF = enableXOF;\n        to.destroyed = this.destroyed;\n        return to;\n    }\n}\nconst gen = (suffix, blockLen, outputLen) => wrapConstructor(() => new Keccak(blockLen, suffix, outputLen));\nexport const sha3_224 = gen(0x06, 144, 224 / 8);\n/**\n * SHA3-256 hash function\n * @param message - that would be hashed\n */\nexport const sha3_256 = gen(0x06, 136, 256 / 8);\nexport const sha3_384 = gen(0x06, 104, 384 / 8);\nexport const sha3_512 = gen(0x06, 72, 512 / 8);\nexport const keccak_224 = gen(0x01, 144, 224 / 8);\n/**\n * keccak-256 hash function. Different from SHA3-256.\n * @param message - that would be hashed\n */\nexport const keccak_256 = gen(0x01, 136, 256 / 8);\nexport const keccak_384 = gen(0x01, 104, 384 / 8);\nexport const keccak_512 = gen(0x01, 72, 512 / 8);\nconst genShake = (suffix, blockLen, outputLen) => wrapConstructorWithOpts((opts = {}) => new Keccak(blockLen, suffix, opts.dkLen === undefined ? outputLen : opts.dkLen, true));\nexport const shake128 = genShake(0x1f, 168, 128 / 8);\nexport const shake256 = genShake(0x1f, 136, 256 / 8);\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}