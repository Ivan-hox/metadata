{"ast":null,"code":"\"use strict\";\n\nvar _slicedToArray = require(\"/Users/ivan/Metadata/node_modules/@babel/runtime/helpers/slicedToArray.js\").default;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.decodeInitializeMintInstructionUnchecked = exports.decodeInitializeMintInstruction = exports.createInitializeMintInstruction = exports.initializeMintInstructionData = void 0;\nvar buffer_layout_1 = require(\"@solana/buffer-layout\");\nvar buffer_layout_utils_1 = require(\"@solana/buffer-layout-utils\");\nvar web3_js_1 = require(\"@solana/web3.js\");\nvar constants_js_1 = require(\"../constants.js\");\nvar errors_js_1 = require(\"../errors.js\");\nvar types_js_1 = require(\"./types.js\");\n/** TODO: docs */\nexports.initializeMintInstructionData = (0, buffer_layout_1.struct)([(0, buffer_layout_1.u8)('instruction'), (0, buffer_layout_1.u8)('decimals'), (0, buffer_layout_utils_1.publicKey)('mintAuthority'), (0, buffer_layout_1.u8)('freezeAuthorityOption'), (0, buffer_layout_utils_1.publicKey)('freezeAuthority')]);\n/**\n * Construct an InitializeMint instruction\n *\n * @param mint            Token mint account\n * @param decimals        Number of decimals in token account amounts\n * @param mintAuthority   Minting authority\n * @param freezeAuthority Optional authority that can freeze token accounts\n * @param programId       SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\nfunction createInitializeMintInstruction(mint, decimals, mintAuthority, freezeAuthority) {\n  var programId = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : constants_js_1.TOKEN_PROGRAM_ID;\n  var keys = [{\n    pubkey: mint,\n    isSigner: false,\n    isWritable: true\n  }, {\n    pubkey: web3_js_1.SYSVAR_RENT_PUBKEY,\n    isSigner: false,\n    isWritable: false\n  }];\n  var data = Buffer.alloc(exports.initializeMintInstructionData.span);\n  exports.initializeMintInstructionData.encode({\n    instruction: types_js_1.TokenInstruction.InitializeMint,\n    decimals: decimals,\n    mintAuthority: mintAuthority,\n    freezeAuthorityOption: freezeAuthority ? 1 : 0,\n    freezeAuthority: freezeAuthority || new web3_js_1.PublicKey(0)\n  }, data);\n  return new web3_js_1.TransactionInstruction({\n    keys: keys,\n    programId: programId,\n    data: data\n  });\n}\nexports.createInitializeMintInstruction = createInitializeMintInstruction;\n/**\n * Decode an InitializeMint instruction and validate it\n *\n * @param instruction Transaction instruction to decode\n * @param programId   SPL Token program account\n *\n * @return Decoded, valid instruction\n */\nfunction decodeInitializeMintInstruction(instruction) {\n  var programId = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : constants_js_1.TOKEN_PROGRAM_ID;\n  if (!instruction.programId.equals(programId)) throw new errors_js_1.TokenInvalidInstructionProgramError();\n  if (instruction.data.length !== exports.initializeMintInstructionData.span) throw new errors_js_1.TokenInvalidInstructionDataError();\n  var _decodeInitializeMint = decodeInitializeMintInstructionUnchecked(instruction),\n    _decodeInitializeMint2 = _decodeInitializeMint.keys,\n    mint = _decodeInitializeMint2.mint,\n    rent = _decodeInitializeMint2.rent,\n    data = _decodeInitializeMint.data;\n  if (data.instruction !== types_js_1.TokenInstruction.InitializeMint) throw new errors_js_1.TokenInvalidInstructionTypeError();\n  if (!mint || !rent) throw new errors_js_1.TokenInvalidInstructionKeysError();\n  // TODO: key checks?\n  return {\n    programId: programId,\n    keys: {\n      mint: mint,\n      rent: rent\n    },\n    data: data\n  };\n}\nexports.decodeInitializeMintInstruction = decodeInitializeMintInstruction;\n/**\n * Decode an InitializeMint instruction without validating it\n *\n * @param instruction Transaction instruction to decode\n *\n * @return Decoded, non-validated instruction\n */\nfunction decodeInitializeMintInstructionUnchecked(_ref) {\n  var programId = _ref.programId,\n    _ref$keys = _slicedToArray(_ref.keys, 2),\n    mint = _ref$keys[0],\n    rent = _ref$keys[1],\n    data = _ref.data;\n  var _exports$initializeMi = exports.initializeMintInstructionData.decode(data),\n    instruction = _exports$initializeMi.instruction,\n    decimals = _exports$initializeMi.decimals,\n    mintAuthority = _exports$initializeMi.mintAuthority,\n    freezeAuthorityOption = _exports$initializeMi.freezeAuthorityOption,\n    freezeAuthority = _exports$initializeMi.freezeAuthority;\n  return {\n    programId: programId,\n    keys: {\n      mint: mint,\n      rent: rent\n    },\n    data: {\n      instruction: instruction,\n      decimals: decimals,\n      mintAuthority: mintAuthority,\n      freezeAuthority: freezeAuthorityOption ? freezeAuthority : null\n    }\n  };\n}\nexports.decodeInitializeMintInstructionUnchecked = decodeInitializeMintInstructionUnchecked;","map":{"version":3,"mappings":"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","names":["exports","createInitializeMintInstruction","mint","decimals","mintAuthority","freezeAuthority","programId","constants_js_1","keys","pubkey","isSigner","isWritable","web3_js_1","data","Buffer","alloc","span","encode","instruction","types_js_1","InitializeMint","freezeAuthorityOption","decodeInitializeMintInstruction","equals","errors_js_1","length","decodeInitializeMintInstructionUnchecked","rent","decode"],"sources":["/Users/ivan/Metadata/node_modules/@solana/spl-token/src/instructions/initializeMint.ts"],"sourcesContent":["import { struct, u8 } from '@solana/buffer-layout';\nimport { publicKey } from '@solana/buffer-layout-utils';\nimport type { AccountMeta } from '@solana/web3.js';\nimport { PublicKey, SYSVAR_RENT_PUBKEY, TransactionInstruction } from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID } from '../constants.js';\nimport {\n    TokenInvalidInstructionDataError,\n    TokenInvalidInstructionKeysError,\n    TokenInvalidInstructionProgramError,\n    TokenInvalidInstructionTypeError,\n} from '../errors.js';\nimport { TokenInstruction } from './types.js';\n\n/** TODO: docs */\nexport interface InitializeMintInstructionData {\n    instruction: TokenInstruction.InitializeMint;\n    decimals: number;\n    mintAuthority: PublicKey;\n    freezeAuthorityOption: 1 | 0;\n    freezeAuthority: PublicKey;\n}\n\n/** TODO: docs */\nexport const initializeMintInstructionData = struct<InitializeMintInstructionData>([\n    u8('instruction'),\n    u8('decimals'),\n    publicKey('mintAuthority'),\n    u8('freezeAuthorityOption'),\n    publicKey('freezeAuthority'),\n]);\n\n/**\n * Construct an InitializeMint instruction\n *\n * @param mint            Token mint account\n * @param decimals        Number of decimals in token account amounts\n * @param mintAuthority   Minting authority\n * @param freezeAuthority Optional authority that can freeze token accounts\n * @param programId       SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\nexport function createInitializeMintInstruction(\n    mint: PublicKey,\n    decimals: number,\n    mintAuthority: PublicKey,\n    freezeAuthority: PublicKey | null,\n    programId = TOKEN_PROGRAM_ID\n): TransactionInstruction {\n    const keys = [\n        { pubkey: mint, isSigner: false, isWritable: true },\n        { pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false },\n    ];\n\n    const data = Buffer.alloc(initializeMintInstructionData.span);\n    initializeMintInstructionData.encode(\n        {\n            instruction: TokenInstruction.InitializeMint,\n            decimals,\n            mintAuthority,\n            freezeAuthorityOption: freezeAuthority ? 1 : 0,\n            freezeAuthority: freezeAuthority || new PublicKey(0),\n        },\n        data\n    );\n\n    return new TransactionInstruction({ keys, programId, data });\n}\n\n/** A decoded, valid InitializeMint instruction */\nexport interface DecodedInitializeMintInstruction {\n    programId: PublicKey;\n    keys: {\n        mint: AccountMeta;\n        rent: AccountMeta;\n    };\n    data: {\n        instruction: TokenInstruction.InitializeMint;\n        decimals: number;\n        mintAuthority: PublicKey;\n        freezeAuthority: PublicKey | null;\n    };\n}\n\n/**\n * Decode an InitializeMint instruction and validate it\n *\n * @param instruction Transaction instruction to decode\n * @param programId   SPL Token program account\n *\n * @return Decoded, valid instruction\n */\nexport function decodeInitializeMintInstruction(\n    instruction: TransactionInstruction,\n    programId = TOKEN_PROGRAM_ID\n): DecodedInitializeMintInstruction {\n    if (!instruction.programId.equals(programId)) throw new TokenInvalidInstructionProgramError();\n    if (instruction.data.length !== initializeMintInstructionData.span) throw new TokenInvalidInstructionDataError();\n\n    const {\n        keys: { mint, rent },\n        data,\n    } = decodeInitializeMintInstructionUnchecked(instruction);\n    if (data.instruction !== TokenInstruction.InitializeMint) throw new TokenInvalidInstructionTypeError();\n    if (!mint || !rent) throw new TokenInvalidInstructionKeysError();\n\n    // TODO: key checks?\n\n    return {\n        programId,\n        keys: {\n            mint,\n            rent,\n        },\n        data,\n    };\n}\n\n/** A decoded, non-validated InitializeMint instruction */\nexport interface DecodedInitializeMintInstructionUnchecked {\n    programId: PublicKey;\n    keys: {\n        mint: AccountMeta | undefined;\n        rent: AccountMeta | undefined;\n    };\n    data: {\n        instruction: number;\n        decimals: number;\n        mintAuthority: PublicKey;\n        freezeAuthority: PublicKey | null;\n    };\n}\n\n/**\n * Decode an InitializeMint instruction without validating it\n *\n * @param instruction Transaction instruction to decode\n *\n * @return Decoded, non-validated instruction\n */\nexport function decodeInitializeMintInstructionUnchecked({\n    programId,\n    keys: [mint, rent],\n    data,\n}: TransactionInstruction): DecodedInitializeMintInstructionUnchecked {\n    const { instruction, decimals, mintAuthority, freezeAuthorityOption, freezeAuthority } =\n        initializeMintInstructionData.decode(data);\n\n    return {\n        programId,\n        keys: {\n            mint,\n            rent,\n        },\n        data: {\n            instruction,\n            decimals,\n            mintAuthority,\n            freezeAuthority: freezeAuthorityOption ? freezeAuthority : null,\n        },\n    };\n}\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}