{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.bufferXOR = exports.setDifference = exports.arrayContains = exports.arraysEqual = exports.hasPrefix = exports.isURType = exports.intToBytes = exports.toUint32 = exports.getCRCHex = exports.getCRC = exports.split = exports.partition = exports.sha256Hash = void 0;\nvar sha_js_1 = __importDefault(require(\"sha.js\"));\nvar crc_1 = require(\"crc\");\nvar sha256Hash = function sha256Hash(data) {\n  return sha_js_1.default('sha256').update(data).digest();\n};\nexports.sha256Hash = sha256Hash;\nvar partition = function partition(s, n) {\n  return s.match(new RegExp('.{1,' + n + '}', 'g')) || [s];\n};\nexports.partition = partition;\nvar split = function split(s, length) {\n  return [s.slice(0, -length), s.slice(-length)];\n};\nexports.split = split;\nvar getCRC = function getCRC(message) {\n  return crc_1.crc32(message);\n};\nexports.getCRC = getCRC;\nvar getCRCHex = function getCRCHex(message) {\n  return crc_1.crc32(message).toString(16).padStart(8, '0');\n};\nexports.getCRCHex = getCRCHex;\nvar toUint32 = function toUint32(number) {\n  return number >>> 0;\n};\nexports.toUint32 = toUint32;\nvar intToBytes = function intToBytes(num) {\n  var arr = new ArrayBuffer(4); // an Int32 takes 4 bytes\n  var view = new DataView(arr);\n  view.setUint32(0, num, false); // byteOffset = 0; litteEndian = false\n  return Buffer.from(arr);\n};\nexports.intToBytes = intToBytes;\nvar isURType = function isURType(type) {\n  return type.split('').every(function (_, index) {\n    var c = type.charCodeAt(index);\n    if ('a'.charCodeAt(0) <= c && c <= 'z'.charCodeAt(0)) return true;\n    if ('0'.charCodeAt(0) <= c && c <= '9'.charCodeAt(0)) return true;\n    if (c === '-'.charCodeAt(0)) return true;\n    return false;\n  });\n};\nexports.isURType = isURType;\nvar hasPrefix = function hasPrefix(s, prefix) {\n  return s.indexOf(prefix) === 0;\n};\nexports.hasPrefix = hasPrefix;\nvar arraysEqual = function arraysEqual(ar1, ar2) {\n  if (ar1.length !== ar2.length) {\n    return false;\n  }\n  return ar1.every(function (el) {\n    return ar2.includes(el);\n  });\n};\nexports.arraysEqual = arraysEqual;\n/**\n * Checks if ar1 contains all elements of ar2\n * @param ar1 the outer array\n * @param ar2 the array to be contained in ar1\n */\nvar arrayContains = function arrayContains(ar1, ar2) {\n  return ar2.every(function (v) {\n    return ar1.includes(v);\n  });\n};\nexports.arrayContains = arrayContains;\n/**\n * Returns the difference array of  `ar1` - `ar2`\n */\nvar setDifference = function setDifference(ar1, ar2) {\n  return ar1.filter(function (x) {\n    return ar2.indexOf(x) < 0;\n  });\n};\nexports.setDifference = setDifference;\nvar bufferXOR = function bufferXOR(a, b) {\n  var length = Math.max(a.length, b.length);\n  var buffer = Buffer.allocUnsafe(length);\n  for (var i = 0; i < length; ++i) {\n    buffer[i] = a[i] ^ b[i];\n  }\n  return buffer;\n};\nexports.bufferXOR = bufferXOR;","map":{"version":3,"mappings":"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","names":["sha256Hash","data","sha_js_1","update","digest","exports","partition","s","n","match","RegExp","split","length","slice","getCRC","message","crc_1","getCRCHex","toString","padStart","toUint32","number","intToBytes","num","arr","ArrayBuffer","view","DataView","setUint32","Buffer","from","isURType","type","every","_","index","c","charCodeAt","hasPrefix","prefix","indexOf","arraysEqual","ar1","ar2","includes","el","arrayContains","v","setDifference","filter","x","bufferXOR","a","b","Math","max","buffer","allocUnsafe","i"],"sources":["/Users/ivan/Metadata/node_modules/@ngraveio/bc-ur/src/utils.ts"],"sourcesContent":["import shajs from 'sha.js';\nimport { crc32 } from 'crc';\n\nexport const sha256Hash = (data: Buffer | string) => shajs('sha256').update(data).digest();\n\nexport const partition = (s: string, n: number): string[] => s.match(new RegExp('.{1,' + n + '}', 'g')) || [s];\n\nexport const split = (s: Buffer, length: number): [Buffer, Buffer] => [s.slice(0, -length), s.slice(-length)]\n\nexport const getCRC = (message: Buffer): number => crc32(message);\n\nexport const getCRCHex = (message: Buffer): string => crc32(message).toString(16).padStart(8, '0');\n\nexport const toUint32 = (number: number): number => number >>> 0;\n\nexport const intToBytes = (num: number): Buffer => {\n  const arr = new ArrayBuffer(4); // an Int32 takes 4 bytes\n  const view = new DataView(arr);\n\n  view.setUint32(0, num, false); // byteOffset = 0; litteEndian = false\n\n  return Buffer.from(arr);\n}\n\nexport const isURType = (type: string): boolean => {\n  return type.split('').every((_, index) => {\n    let c = type.charCodeAt(index);\n\n    if ('a'.charCodeAt(0) <= c && c <= 'z'.charCodeAt(0)) return true;\n    if ('0'.charCodeAt(0) <= c && c <= '9'.charCodeAt(0)) return true;\n    if (c === '-'.charCodeAt(0)) return true;\n    return false;\n  })\n}\n\nexport const hasPrefix = (s: string, prefix: string): boolean => s.indexOf(prefix) === 0;\n\nexport const arraysEqual = (ar1: any[], ar2: any[]): boolean => {\n  if (ar1.length !== ar2.length) {\n    return false;\n  }\n\n  return ar1.every(el => ar2.includes(el))\n}\n\n/**\n * Checks if ar1 contains all elements of ar2\n * @param ar1 the outer array\n * @param ar2 the array to be contained in ar1\n */\nexport const arrayContains = (ar1: any[], ar2: any[]): boolean => {\n  return ar2.every(v => ar1.includes(v))\n}\n\n/**\n * Returns the difference array of  `ar1` - `ar2`\n */\nexport const setDifference = (ar1: any[], ar2: any[]): any[] => {\n  return ar1.filter(x => ar2.indexOf(x) < 0)\n}\n\nexport const bufferXOR = (a: Buffer, b: Buffer): Buffer => {\n  const length = Math.max(a.length, b.length);\n  const buffer = Buffer.allocUnsafe(length);\n\n  for (let i = 0; i < length; ++i) {\n    buffer[i] = a[i] ^ b[i];\n  }\n\n  return buffer;\n}"]},"metadata":{},"sourceType":"script","externalDependencies":[]}