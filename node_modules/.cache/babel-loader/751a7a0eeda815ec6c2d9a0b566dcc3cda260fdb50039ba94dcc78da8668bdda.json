{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"/Users/ivan/Metadata/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\").default;\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createMint = void 0;\nvar web3_js_1 = require(\"@solana/web3.js\");\nvar constants_js_1 = require(\"../constants.js\");\nvar initializeMint2_js_1 = require(\"../instructions/initializeMint2.js\");\nvar mint_js_1 = require(\"../state/mint.js\");\n/**\n * Create and initialize a new mint\n *\n * @param connection      Connection to use\n * @param payer           Payer of the transaction and initialization fees\n * @param mintAuthority   Account or multisig that will control minting\n * @param freezeAuthority Optional account or multisig that can freeze token accounts\n * @param decimals        Location of the decimal place\n * @param keypair         Optional keypair, defaulting to a new random one\n * @param confirmOptions  Options for confirming the transaction\n * @param programId       SPL Token program account\n *\n * @return Address of the new mint\n */\nfunction createMint(connection, payer, mintAuthority, freezeAuthority, decimals) {\n  var keypair = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : web3_js_1.Keypair.generate();\n  var confirmOptions = arguments.length > 6 ? arguments[6] : undefined;\n  var programId = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : constants_js_1.TOKEN_PROGRAM_ID;\n  return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n    var lamports, transaction;\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return (0, mint_js_1.getMinimumBalanceForRentExemptMint)(connection);\n          case 2:\n            lamports = _context.sent;\n            transaction = new web3_js_1.Transaction().add(web3_js_1.SystemProgram.createAccount({\n              fromPubkey: payer.publicKey,\n              newAccountPubkey: keypair.publicKey,\n              space: mint_js_1.MINT_SIZE,\n              lamports: lamports,\n              programId: programId\n            }), (0, initializeMint2_js_1.createInitializeMint2Instruction)(keypair.publicKey, decimals, mintAuthority, freezeAuthority, programId));\n            _context.next = 6;\n            return (0, web3_js_1.sendAndConfirmTransaction)(connection, transaction, [payer, keypair], confirmOptions);\n          case 6:\n            return _context.abrupt(\"return\", keypair.publicKey);\n          case 7:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n}\nexports.createMint = createMint;","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;;;;;;AAcA,SAAsBA,UAAU,CAC5BC,UAAsB,EACtBC,KAAa,EACbC,aAAwB,EACxBC,eAAiC,EACjCC,QAAgB,EAGY;EAAA,IAF5BC,OAAO,uEAAGC,iBAAO,CAACC,QAAQ,EAAE;EAAA,IAC5BC,cAA+B;EAAA,IAC/BC,SAAS,uEAAGC,+BAAgB;;;;;;;;YAEX,OAAM,gDAAkC,EAACV,UAAU,CAAC;UAAA;YAA/DW,QAAQ;YAERC,WAAW,GAAG,IAAIN,qBAAW,EAAE,CAACO,GAAG,CACrCP,uBAAa,CAACQ,aAAa,CAAC;cACxBC,UAAU,EAAEd,KAAK,CAACe,SAAS;cAC3BC,gBAAgB,EAAEZ,OAAO,CAACW,SAAS;cACnCE,KAAK,EAAEC,mBAAS;cAChBR,QAAQ,EAARA,QAAQ;cACRF,SAAS,EAATA;aACH,CAAC,EACF,yDAAgC,EAACJ,OAAO,CAACW,SAAS,EAAEZ,QAAQ,EAAEF,aAAa,EAAEC,eAAe,EAAEM,SAAS,CAAC,CAC3G;YAAA;YAED,OAAM,uCAAyB,EAACT,UAAU,EAAEY,WAAW,EAAE,CAACX,KAAK,EAAEI,OAAO,CAAC,EAAEG,cAAc,CAAC;UAAA;YAAA,iCAEnFH,OAAO,CAACW,SAAS;UAAA;UAAA;YAAA;QAAA;MAAA;IAAA;EAAA,CAC3B;;AA1BDI","names":["createMint","connection","payer","mintAuthority","freezeAuthority","decimals","keypair","web3_js_1","generate","confirmOptions","programId","constants_js_1","lamports","transaction","add","createAccount","fromPubkey","publicKey","newAccountPubkey","space","mint_js_1","exports"],"sources":["/Users/ivan/Metadata/node_modules/@solana/spl-token/src/actions/createMint.ts"],"sourcesContent":["import type { ConfirmOptions, Connection, PublicKey, Signer } from '@solana/web3.js';\nimport { Keypair, sendAndConfirmTransaction, SystemProgram, Transaction } from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID } from '../constants.js';\nimport { createInitializeMint2Instruction } from '../instructions/initializeMint2.js';\nimport { getMinimumBalanceForRentExemptMint, MINT_SIZE } from '../state/mint.js';\n\n/**\n * Create and initialize a new mint\n *\n * @param connection      Connection to use\n * @param payer           Payer of the transaction and initialization fees\n * @param mintAuthority   Account or multisig that will control minting\n * @param freezeAuthority Optional account or multisig that can freeze token accounts\n * @param decimals        Location of the decimal place\n * @param keypair         Optional keypair, defaulting to a new random one\n * @param confirmOptions  Options for confirming the transaction\n * @param programId       SPL Token program account\n *\n * @return Address of the new mint\n */\nexport async function createMint(\n    connection: Connection,\n    payer: Signer,\n    mintAuthority: PublicKey,\n    freezeAuthority: PublicKey | null,\n    decimals: number,\n    keypair = Keypair.generate(),\n    confirmOptions?: ConfirmOptions,\n    programId = TOKEN_PROGRAM_ID\n): Promise<PublicKey> {\n    const lamports = await getMinimumBalanceForRentExemptMint(connection);\n\n    const transaction = new Transaction().add(\n        SystemProgram.createAccount({\n            fromPubkey: payer.publicKey,\n            newAccountPubkey: keypair.publicKey,\n            space: MINT_SIZE,\n            lamports,\n            programId,\n        }),\n        createInitializeMint2Instruction(keypair.publicKey, decimals, mintAuthority, freezeAuthority, programId)\n    );\n\n    await sendAndConfirmTransaction(connection, transaction, [payer, keypair], confirmOptions);\n\n    return keypair.publicKey;\n}\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}