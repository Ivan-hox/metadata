{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getAccountLenForMint = exports.getExtensionTypes = exports.getExtensionData = exports.getAccountLen = exports.getMintLen = exports.getAccountTypeOfMintType = exports.getTypeLen = exports.LENGTH_SIZE = exports.TYPE_SIZE = exports.ExtensionType = void 0;\nvar account_js_1 = require(\"../state/account.js\");\nvar mint_js_1 = require(\"../state/mint.js\");\nvar multisig_js_1 = require(\"../state/multisig.js\");\nvar accountType_js_1 = require(\"./accountType.js\");\nvar index_js_1 = require(\"./defaultAccountState/index.js\");\nvar immutableOwner_js_1 = require(\"./immutableOwner.js\");\nvar state_js_1 = require(\"./interestBearingMint/state.js\");\nvar index_js_2 = require(\"./memoTransfer/index.js\");\nvar mintCloseAuthority_js_1 = require(\"./mintCloseAuthority.js\");\nvar nonTransferable_js_1 = require(\"./nonTransferable.js\");\nvar index_js_3 = require(\"./transferFee/index.js\");\nvar ExtensionType;\n(function (ExtensionType) {\n  ExtensionType[ExtensionType[\"Uninitialized\"] = 0] = \"Uninitialized\";\n  ExtensionType[ExtensionType[\"TransferFeeConfig\"] = 1] = \"TransferFeeConfig\";\n  ExtensionType[ExtensionType[\"TransferFeeAmount\"] = 2] = \"TransferFeeAmount\";\n  ExtensionType[ExtensionType[\"MintCloseAuthority\"] = 3] = \"MintCloseAuthority\";\n  ExtensionType[ExtensionType[\"ConfidentialTransferMint\"] = 4] = \"ConfidentialTransferMint\";\n  ExtensionType[ExtensionType[\"ConfidentialTransferAccount\"] = 5] = \"ConfidentialTransferAccount\";\n  ExtensionType[ExtensionType[\"DefaultAccountState\"] = 6] = \"DefaultAccountState\";\n  ExtensionType[ExtensionType[\"ImmutableOwner\"] = 7] = \"ImmutableOwner\";\n  ExtensionType[ExtensionType[\"MemoTransfer\"] = 8] = \"MemoTransfer\";\n  ExtensionType[ExtensionType[\"NonTransferable\"] = 9] = \"NonTransferable\";\n  ExtensionType[ExtensionType[\"InterestBearingMint\"] = 10] = \"InterestBearingMint\";\n})(ExtensionType = exports.ExtensionType || (exports.ExtensionType = {}));\nexports.TYPE_SIZE = 2;\nexports.LENGTH_SIZE = 2;\n// NOTE: All of these should eventually use their type's Span instead of these\n// constants.  This is provided for at least creation to work.\nfunction getTypeLen(e) {\n  switch (e) {\n    case ExtensionType.Uninitialized:\n      return 0;\n    case ExtensionType.TransferFeeConfig:\n      return index_js_3.TRANSFER_FEE_CONFIG_SIZE;\n    case ExtensionType.TransferFeeAmount:\n      return index_js_3.TRANSFER_FEE_AMOUNT_SIZE;\n    case ExtensionType.MintCloseAuthority:\n      return mintCloseAuthority_js_1.MINT_CLOSE_AUTHORITY_SIZE;\n    case ExtensionType.ConfidentialTransferMint:\n      return 97;\n    case ExtensionType.ConfidentialTransferAccount:\n      return 286;\n    case ExtensionType.DefaultAccountState:\n      return index_js_1.DEFAULT_ACCOUNT_STATE_SIZE;\n    case ExtensionType.ImmutableOwner:\n      return immutableOwner_js_1.IMMUTABLE_OWNER_SIZE;\n    case ExtensionType.MemoTransfer:\n      return index_js_2.MEMO_TRANSFER_SIZE;\n    case ExtensionType.NonTransferable:\n      return nonTransferable_js_1.NON_TRANSFERABLE_SIZE;\n    case ExtensionType.InterestBearingMint:\n      return state_js_1.INTEREST_BEARING_MINT_CONFIG_STATE_SIZE;\n    default:\n      throw Error(\"Unknown extension type: \".concat(e));\n  }\n}\nexports.getTypeLen = getTypeLen;\nfunction getAccountTypeOfMintType(e) {\n  switch (e) {\n    case ExtensionType.TransferFeeConfig:\n      return ExtensionType.TransferFeeAmount;\n    case ExtensionType.ConfidentialTransferMint:\n      return ExtensionType.ConfidentialTransferAccount;\n    case ExtensionType.TransferFeeAmount:\n    case ExtensionType.ConfidentialTransferAccount:\n    case ExtensionType.DefaultAccountState:\n    case ExtensionType.ImmutableOwner:\n    case ExtensionType.MemoTransfer:\n    case ExtensionType.MintCloseAuthority:\n    case ExtensionType.NonTransferable:\n    case ExtensionType.Uninitialized:\n    case ExtensionType.InterestBearingMint:\n      return ExtensionType.Uninitialized;\n  }\n}\nexports.getAccountTypeOfMintType = getAccountTypeOfMintType;\nfunction getLen(extensionTypes, baseSize) {\n  if (extensionTypes.length === 0) {\n    return baseSize;\n  } else {\n    var accountLength = account_js_1.ACCOUNT_SIZE + accountType_js_1.ACCOUNT_TYPE_SIZE + extensionTypes.filter(function (element, i) {\n      return i === extensionTypes.indexOf(element);\n    }).map(function (element) {\n      return getTypeLen(element) + exports.TYPE_SIZE + exports.LENGTH_SIZE;\n    }).reduce(function (a, b) {\n      return a + b;\n    });\n    if (accountLength === multisig_js_1.MULTISIG_SIZE) {\n      return accountLength + exports.TYPE_SIZE;\n    } else {\n      return accountLength;\n    }\n  }\n}\nfunction getMintLen(extensionTypes) {\n  return getLen(extensionTypes, mint_js_1.MINT_SIZE);\n}\nexports.getMintLen = getMintLen;\nfunction getAccountLen(extensionTypes) {\n  return getLen(extensionTypes, account_js_1.ACCOUNT_SIZE);\n}\nexports.getAccountLen = getAccountLen;\nfunction getExtensionData(extension, tlvData) {\n  var extensionTypeIndex = 0;\n  while (extensionTypeIndex < tlvData.length) {\n    var entryType = tlvData.readUInt16LE(extensionTypeIndex);\n    var entryLength = tlvData.readUInt16LE(extensionTypeIndex + exports.TYPE_SIZE);\n    var typeIndex = extensionTypeIndex + exports.TYPE_SIZE + exports.LENGTH_SIZE;\n    if (entryType == extension) {\n      return tlvData.slice(typeIndex, typeIndex + entryLength);\n    }\n    extensionTypeIndex = typeIndex + entryLength;\n  }\n  return null;\n}\nexports.getExtensionData = getExtensionData;\nfunction getExtensionTypes(tlvData) {\n  var extensionTypes = [];\n  var extensionTypeIndex = 0;\n  while (extensionTypeIndex < tlvData.length) {\n    var entryType = tlvData.readUInt16LE(extensionTypeIndex);\n    extensionTypes.push(entryType);\n    var entryLength = tlvData.readUInt16LE(extensionTypeIndex + exports.TYPE_SIZE);\n    extensionTypeIndex += exports.TYPE_SIZE + exports.LENGTH_SIZE + entryLength;\n  }\n  return extensionTypes;\n}\nexports.getExtensionTypes = getExtensionTypes;\nfunction getAccountLenForMint(mint) {\n  var extensionTypes = getExtensionTypes(mint.tlvData);\n  var accountExtensions = extensionTypes.map(getAccountTypeOfMintType);\n  return getAccountLen(accountExtensions);\n}\nexports.getAccountLenForMint = getAccountLenForMint;","map":{"version":3,"mappings":"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","names":["ExtensionType","exports","getTypeLen","e","Uninitialized","TransferFeeConfig","index_js_3","TransferFeeAmount","MintCloseAuthority","mintCloseAuthority_js_1","ConfidentialTransferMint","ConfidentialTransferAccount","DefaultAccountState","index_js_1","ImmutableOwner","immutableOwner_js_1","MemoTransfer","index_js_2","NonTransferable","nonTransferable_js_1","InterestBearingMint","state_js_1","Error","getAccountTypeOfMintType","getLen","extensionTypes","baseSize","length","accountLength","account_js_1","accountType_js_1","filter","element","i","indexOf","map","reduce","a","b","multisig_js_1","getMintLen","mint_js_1","getAccountLen","getExtensionData","extension","tlvData","extensionTypeIndex","entryType","readUInt16LE","entryLength","typeIndex","slice","getExtensionTypes","push","getAccountLenForMint","mint","accountExtensions"],"sources":["/Users/ivan/Metadata/node_modules/@solana/spl-token/src/extensions/extensionType.ts"],"sourcesContent":["import { ACCOUNT_SIZE } from '../state/account.js';\nimport type { Mint } from '../state/mint.js';\nimport { MINT_SIZE } from '../state/mint.js';\nimport { MULTISIG_SIZE } from '../state/multisig.js';\nimport { ACCOUNT_TYPE_SIZE } from './accountType.js';\nimport { DEFAULT_ACCOUNT_STATE_SIZE } from './defaultAccountState/index.js';\nimport { IMMUTABLE_OWNER_SIZE } from './immutableOwner.js';\nimport { INTEREST_BEARING_MINT_CONFIG_STATE_SIZE } from './interestBearingMint/state.js';\nimport { MEMO_TRANSFER_SIZE } from './memoTransfer/index.js';\nimport { MINT_CLOSE_AUTHORITY_SIZE } from './mintCloseAuthority.js';\nimport { NON_TRANSFERABLE_SIZE } from './nonTransferable.js';\nimport { TRANSFER_FEE_AMOUNT_SIZE, TRANSFER_FEE_CONFIG_SIZE } from './transferFee/index.js';\n\nexport enum ExtensionType {\n    Uninitialized,\n    TransferFeeConfig,\n    TransferFeeAmount,\n    MintCloseAuthority,\n    ConfidentialTransferMint,\n    ConfidentialTransferAccount,\n    DefaultAccountState,\n    ImmutableOwner,\n    MemoTransfer,\n    NonTransferable,\n    InterestBearingMint,\n}\n\nexport const TYPE_SIZE = 2;\nexport const LENGTH_SIZE = 2;\n\n// NOTE: All of these should eventually use their type's Span instead of these\n// constants.  This is provided for at least creation to work.\nexport function getTypeLen(e: ExtensionType): number {\n    switch (e) {\n        case ExtensionType.Uninitialized:\n            return 0;\n        case ExtensionType.TransferFeeConfig:\n            return TRANSFER_FEE_CONFIG_SIZE;\n        case ExtensionType.TransferFeeAmount:\n            return TRANSFER_FEE_AMOUNT_SIZE;\n        case ExtensionType.MintCloseAuthority:\n            return MINT_CLOSE_AUTHORITY_SIZE;\n        case ExtensionType.ConfidentialTransferMint:\n            return 97;\n        case ExtensionType.ConfidentialTransferAccount:\n            return 286;\n        case ExtensionType.DefaultAccountState:\n            return DEFAULT_ACCOUNT_STATE_SIZE;\n        case ExtensionType.ImmutableOwner:\n            return IMMUTABLE_OWNER_SIZE;\n        case ExtensionType.MemoTransfer:\n            return MEMO_TRANSFER_SIZE;\n        case ExtensionType.NonTransferable:\n            return NON_TRANSFERABLE_SIZE;\n        case ExtensionType.InterestBearingMint:\n            return INTEREST_BEARING_MINT_CONFIG_STATE_SIZE;\n        default:\n            throw Error(`Unknown extension type: ${e}`);\n    }\n}\n\nexport function getAccountTypeOfMintType(e: ExtensionType): ExtensionType {\n    switch (e) {\n        case ExtensionType.TransferFeeConfig:\n            return ExtensionType.TransferFeeAmount;\n        case ExtensionType.ConfidentialTransferMint:\n            return ExtensionType.ConfidentialTransferAccount;\n        case ExtensionType.TransferFeeAmount:\n        case ExtensionType.ConfidentialTransferAccount:\n        case ExtensionType.DefaultAccountState:\n        case ExtensionType.ImmutableOwner:\n        case ExtensionType.MemoTransfer:\n        case ExtensionType.MintCloseAuthority:\n        case ExtensionType.NonTransferable:\n        case ExtensionType.Uninitialized:\n        case ExtensionType.InterestBearingMint:\n            return ExtensionType.Uninitialized;\n    }\n}\n\nfunction getLen(extensionTypes: ExtensionType[], baseSize: number): number {\n    if (extensionTypes.length === 0) {\n        return baseSize;\n    } else {\n        const accountLength =\n            ACCOUNT_SIZE +\n            ACCOUNT_TYPE_SIZE +\n            extensionTypes\n                .filter((element, i) => i === extensionTypes.indexOf(element))\n                .map((element) => getTypeLen(element) + TYPE_SIZE + LENGTH_SIZE)\n                .reduce((a, b) => a + b);\n        if (accountLength === MULTISIG_SIZE) {\n            return accountLength + TYPE_SIZE;\n        } else {\n            return accountLength;\n        }\n    }\n}\n\nexport function getMintLen(extensionTypes: ExtensionType[]): number {\n    return getLen(extensionTypes, MINT_SIZE);\n}\n\nexport function getAccountLen(extensionTypes: ExtensionType[]): number {\n    return getLen(extensionTypes, ACCOUNT_SIZE);\n}\n\nexport function getExtensionData(extension: ExtensionType, tlvData: Buffer): Buffer | null {\n    let extensionTypeIndex = 0;\n    while (extensionTypeIndex < tlvData.length) {\n        const entryType = tlvData.readUInt16LE(extensionTypeIndex);\n        const entryLength = tlvData.readUInt16LE(extensionTypeIndex + TYPE_SIZE);\n        const typeIndex = extensionTypeIndex + TYPE_SIZE + LENGTH_SIZE;\n        if (entryType == extension) {\n            return tlvData.slice(typeIndex, typeIndex + entryLength);\n        }\n        extensionTypeIndex = typeIndex + entryLength;\n    }\n    return null;\n}\n\nexport function getExtensionTypes(tlvData: Buffer): ExtensionType[] {\n    const extensionTypes = [];\n    let extensionTypeIndex = 0;\n    while (extensionTypeIndex < tlvData.length) {\n        const entryType = tlvData.readUInt16LE(extensionTypeIndex);\n        extensionTypes.push(entryType);\n        const entryLength = tlvData.readUInt16LE(extensionTypeIndex + TYPE_SIZE);\n        extensionTypeIndex += TYPE_SIZE + LENGTH_SIZE + entryLength;\n    }\n    return extensionTypes;\n}\n\nexport function getAccountLenForMint(mint: Mint): number {\n    const extensionTypes = getExtensionTypes(mint.tlvData);\n    const accountExtensions = extensionTypes.map(getAccountTypeOfMintType);\n    return getAccountLen(accountExtensions);\n}\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}