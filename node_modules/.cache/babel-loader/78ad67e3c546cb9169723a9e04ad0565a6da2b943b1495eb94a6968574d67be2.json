{"ast":null,"code":"import _slicedToArray from \"/Users/ivan/Metadata/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport { struct, u8 } from '@solana/buffer-layout';\nimport { u64 } from '@solana/buffer-layout-utils';\nimport { TransactionInstruction } from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID } from '../constants.js';\nimport { TokenInvalidInstructionDataError, TokenInvalidInstructionKeysError, TokenInvalidInstructionProgramError, TokenInvalidInstructionTypeError } from '../errors.js';\nimport { TokenInstruction } from './types.js';\n/** TODO: docs */\nexport var amountToUiAmountInstructionData = struct([u8('instruction'), u64('amount')]);\n/**\n * Construct a AmountToUiAmount instruction\n *\n * @param mint         Public key of the mint\n * @param amount       Amount of tokens to be converted to UiAmount\n * @param programId    SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\nexport function createAmountToUiAmountInstruction(mint, amount) {\n  var programId = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : TOKEN_PROGRAM_ID;\n  var keys = [{\n    pubkey: mint,\n    isSigner: false,\n    isWritable: false\n  }];\n  var data = Buffer.alloc(amountToUiAmountInstructionData.span);\n  amountToUiAmountInstructionData.encode({\n    instruction: TokenInstruction.AmountToUiAmount,\n    amount: BigInt(amount)\n  }, data);\n  return new TransactionInstruction({\n    keys: keys,\n    programId: programId,\n    data: data\n  });\n}\n/**\n * Decode a AmountToUiAmount instruction and validate it\n *\n * @param instruction Transaction instruction to decode\n * @param programId   SPL Token program account\n *\n * @return Decoded, valid instruction\n */\nexport function decodeAmountToUiAmountInstruction(instruction) {\n  var programId = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : TOKEN_PROGRAM_ID;\n  if (!instruction.programId.equals(programId)) throw new TokenInvalidInstructionProgramError();\n  if (instruction.data.length !== amountToUiAmountInstructionData.span) throw new TokenInvalidInstructionDataError();\n  var _decodeAmountToUiAmou = decodeAmountToUiAmountInstructionUnchecked(instruction),\n    mint = _decodeAmountToUiAmou.keys.mint,\n    data = _decodeAmountToUiAmou.data;\n  if (data.instruction !== TokenInstruction.AmountToUiAmount) throw new TokenInvalidInstructionTypeError();\n  if (!mint) throw new TokenInvalidInstructionKeysError();\n  return {\n    programId: programId,\n    keys: {\n      mint: mint\n    },\n    data: data\n  };\n}\n/**\n * Decode a AmountToUiAmount instruction without validating it\n *\n * @param instruction Transaction instruction to decode\n *\n * @return Decoded, non-validated instruction\n */\nexport function decodeAmountToUiAmountInstructionUnchecked(_ref) {\n  var programId = _ref.programId,\n    _ref$keys = _slicedToArray(_ref.keys, 1),\n    mint = _ref$keys[0],\n    data = _ref.data;\n  return {\n    programId: programId,\n    keys: {\n      mint: mint\n    },\n    data: amountToUiAmountInstructionData.decode(data)\n  };\n}","map":{"version":3,"mappings":";AAAA,SAASA,MAAM,EAAEC,EAAE,QAAQ,uBAAuB;AAClD,SAASC,GAAG,QAAQ,6BAA6B;AAEjD,SAASC,sBAAsB,QAAQ,iBAAiB;AACxD,SAASC,gBAAgB,QAAQ,iBAAiB;AAClD,SACIC,gCAAgC,EAChCC,gCAAgC,EAChCC,mCAAmC,EACnCC,gCAAgC,QAC7B,cAAc;AACrB,SAASC,gBAAgB,QAAQ,YAAY;AAQ7C;AACA,OAAO,IAAMC,+BAA+B,GAAGV,MAAM,CAAkC,CACnFC,EAAE,CAAC,aAAa,CAAC,EACjBC,GAAG,CAAC,QAAQ,CAAC,CAChB,CAAC;AAEF;;;;;;;;;AASA,OAAM,SAAUS,iCAAiC,CAC7CC,IAAe,EACfC,MAAuB,EACK;EAAA,IAA5BC,SAAS,uEAAGV,gBAAgB;EAE5B,IAAMW,IAAI,GAAG,CAAC;IAAEC,MAAM,EAAEJ,IAAI;IAAEK,QAAQ,EAAE,KAAK;IAAEC,UAAU,EAAE;EAAK,CAAE,CAAC;EAEnE,IAAMC,IAAI,GAAGC,MAAM,CAACC,KAAK,CAACX,+BAA+B,CAACY,IAAI,CAAC;EAC/DZ,+BAA+B,CAACa,MAAM,CAClC;IACIC,WAAW,EAAEf,gBAAgB,CAACgB,gBAAgB;IAC9CZ,MAAM,EAAEa,MAAM,CAACb,MAAM;GACxB,EACDM,IAAI,CACP;EAED,OAAO,IAAIhB,sBAAsB,CAAC;IAAEY,IAAI,EAAJA,IAAI;IAAED,SAAS,EAATA,SAAS;IAAEK,IAAI,EAAJA;EAAI,CAAE,CAAC;AAChE;AAcA;;;;;;;;AAQA,OAAM,SAAUQ,iCAAiC,CAC7CH,WAAmC,EACP;EAAA,IAA5BV,SAAS,uEAAGV,gBAAgB;EAE5B,IAAI,CAACoB,WAAW,CAACV,SAAS,CAACc,MAAM,CAACd,SAAS,CAAC,EAAE,MAAM,IAAIP,mCAAmC,EAAE;EAC7F,IAAIiB,WAAW,CAACL,IAAI,CAACU,MAAM,KAAKnB,+BAA+B,CAACY,IAAI,EAAE,MAAM,IAAIjB,gCAAgC,EAAE;EAElH,4BAGIyB,0CAA0C,CAACN,WAAW,CAAC;IAF/CZ,IAAI,yBAAZG,IAAI,CAAIH,IAAI;IACZO,IAAI,yBAAJA,IAAI;EAER,IAAIA,IAAI,CAACK,WAAW,KAAKf,gBAAgB,CAACgB,gBAAgB,EAAE,MAAM,IAAIjB,gCAAgC,EAAE;EACxG,IAAI,CAACI,IAAI,EAAE,MAAM,IAAIN,gCAAgC,EAAE;EAEvD,OAAO;IACHQ,SAAS,EAATA,SAAS;IACTC,IAAI,EAAE;MACFH,IAAI,EAAJA;KACH;IACDO,IAAI,EAAJA;GACH;AACL;AAcA;;;;;;;AAOA,OAAM,SAAUW,0CAA0C,OAIjC;EAAA,IAHrBhB,SAAS,QAATA,SAAS;IAAA,gCACTC,IAAI;IAAGH,IAAI;IACXO,IAAI,QAAJA,IAAI;EAEJ,OAAO;IACHL,SAAS,EAATA,SAAS;IACTC,IAAI,EAAE;MACFH,IAAI,EAAJA;KACH;IACDO,IAAI,EAAET,+BAA+B,CAACqB,MAAM,CAACZ,IAAI;GACpD;AACL","names":["struct","u8","u64","TransactionInstruction","TOKEN_PROGRAM_ID","TokenInvalidInstructionDataError","TokenInvalidInstructionKeysError","TokenInvalidInstructionProgramError","TokenInvalidInstructionTypeError","TokenInstruction","amountToUiAmountInstructionData","createAmountToUiAmountInstruction","mint","amount","programId","keys","pubkey","isSigner","isWritable","data","Buffer","alloc","span","encode","instruction","AmountToUiAmount","BigInt","decodeAmountToUiAmountInstruction","equals","length","decodeAmountToUiAmountInstructionUnchecked","decode"],"sources":["/Users/ivan/Metadata/node_modules/@solana/spl-token/src/instructions/amountToUiAmount.ts"],"sourcesContent":["import { struct, u8 } from '@solana/buffer-layout';\nimport { u64 } from '@solana/buffer-layout-utils';\nimport type { AccountMeta, PublicKey } from '@solana/web3.js';\nimport { TransactionInstruction } from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID } from '../constants.js';\nimport {\n    TokenInvalidInstructionDataError,\n    TokenInvalidInstructionKeysError,\n    TokenInvalidInstructionProgramError,\n    TokenInvalidInstructionTypeError,\n} from '../errors.js';\nimport { TokenInstruction } from './types.js';\n\n/** TODO: docs */\nexport interface AmountToUiAmountInstructionData {\n    instruction: TokenInstruction.AmountToUiAmount;\n    amount: bigint;\n}\n\n/** TODO: docs */\nexport const amountToUiAmountInstructionData = struct<AmountToUiAmountInstructionData>([\n    u8('instruction'),\n    u64('amount'),\n]);\n\n/**\n * Construct a AmountToUiAmount instruction\n *\n * @param mint         Public key of the mint\n * @param amount       Amount of tokens to be converted to UiAmount\n * @param programId    SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\nexport function createAmountToUiAmountInstruction(\n    mint: PublicKey,\n    amount: number | bigint,\n    programId = TOKEN_PROGRAM_ID\n): TransactionInstruction {\n    const keys = [{ pubkey: mint, isSigner: false, isWritable: false }];\n\n    const data = Buffer.alloc(amountToUiAmountInstructionData.span);\n    amountToUiAmountInstructionData.encode(\n        {\n            instruction: TokenInstruction.AmountToUiAmount,\n            amount: BigInt(amount),\n        },\n        data\n    );\n\n    return new TransactionInstruction({ keys, programId, data });\n}\n\n/** A decoded, valid AmountToUiAmount instruction */\nexport interface DecodedAmountToUiAmountInstruction {\n    programId: PublicKey;\n    keys: {\n        mint: AccountMeta;\n    };\n    data: {\n        instruction: TokenInstruction.AmountToUiAmount;\n        amount: bigint;\n    };\n}\n\n/**\n * Decode a AmountToUiAmount instruction and validate it\n *\n * @param instruction Transaction instruction to decode\n * @param programId   SPL Token program account\n *\n * @return Decoded, valid instruction\n */\nexport function decodeAmountToUiAmountInstruction(\n    instruction: TransactionInstruction,\n    programId = TOKEN_PROGRAM_ID\n): DecodedAmountToUiAmountInstruction {\n    if (!instruction.programId.equals(programId)) throw new TokenInvalidInstructionProgramError();\n    if (instruction.data.length !== amountToUiAmountInstructionData.span) throw new TokenInvalidInstructionDataError();\n\n    const {\n        keys: { mint },\n        data,\n    } = decodeAmountToUiAmountInstructionUnchecked(instruction);\n    if (data.instruction !== TokenInstruction.AmountToUiAmount) throw new TokenInvalidInstructionTypeError();\n    if (!mint) throw new TokenInvalidInstructionKeysError();\n\n    return {\n        programId,\n        keys: {\n            mint,\n        },\n        data,\n    };\n}\n\n/** A decoded, non-validated AmountToUiAmount instruction */\nexport interface DecodedAmountToUiAmountInstructionUnchecked {\n    programId: PublicKey;\n    keys: {\n        mint: AccountMeta | undefined;\n    };\n    data: {\n        instruction: number;\n        amount: bigint;\n    };\n}\n\n/**\n * Decode a AmountToUiAmount instruction without validating it\n *\n * @param instruction Transaction instruction to decode\n *\n * @return Decoded, non-validated instruction\n */\nexport function decodeAmountToUiAmountInstructionUnchecked({\n    programId,\n    keys: [mint],\n    data,\n}: TransactionInstruction): DecodedAmountToUiAmountInstructionUnchecked {\n    return {\n        programId,\n        keys: {\n            mint,\n        },\n        data: amountToUiAmountInstructionData.decode(data),\n    };\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}