{"ast":null,"code":"import _regeneratorRuntime from \"/Users/ivan/Metadata/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"/Users/ivan/Metadata/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { sendAndConfirmTransaction, SystemProgram, Transaction } from '@solana/web3.js';\nimport { ASSOCIATED_TOKEN_PROGRAM_ID, NATIVE_MINT, TOKEN_PROGRAM_ID } from '../constants.js';\nimport { createAssociatedTokenAccountInstruction } from '../instructions/associatedTokenAccount.js';\nimport { createInitializeAccountInstruction } from '../instructions/initializeAccount.js';\nimport { createSyncNativeInstruction } from '../instructions/syncNative.js';\nimport { ACCOUNT_SIZE, getMinimumBalanceForRentExemptAccount } from '../state/account.js';\nimport { getAssociatedTokenAddress } from '../state/mint.js';\nimport { createAccount } from './createAccount.js';\n/**\n * Create, initialize, and fund a new wrapped native SOL account\n *\n * @param connection     Connection to use\n * @param payer          Payer of the transaction and initialization fees\n * @param owner          Owner of the new token account\n * @param amount         Number of lamports to wrap\n * @param keypair        Optional keypair, defaulting to the associated token account for the native mint and `owner`\n * @param confirmOptions Options for confirming the transaction\n * @param programId      SPL Token program account\n *\n * @return Address of the new wrapped native SOL account\n */\nexport function createWrappedNativeAccount(_x, _x2, _x3, _x4, _x5, _x6) {\n  return _createWrappedNativeAccount.apply(this, arguments);\n}\nfunction _createWrappedNativeAccount() {\n  _createWrappedNativeAccount = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(connection, payer, owner, amount, keypair, confirmOptions) {\n    var programId,\n      nativeMint,\n      associatedToken,\n      _transaction,\n      lamports,\n      transaction,\n      _args = arguments;\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            programId = _args.length > 6 && _args[6] !== undefined ? _args[6] : TOKEN_PROGRAM_ID;\n            nativeMint = _args.length > 7 && _args[7] !== undefined ? _args[7] : NATIVE_MINT;\n            if (amount) {\n              _context.next = 6;\n              break;\n            }\n            _context.next = 5;\n            return createAccount(connection, payer, nativeMint, owner, keypair, confirmOptions, programId);\n          case 5:\n            return _context.abrupt(\"return\", _context.sent);\n          case 6:\n            if (keypair) {\n              _context.next = 14;\n              break;\n            }\n            _context.next = 9;\n            return getAssociatedTokenAddress(nativeMint, owner, false, programId, ASSOCIATED_TOKEN_PROGRAM_ID);\n          case 9:\n            associatedToken = _context.sent;\n            _transaction = new Transaction().add(createAssociatedTokenAccountInstruction(payer.publicKey, associatedToken, owner, nativeMint, programId, ASSOCIATED_TOKEN_PROGRAM_ID), SystemProgram.transfer({\n              fromPubkey: payer.publicKey,\n              toPubkey: associatedToken,\n              lamports: amount\n            }), createSyncNativeInstruction(associatedToken, programId));\n            _context.next = 13;\n            return sendAndConfirmTransaction(connection, _transaction, [payer], confirmOptions);\n          case 13:\n            return _context.abrupt(\"return\", associatedToken);\n          case 14:\n            _context.next = 16;\n            return getMinimumBalanceForRentExemptAccount(connection);\n          case 16:\n            lamports = _context.sent;\n            transaction = new Transaction().add(SystemProgram.createAccount({\n              fromPubkey: payer.publicKey,\n              newAccountPubkey: keypair.publicKey,\n              space: ACCOUNT_SIZE,\n              lamports: lamports,\n              programId: programId\n            }), SystemProgram.transfer({\n              fromPubkey: payer.publicKey,\n              toPubkey: keypair.publicKey,\n              lamports: amount\n            }), createInitializeAccountInstruction(keypair.publicKey, nativeMint, owner, programId));\n            _context.next = 20;\n            return sendAndConfirmTransaction(connection, transaction, [payer, keypair], confirmOptions);\n          case 20:\n            return _context.abrupt(\"return\", keypair.publicKey);\n          case 21:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _createWrappedNativeAccount.apply(this, arguments);\n}","map":{"version":3,"mappings":";;AACA,SAASA,yBAAyB,EAAEC,aAAa,EAAEC,WAAW,QAAQ,iBAAiB;AACvF,SAASC,2BAA2B,EAAEC,WAAW,EAAEC,gBAAgB,QAAQ,iBAAiB;AAC5F,SAASC,uCAAuC,QAAQ,2CAA2C;AACnG,SAASC,kCAAkC,QAAQ,sCAAsC;AACzF,SAASC,2BAA2B,QAAQ,+BAA+B;AAC3E,SAASC,YAAY,EAAEC,qCAAqC,QAAQ,qBAAqB;AACzF,SAASC,yBAAyB,QAAQ,kBAAkB;AAC5D,SAASC,aAAa,QAAQ,oBAAoB;AAElD;;;;;;;;;;;;;AAaA,gBAAsBC,0BAA0B;EAAA;AAAA;AAmE/C;EAAA,yFAnEM,iBACHC,UAAsB,EACtBC,KAAa,EACbC,KAAgB,EAChBC,MAAc,EACdC,OAAiB,EACjBC,cAA+B;IAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;IAAA;MAAA;QAAA;UAAA;YAC/BC,SAAS,2DAAGf,gBAAgB;YAC5BgB,UAAU,2DAAGjB,WAAW;YAAA,IAGnBa,MAAM;cAAA;cAAA;YAAA;YAAA;YAAA,OAAeL,aAAa,CAACE,UAAU,EAAEC,KAAK,EAAEM,UAAU,EAAEL,KAAK,EAAEE,OAAO,EAAEC,cAAc,EAAEC,SAAS,CAAC;UAAA;YAAA;UAAA;YAAA,IAG5GF,OAAO;cAAA;cAAA;YAAA;YAAA;YAAA,OACsBP,yBAAyB,CACnDU,UAAU,EACVL,KAAK,EACL,KAAK,EACLI,SAAS,EACTjB,2BAA2B,CAC9B;UAAA;YANKmB,eAAe;YAQfC,YAAW,GAAG,IAAIrB,WAAW,EAAE,CAACsB,GAAG,CACrClB,uCAAuC,CACnCS,KAAK,CAACU,SAAS,EACfH,eAAe,EACfN,KAAK,EACLK,UAAU,EACVD,SAAS,EACTjB,2BAA2B,CAC9B,EACDF,aAAa,CAACyB,QAAQ,CAAC;cACnBC,UAAU,EAAEZ,KAAK,CAACU,SAAS;cAC3BG,QAAQ,EAAEN,eAAe;cACzBO,QAAQ,EAAEZ;aACb,CAAC,EACFT,2BAA2B,CAACc,eAAe,EAAEF,SAAS,CAAC,CAC1D;YAAA;YAAA,OAEKpB,yBAAyB,CAACc,UAAU,EAAES,YAAW,EAAE,CAACR,KAAK,CAAC,EAAEI,cAAc,CAAC;UAAA;YAAA,iCAE1EG,eAAe;UAAA;YAAA;YAAA,OAIHZ,qCAAqC,CAACI,UAAU,CAAC;UAAA;YAAlEe,QAAQ;YAERN,WAAW,GAAG,IAAIrB,WAAW,EAAE,CAACsB,GAAG,CACrCvB,aAAa,CAACW,aAAa,CAAC;cACxBe,UAAU,EAAEZ,KAAK,CAACU,SAAS;cAC3BK,gBAAgB,EAAEZ,OAAO,CAACO,SAAS;cACnCM,KAAK,EAAEtB,YAAY;cACnBoB,QAAQ,EAARA,QAAQ;cACRT,SAAS,EAATA;aACH,CAAC,EACFnB,aAAa,CAACyB,QAAQ,CAAC;cACnBC,UAAU,EAAEZ,KAAK,CAACU,SAAS;cAC3BG,QAAQ,EAAEV,OAAO,CAACO,SAAS;cAC3BI,QAAQ,EAAEZ;aACb,CAAC,EACFV,kCAAkC,CAACW,OAAO,CAACO,SAAS,EAAEJ,UAAU,EAAEL,KAAK,EAAEI,SAAS,CAAC,CACtF;YAAA;YAAA,OAEKpB,yBAAyB,CAACc,UAAU,EAAES,WAAW,EAAE,CAACR,KAAK,EAAEG,OAAO,CAAC,EAAEC,cAAc,CAAC;UAAA;YAAA,iCAEnFD,OAAO,CAACO,SAAS;UAAA;UAAA;YAAA;QAAA;MAAA;IAAA;EAAA,CAC3B;EAAA;AAAA","names":["sendAndConfirmTransaction","SystemProgram","Transaction","ASSOCIATED_TOKEN_PROGRAM_ID","NATIVE_MINT","TOKEN_PROGRAM_ID","createAssociatedTokenAccountInstruction","createInitializeAccountInstruction","createSyncNativeInstruction","ACCOUNT_SIZE","getMinimumBalanceForRentExemptAccount","getAssociatedTokenAddress","createAccount","createWrappedNativeAccount","connection","payer","owner","amount","keypair","confirmOptions","programId","nativeMint","associatedToken","transaction","add","publicKey","transfer","fromPubkey","toPubkey","lamports","newAccountPubkey","space"],"sources":["/Users/ivan/Metadata/node_modules/@solana/spl-token/src/actions/createWrappedNativeAccount.ts"],"sourcesContent":["import type { ConfirmOptions, Connection, Keypair, PublicKey, Signer } from '@solana/web3.js';\nimport { sendAndConfirmTransaction, SystemProgram, Transaction } from '@solana/web3.js';\nimport { ASSOCIATED_TOKEN_PROGRAM_ID, NATIVE_MINT, TOKEN_PROGRAM_ID } from '../constants.js';\nimport { createAssociatedTokenAccountInstruction } from '../instructions/associatedTokenAccount.js';\nimport { createInitializeAccountInstruction } from '../instructions/initializeAccount.js';\nimport { createSyncNativeInstruction } from '../instructions/syncNative.js';\nimport { ACCOUNT_SIZE, getMinimumBalanceForRentExemptAccount } from '../state/account.js';\nimport { getAssociatedTokenAddress } from '../state/mint.js';\nimport { createAccount } from './createAccount.js';\n\n/**\n * Create, initialize, and fund a new wrapped native SOL account\n *\n * @param connection     Connection to use\n * @param payer          Payer of the transaction and initialization fees\n * @param owner          Owner of the new token account\n * @param amount         Number of lamports to wrap\n * @param keypair        Optional keypair, defaulting to the associated token account for the native mint and `owner`\n * @param confirmOptions Options for confirming the transaction\n * @param programId      SPL Token program account\n *\n * @return Address of the new wrapped native SOL account\n */\nexport async function createWrappedNativeAccount(\n    connection: Connection,\n    payer: Signer,\n    owner: PublicKey,\n    amount: number,\n    keypair?: Keypair,\n    confirmOptions?: ConfirmOptions,\n    programId = TOKEN_PROGRAM_ID,\n    nativeMint = NATIVE_MINT\n): Promise<PublicKey> {\n    // If the amount provided is explicitly 0 or NaN, just create the account without funding it\n    if (!amount) return await createAccount(connection, payer, nativeMint, owner, keypair, confirmOptions, programId);\n\n    // If a keypair isn't provided, create the account at the owner's ATA for the native mint and return its address\n    if (!keypair) {\n        const associatedToken = await getAssociatedTokenAddress(\n            nativeMint,\n            owner,\n            false,\n            programId,\n            ASSOCIATED_TOKEN_PROGRAM_ID\n        );\n\n        const transaction = new Transaction().add(\n            createAssociatedTokenAccountInstruction(\n                payer.publicKey,\n                associatedToken,\n                owner,\n                nativeMint,\n                programId,\n                ASSOCIATED_TOKEN_PROGRAM_ID\n            ),\n            SystemProgram.transfer({\n                fromPubkey: payer.publicKey,\n                toPubkey: associatedToken,\n                lamports: amount,\n            }),\n            createSyncNativeInstruction(associatedToken, programId)\n        );\n\n        await sendAndConfirmTransaction(connection, transaction, [payer], confirmOptions);\n\n        return associatedToken;\n    }\n\n    // Otherwise, create the account with the provided keypair and return its public key\n    const lamports = await getMinimumBalanceForRentExemptAccount(connection);\n\n    const transaction = new Transaction().add(\n        SystemProgram.createAccount({\n            fromPubkey: payer.publicKey,\n            newAccountPubkey: keypair.publicKey,\n            space: ACCOUNT_SIZE,\n            lamports,\n            programId,\n        }),\n        SystemProgram.transfer({\n            fromPubkey: payer.publicKey,\n            toPubkey: keypair.publicKey,\n            lamports: amount,\n        }),\n        createInitializeAccountInstruction(keypair.publicKey, nativeMint, owner, programId)\n    );\n\n    await sendAndConfirmTransaction(connection, transaction, [payer, keypair], confirmOptions);\n\n    return keypair.publicKey;\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}