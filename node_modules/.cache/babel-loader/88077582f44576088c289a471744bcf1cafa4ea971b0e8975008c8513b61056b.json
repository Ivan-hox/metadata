{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.stringTypeMap = exports.utf8String = exports.fixedSizeUtf8String = void 0;\nvar types_1 = require(\"../types\");\nvar assert_1 = require(\"assert\");\nvar numbers_1 = require(\"./numbers\");\nvar utils_1 = require(\"../utils\");\n/**\n * De/Serializes a UTF8 string of a particular size.\n *\n * @param stringByteLength the number of bytes of the string\n *\n * @category beet/collection\n */\nvar fixedSizeUtf8String = function fixedSizeUtf8String(stringByteLength) {\n  return {\n    write: function write(buf, offset, value) {\n      var stringBuf = Buffer.from(value, 'utf8');\n      assert_1.strict.equal(stringBuf.byteLength, stringByteLength, \"\".concat(value, \" has invalid byte size\"));\n      numbers_1.u32.write(buf, offset, stringByteLength);\n      stringBuf.copy(buf, offset + 4, 0, stringByteLength);\n    },\n    read: function read(buf, offset) {\n      var size = numbers_1.u32.read(buf, offset);\n      assert_1.strict.equal(size, stringByteLength, \"invalid byte size\");\n      var stringSlice = buf.slice(offset + 4, offset + 4 + stringByteLength);\n      return stringSlice.toString('utf8');\n    },\n    elementByteSize: 1,\n    length: stringByteLength,\n    lenPrefixByteSize: 4,\n    byteSize: 4 + stringByteLength,\n    description: \"Utf8String(4 + \".concat(stringByteLength, \")\")\n  };\n};\nexports.fixedSizeUtf8String = fixedSizeUtf8String;\n/**\n * De/Serializes a UTF8 string of any size.\n *\n * @category beet/collection\n */\nexports.utf8String = {\n  toFixedFromData: function toFixedFromData(buf, offset) {\n    var len = numbers_1.u32.read(buf, offset);\n    (0, utils_1.logTrace)(\"\".concat(this.description, \"[\").concat(len, \"]\"));\n    return (0, exports.fixedSizeUtf8String)(len);\n  },\n  toFixedFromValue: function toFixedFromValue(val) {\n    var len = Buffer.from(val).byteLength;\n    return (0, exports.fixedSizeUtf8String)(len);\n  },\n  description: \"Utf8String\"\n};\n/**\n * Maps string beet exports to metadata which describes in which package it\n * is defined as well as which TypeScript type is used to represent the\n * deserialized value in JavaScript.\n *\n * @category TypeDefinition\n */\nexports.stringTypeMap = {\n  fixedSizeString: {\n    beet: 'fixedSizeUtf8String',\n    isFixable: false,\n    sourcePack: types_1.BEET_PACKAGE,\n    ts: 'string',\n    arg: types_1.BEET_TYPE_ARG_LEN\n  },\n  string: {\n    beet: 'utf8String',\n    isFixable: true,\n    sourcePack: types_1.BEET_PACKAGE,\n    ts: 'string'\n  }\n};","map":{"version":3,"mappings":";;;;;;AAAA;AAOA;AACA;AACA;AAEA;;;;;;;AAOO,IAAMA,mBAAmB,GAEK,SAFxBA,mBAAmB,CAEMC,gBAAwB,EAAI;EAChE,OAAO;IACLC,KAAK,EAAE,eAAUC,GAAW,EAAEC,MAAc,EAAEC,KAAa;MACzD,IAAMC,SAAS,GAAGC,MAAM,CAACC,IAAI,CAACH,KAAK,EAAE,MAAM,CAAC;MAC5CI,eAAM,CAACC,KAAK,CACVJ,SAAS,CAACK,UAAU,EACpBV,gBAAgB,YACbI,KAAK,4BACT;MACDO,aAAG,CAACV,KAAK,CAACC,GAAG,EAAEC,MAAM,EAAEH,gBAAgB,CAAC;MACxCK,SAAS,CAACO,IAAI,CAACV,GAAG,EAAEC,MAAM,GAAG,CAAC,EAAE,CAAC,EAAEH,gBAAgB,CAAC;IACtD,CAAC;IAEDa,IAAI,EAAE,cAAUX,GAAW,EAAEC,MAAc;MACzC,IAAMW,IAAI,GAAGH,aAAG,CAACE,IAAI,CAACX,GAAG,EAAEC,MAAM,CAAC;MAClCK,eAAM,CAACC,KAAK,CAACK,IAAI,EAAEd,gBAAgB,sBAAsB;MACzD,IAAMe,WAAW,GAAGb,GAAG,CAACc,KAAK,CAACb,MAAM,GAAG,CAAC,EAAEA,MAAM,GAAG,CAAC,GAAGH,gBAAgB,CAAC;MACxE,OAAOe,WAAW,CAACE,QAAQ,CAAC,MAAM,CAAC;IACrC,CAAC;IACDC,eAAe,EAAE,CAAC;IAClBC,MAAM,EAAEnB,gBAAgB;IACxBoB,iBAAiB,EAAE,CAAC;IACpBC,QAAQ,EAAE,CAAC,GAAGrB,gBAAgB;IAC9BsB,WAAW,2BAAoBtB,gBAAgB;GAChD;AACH,CAAC;AA3BYuB,2BAAmB;AA6BhC;;;;;AAKaA,kBAAU,GAAgC;EACrDC,eAAe,2BAACtB,GAAW,EAAEC,MAAc;IACzC,IAAMsB,GAAG,GAAGd,aAAG,CAACE,IAAI,CAACX,GAAG,EAAEC,MAAM,CAAC;IACjC,oBAAQ,YAAI,IAAI,CAACmB,WAAW,cAAIG,GAAG,OAAI;IACvC,OAAO,+BAAmB,EAACA,GAAG,CAAC;EACjC,CAAC;EAEDC,gBAAgB,4BAACC,GAAW;IAC1B,IAAMF,GAAG,GAAGnB,MAAM,CAACC,IAAI,CAACoB,GAAG,CAAC,CAACjB,UAAU;IACvC,OAAO,+BAAmB,EAACe,GAAG,CAAC;EACjC,CAAC;EAEDH,WAAW;CACZ;AAkBD;;;;;;;AAOaC,qBAAa,GAAkB;EAC1CK,eAAe,EAAE;IACfC,IAAI,EAAE,qBAAqB;IAC3BC,SAAS,EAAE,KAAK;IAChBC,UAAU,EAAEC,oBAAY;IACxBC,EAAE,EAAE,QAAQ;IACZC,GAAG,EAAEF;GACN;EACDG,MAAM,EAAE;IACNN,IAAI,EAAE,YAAY;IAClBC,SAAS,EAAE,IAAI;IACfC,UAAU,EAAEC,oBAAY;IACxBC,EAAE,EAAE;;CAEP","names":["fixedSizeUtf8String","stringByteLength","write","buf","offset","value","stringBuf","Buffer","from","assert_1","equal","byteLength","numbers_1","copy","read","size","stringSlice","slice","toString","elementByteSize","length","lenPrefixByteSize","byteSize","description","exports","toFixedFromData","len","toFixedFromValue","val","fixedSizeString","beet","isFixable","sourcePack","types_1","ts","arg","string"],"sources":["../../../../src/beets/string.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script","externalDependencies":[]}