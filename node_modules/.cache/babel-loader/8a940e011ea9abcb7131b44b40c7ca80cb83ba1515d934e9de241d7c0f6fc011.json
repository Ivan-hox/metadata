{"ast":null,"code":"import _toArray from \"/Users/ivan/Metadata/node_modules/@babel/runtime/helpers/esm/toArray.js\";\nimport { struct, u8 } from '@solana/buffer-layout';\nimport { u64 } from '@solana/buffer-layout-utils';\nimport { TransactionInstruction } from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID } from '../constants.js';\nimport { TokenInvalidInstructionDataError, TokenInvalidInstructionKeysError, TokenInvalidInstructionProgramError, TokenInvalidInstructionTypeError } from '../errors.js';\nimport { addSigners } from './internal.js';\nimport { TokenInstruction } from './types.js';\n/** TODO: docs */\nexport var mintToInstructionData = struct([u8('instruction'), u64('amount')]);\n/**\n * Construct a MintTo instruction\n *\n * @param mint         Public key of the mint\n * @param destination  Address of the token account to mint to\n * @param authority    The mint authority\n * @param amount       Amount to mint\n * @param multiSigners Signing accounts if `authority` is a multisig\n * @param programId    SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\nexport function createMintToInstruction(mint, destination, authority, amount) {\n  var multiSigners = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : [];\n  var programId = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : TOKEN_PROGRAM_ID;\n  var keys = addSigners([{\n    pubkey: mint,\n    isSigner: false,\n    isWritable: true\n  }, {\n    pubkey: destination,\n    isSigner: false,\n    isWritable: true\n  }], authority, multiSigners);\n  var data = Buffer.alloc(mintToInstructionData.span);\n  mintToInstructionData.encode({\n    instruction: TokenInstruction.MintTo,\n    amount: BigInt(amount)\n  }, data);\n  return new TransactionInstruction({\n    keys: keys,\n    programId: programId,\n    data: data\n  });\n}\n/**\n * Decode a MintTo instruction and validate it\n *\n * @param instruction Transaction instruction to decode\n * @param programId   SPL Token program account\n *\n * @return Decoded, valid instruction\n */\nexport function decodeMintToInstruction(instruction) {\n  var programId = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : TOKEN_PROGRAM_ID;\n  if (!instruction.programId.equals(programId)) throw new TokenInvalidInstructionProgramError();\n  if (instruction.data.length !== mintToInstructionData.span) throw new TokenInvalidInstructionDataError();\n  var _decodeMintToInstruct = decodeMintToInstructionUnchecked(instruction),\n    _decodeMintToInstruct2 = _decodeMintToInstruct.keys,\n    mint = _decodeMintToInstruct2.mint,\n    destination = _decodeMintToInstruct2.destination,\n    authority = _decodeMintToInstruct2.authority,\n    multiSigners = _decodeMintToInstruct2.multiSigners,\n    data = _decodeMintToInstruct.data;\n  if (data.instruction !== TokenInstruction.MintTo) throw new TokenInvalidInstructionTypeError();\n  if (!mint || !destination || !authority) throw new TokenInvalidInstructionKeysError();\n  // TODO: key checks?\n  return {\n    programId: programId,\n    keys: {\n      mint: mint,\n      destination: destination,\n      authority: authority,\n      multiSigners: multiSigners\n    },\n    data: data\n  };\n}\n/**\n * Decode a MintTo instruction without validating it\n *\n * @param instruction Transaction instruction to decode\n *\n * @return Decoded, non-validated instruction\n */\nexport function decodeMintToInstructionUnchecked(_ref) {\n  var programId = _ref.programId,\n    _ref$keys = _toArray(_ref.keys),\n    mint = _ref$keys[0],\n    destination = _ref$keys[1],\n    authority = _ref$keys[2],\n    multiSigners = _ref$keys.slice(3),\n    data = _ref.data;\n  return {\n    programId: programId,\n    keys: {\n      mint: mint,\n      destination: destination,\n      authority: authority,\n      multiSigners: multiSigners\n    },\n    data: mintToInstructionData.decode(data)\n  };\n}","map":{"version":3,"mappings":"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","names":["struct","u8","u64","TransactionInstruction","TOKEN_PROGRAM_ID","TokenInvalidInstructionDataError","TokenInvalidInstructionKeysError","TokenInvalidInstructionProgramError","TokenInvalidInstructionTypeError","addSigners","TokenInstruction","mintToInstructionData","createMintToInstruction","mint","destination","authority","amount","multiSigners","programId","keys","pubkey","isSigner","isWritable","data","Buffer","alloc","span","encode","instruction","MintTo","BigInt","decodeMintToInstruction","equals","length","decodeMintToInstructionUnchecked","decode"],"sources":["/Users/ivan/Metadata/node_modules/@solana/spl-token/src/instructions/mintTo.ts"],"sourcesContent":["import { struct, u8 } from '@solana/buffer-layout';\nimport { u64 } from '@solana/buffer-layout-utils';\nimport type { AccountMeta, PublicKey, Signer } from '@solana/web3.js';\nimport { TransactionInstruction } from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID } from '../constants.js';\nimport {\n    TokenInvalidInstructionDataError,\n    TokenInvalidInstructionKeysError,\n    TokenInvalidInstructionProgramError,\n    TokenInvalidInstructionTypeError,\n} from '../errors.js';\nimport { addSigners } from './internal.js';\nimport { TokenInstruction } from './types.js';\n\n/** TODO: docs */\nexport interface MintToInstructionData {\n    instruction: TokenInstruction.MintTo;\n    amount: bigint;\n}\n\n/** TODO: docs */\nexport const mintToInstructionData = struct<MintToInstructionData>([u8('instruction'), u64('amount')]);\n\n/**\n * Construct a MintTo instruction\n *\n * @param mint         Public key of the mint\n * @param destination  Address of the token account to mint to\n * @param authority    The mint authority\n * @param amount       Amount to mint\n * @param multiSigners Signing accounts if `authority` is a multisig\n * @param programId    SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\nexport function createMintToInstruction(\n    mint: PublicKey,\n    destination: PublicKey,\n    authority: PublicKey,\n    amount: number | bigint,\n    multiSigners: Signer[] = [],\n    programId = TOKEN_PROGRAM_ID\n): TransactionInstruction {\n    const keys = addSigners(\n        [\n            { pubkey: mint, isSigner: false, isWritable: true },\n            { pubkey: destination, isSigner: false, isWritable: true },\n        ],\n        authority,\n        multiSigners\n    );\n\n    const data = Buffer.alloc(mintToInstructionData.span);\n    mintToInstructionData.encode(\n        {\n            instruction: TokenInstruction.MintTo,\n            amount: BigInt(amount),\n        },\n        data\n    );\n\n    return new TransactionInstruction({ keys, programId, data });\n}\n\n/** A decoded, valid MintTo instruction */\nexport interface DecodedMintToInstruction {\n    programId: PublicKey;\n    keys: {\n        mint: AccountMeta;\n        destination: AccountMeta;\n        authority: AccountMeta;\n        multiSigners: AccountMeta[];\n    };\n    data: {\n        instruction: TokenInstruction.MintTo;\n        amount: bigint;\n    };\n}\n\n/**\n * Decode a MintTo instruction and validate it\n *\n * @param instruction Transaction instruction to decode\n * @param programId   SPL Token program account\n *\n * @return Decoded, valid instruction\n */\nexport function decodeMintToInstruction(\n    instruction: TransactionInstruction,\n    programId = TOKEN_PROGRAM_ID\n): DecodedMintToInstruction {\n    if (!instruction.programId.equals(programId)) throw new TokenInvalidInstructionProgramError();\n    if (instruction.data.length !== mintToInstructionData.span) throw new TokenInvalidInstructionDataError();\n\n    const {\n        keys: { mint, destination, authority, multiSigners },\n        data,\n    } = decodeMintToInstructionUnchecked(instruction);\n    if (data.instruction !== TokenInstruction.MintTo) throw new TokenInvalidInstructionTypeError();\n    if (!mint || !destination || !authority) throw new TokenInvalidInstructionKeysError();\n\n    // TODO: key checks?\n\n    return {\n        programId,\n        keys: {\n            mint,\n            destination,\n            authority,\n            multiSigners,\n        },\n        data,\n    };\n}\n\n/** A decoded, non-validated MintTo instruction */\nexport interface DecodedMintToInstructionUnchecked {\n    programId: PublicKey;\n    keys: {\n        mint: AccountMeta | undefined;\n        destination: AccountMeta | undefined;\n        authority: AccountMeta | undefined;\n        multiSigners: AccountMeta[];\n    };\n    data: {\n        instruction: number;\n        amount: bigint;\n    };\n}\n\n/**\n * Decode a MintTo instruction without validating it\n *\n * @param instruction Transaction instruction to decode\n *\n * @return Decoded, non-validated instruction\n */\nexport function decodeMintToInstructionUnchecked({\n    programId,\n    keys: [mint, destination, authority, ...multiSigners],\n    data,\n}: TransactionInstruction): DecodedMintToInstructionUnchecked {\n    return {\n        programId,\n        keys: {\n            mint,\n            destination,\n            authority,\n            multiSigners,\n        },\n        data: mintToInstructionData.decode(data),\n    };\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}