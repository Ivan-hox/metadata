{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"/Users/ivan/Metadata/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\").default;\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createWrappedNativeAccount = void 0;\nvar web3_js_1 = require(\"@solana/web3.js\");\nvar constants_js_1 = require(\"../constants.js\");\nvar associatedTokenAccount_js_1 = require(\"../instructions/associatedTokenAccount.js\");\nvar initializeAccount_js_1 = require(\"../instructions/initializeAccount.js\");\nvar syncNative_js_1 = require(\"../instructions/syncNative.js\");\nvar account_js_1 = require(\"../state/account.js\");\nvar mint_js_1 = require(\"../state/mint.js\");\nvar createAccount_js_1 = require(\"./createAccount.js\");\n/**\n * Create, initialize, and fund a new wrapped native SOL account\n *\n * @param connection     Connection to use\n * @param payer          Payer of the transaction and initialization fees\n * @param owner          Owner of the new token account\n * @param amount         Number of lamports to wrap\n * @param keypair        Optional keypair, defaulting to the associated token account for the native mint and `owner`\n * @param confirmOptions Options for confirming the transaction\n * @param programId      SPL Token program account\n *\n * @return Address of the new wrapped native SOL account\n */\nfunction createWrappedNativeAccount(connection, payer, owner, amount, keypair, confirmOptions) {\n  var programId = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : constants_js_1.TOKEN_PROGRAM_ID;\n  var nativeMint = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : constants_js_1.NATIVE_MINT;\n  return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n    var associatedToken, _transaction, lamports, transaction;\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (amount) {\n              _context.next = 4;\n              break;\n            }\n            _context.next = 3;\n            return (0, createAccount_js_1.createAccount)(connection, payer, nativeMint, owner, keypair, confirmOptions, programId);\n          case 3:\n            return _context.abrupt(\"return\", _context.sent);\n          case 4:\n            if (keypair) {\n              _context.next = 12;\n              break;\n            }\n            _context.next = 7;\n            return (0, mint_js_1.getAssociatedTokenAddress)(nativeMint, owner, false, programId, constants_js_1.ASSOCIATED_TOKEN_PROGRAM_ID);\n          case 7:\n            associatedToken = _context.sent;\n            _transaction = new web3_js_1.Transaction().add((0, associatedTokenAccount_js_1.createAssociatedTokenAccountInstruction)(payer.publicKey, associatedToken, owner, nativeMint, programId, constants_js_1.ASSOCIATED_TOKEN_PROGRAM_ID), web3_js_1.SystemProgram.transfer({\n              fromPubkey: payer.publicKey,\n              toPubkey: associatedToken,\n              lamports: amount\n            }), (0, syncNative_js_1.createSyncNativeInstruction)(associatedToken, programId));\n            _context.next = 11;\n            return (0, web3_js_1.sendAndConfirmTransaction)(connection, _transaction, [payer], confirmOptions);\n          case 11:\n            return _context.abrupt(\"return\", associatedToken);\n          case 12:\n            _context.next = 14;\n            return (0, account_js_1.getMinimumBalanceForRentExemptAccount)(connection);\n          case 14:\n            lamports = _context.sent;\n            transaction = new web3_js_1.Transaction().add(web3_js_1.SystemProgram.createAccount({\n              fromPubkey: payer.publicKey,\n              newAccountPubkey: keypair.publicKey,\n              space: account_js_1.ACCOUNT_SIZE,\n              lamports: lamports,\n              programId: programId\n            }), web3_js_1.SystemProgram.transfer({\n              fromPubkey: payer.publicKey,\n              toPubkey: keypair.publicKey,\n              lamports: amount\n            }), (0, initializeAccount_js_1.createInitializeAccountInstruction)(keypair.publicKey, nativeMint, owner, programId));\n            _context.next = 18;\n            return (0, web3_js_1.sendAndConfirmTransaction)(connection, transaction, [payer, keypair], confirmOptions);\n          case 18:\n            return _context.abrupt(\"return\", keypair.publicKey);\n          case 19:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n}\nexports.createWrappedNativeAccount = createWrappedNativeAccount;","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;;;;;AAaA,SAAsBA,0BAA0B,CAC5CC,UAAsB,EACtBC,KAAa,EACbC,KAAgB,EAChBC,MAAc,EACdC,OAAiB,EACjBC,cAA+B,EAEP;EAAA,IADxBC,SAAS,uEAAGC,+BAAgB;EAAA,IAC5BC,UAAU,uEAAGD,0BAAW;;;;;;;gBAGnBJ,MAAM;cAAA;cAAA;YAAA;YAAA;YAAS,OAAM,oCAAa,EAACH,UAAU,EAAEC,KAAK,EAAEO,UAAU,EAAEN,KAAK,EAAEE,OAAO,EAAEC,cAAc,EAAEC,SAAS,CAAC;UAAA;YAAA;UAAA;YAAA,IAG5GF,OAAO;cAAA;cAAA;YAAA;YAAA;YACgB,OAAM,uCAAyB,EACnDI,UAAU,EACVN,KAAK,EACL,KAAK,EACLI,SAAS,EACTC,0CAA2B,CAC9B;UAAA;YANKE,eAAe;YAQfC,YAAW,GAAG,IAAIC,qBAAW,EAAE,CAACC,GAAG,CACrC,uEAAuC,EACnCX,KAAK,CAACY,SAAS,EACfJ,eAAe,EACfP,KAAK,EACLM,UAAU,EACVF,SAAS,EACTC,0CAA2B,CAC9B,EACDI,uBAAa,CAACG,QAAQ,CAAC;cACnBC,UAAU,EAAEd,KAAK,CAACY,SAAS;cAC3BG,QAAQ,EAAEP,eAAe;cACzBQ,QAAQ,EAAEd;aACb,CAAC,EACF,+CAA2B,EAACM,eAAe,EAAEH,SAAS,CAAC,CAC1D;YAAA;YAED,OAAM,uCAAyB,EAACN,UAAU,EAAEU,YAAW,EAAE,CAACT,KAAK,CAAC,EAAEI,cAAc,CAAC;UAAA;YAAA,iCAE1EI,eAAe;UAAA;YAAA;YAIT,OAAM,sDAAqC,EAACT,UAAU,CAAC;UAAA;YAAlEiB,QAAQ;YAERP,WAAW,GAAG,IAAIC,qBAAW,EAAE,CAACC,GAAG,CACrCD,uBAAa,CAACO,aAAa,CAAC;cACxBH,UAAU,EAAEd,KAAK,CAACY,SAAS;cAC3BM,gBAAgB,EAAEf,OAAO,CAACS,SAAS;cACnCO,KAAK,EAAEC,yBAAY;cACnBJ,QAAQ,EAARA,QAAQ;cACRX,SAAS,EAATA;aACH,CAAC,EACFK,uBAAa,CAACG,QAAQ,CAAC;cACnBC,UAAU,EAAEd,KAAK,CAACY,SAAS;cAC3BG,QAAQ,EAAEZ,OAAO,CAACS,SAAS;cAC3BI,QAAQ,EAAEd;aACb,CAAC,EACF,6DAAkC,EAACC,OAAO,CAACS,SAAS,EAAEL,UAAU,EAAEN,KAAK,EAAEI,SAAS,CAAC,CACtF;YAAA;YAED,OAAM,uCAAyB,EAACN,UAAU,EAAEU,WAAW,EAAE,CAACT,KAAK,EAAEG,OAAO,CAAC,EAAEC,cAAc,CAAC;UAAA;YAAA,iCAEnFD,OAAO,CAACS,SAAS;UAAA;UAAA;YAAA;QAAA;MAAA;IAAA;EAAA,CAC3B;;AAnEDS","names":["createWrappedNativeAccount","connection","payer","owner","amount","keypair","confirmOptions","programId","constants_js_1","nativeMint","associatedToken","transaction","web3_js_1","add","publicKey","transfer","fromPubkey","toPubkey","lamports","createAccount","newAccountPubkey","space","account_js_1","exports"],"sources":["/Users/ivan/Metadata/node_modules/@solana/spl-token/src/actions/createWrappedNativeAccount.ts"],"sourcesContent":["import type { ConfirmOptions, Connection, Keypair, PublicKey, Signer } from '@solana/web3.js';\nimport { sendAndConfirmTransaction, SystemProgram, Transaction } from '@solana/web3.js';\nimport { ASSOCIATED_TOKEN_PROGRAM_ID, NATIVE_MINT, TOKEN_PROGRAM_ID } from '../constants.js';\nimport { createAssociatedTokenAccountInstruction } from '../instructions/associatedTokenAccount.js';\nimport { createInitializeAccountInstruction } from '../instructions/initializeAccount.js';\nimport { createSyncNativeInstruction } from '../instructions/syncNative.js';\nimport { ACCOUNT_SIZE, getMinimumBalanceForRentExemptAccount } from '../state/account.js';\nimport { getAssociatedTokenAddress } from '../state/mint.js';\nimport { createAccount } from './createAccount.js';\n\n/**\n * Create, initialize, and fund a new wrapped native SOL account\n *\n * @param connection     Connection to use\n * @param payer          Payer of the transaction and initialization fees\n * @param owner          Owner of the new token account\n * @param amount         Number of lamports to wrap\n * @param keypair        Optional keypair, defaulting to the associated token account for the native mint and `owner`\n * @param confirmOptions Options for confirming the transaction\n * @param programId      SPL Token program account\n *\n * @return Address of the new wrapped native SOL account\n */\nexport async function createWrappedNativeAccount(\n    connection: Connection,\n    payer: Signer,\n    owner: PublicKey,\n    amount: number,\n    keypair?: Keypair,\n    confirmOptions?: ConfirmOptions,\n    programId = TOKEN_PROGRAM_ID,\n    nativeMint = NATIVE_MINT\n): Promise<PublicKey> {\n    // If the amount provided is explicitly 0 or NaN, just create the account without funding it\n    if (!amount) return await createAccount(connection, payer, nativeMint, owner, keypair, confirmOptions, programId);\n\n    // If a keypair isn't provided, create the account at the owner's ATA for the native mint and return its address\n    if (!keypair) {\n        const associatedToken = await getAssociatedTokenAddress(\n            nativeMint,\n            owner,\n            false,\n            programId,\n            ASSOCIATED_TOKEN_PROGRAM_ID\n        );\n\n        const transaction = new Transaction().add(\n            createAssociatedTokenAccountInstruction(\n                payer.publicKey,\n                associatedToken,\n                owner,\n                nativeMint,\n                programId,\n                ASSOCIATED_TOKEN_PROGRAM_ID\n            ),\n            SystemProgram.transfer({\n                fromPubkey: payer.publicKey,\n                toPubkey: associatedToken,\n                lamports: amount,\n            }),\n            createSyncNativeInstruction(associatedToken, programId)\n        );\n\n        await sendAndConfirmTransaction(connection, transaction, [payer], confirmOptions);\n\n        return associatedToken;\n    }\n\n    // Otherwise, create the account with the provided keypair and return its public key\n    const lamports = await getMinimumBalanceForRentExemptAccount(connection);\n\n    const transaction = new Transaction().add(\n        SystemProgram.createAccount({\n            fromPubkey: payer.publicKey,\n            newAccountPubkey: keypair.publicKey,\n            space: ACCOUNT_SIZE,\n            lamports,\n            programId,\n        }),\n        SystemProgram.transfer({\n            fromPubkey: payer.publicKey,\n            toPubkey: keypair.publicKey,\n            lamports: amount,\n        }),\n        createInitializeAccountInstruction(keypair.publicKey, nativeMint, owner, programId)\n    );\n\n    await sendAndConfirmTransaction(connection, transaction, [payer, keypair], confirmOptions);\n\n    return keypair.publicKey;\n}\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}