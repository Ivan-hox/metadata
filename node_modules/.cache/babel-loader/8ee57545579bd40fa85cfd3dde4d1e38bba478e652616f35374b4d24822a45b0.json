{"ast":null,"code":"import _regeneratorRuntime from \"/Users/ivan/Metadata/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _toConsumableArray from \"/Users/ivan/Metadata/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _slicedToArray from \"/Users/ivan/Metadata/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _asyncToGenerator from \"/Users/ivan/Metadata/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { sendAndConfirmTransaction, Transaction } from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID } from '../constants.js';\nimport { createApproveCheckedInstruction } from '../instructions/approveChecked.js';\nimport { getSigners } from './internal.js';\n/**\n * Approve a delegate to transfer up to a maximum number of tokens from an account, asserting the token mint and\n * decimals\n *\n * @param connection     Connection to use\n * @param payer          Payer of the transaction fees\n * @param account        Address of the account\n * @param delegate       Account authorized to perform a transfer tokens from the source account\n * @param owner          Owner of the source account\n * @param amount         Maximum number of tokens the delegate may transfer\n * @param decimals       Number of decimals in approve amount\n * @param multiSigners   Signing accounts if `owner` is a multisig\n * @param confirmOptions Options for confirming the transaction\n * @param programId      SPL Token program account\n *\n * @return Signature of the confirmed transaction\n */\nexport function approveChecked(_x, _x2, _x3, _x4, _x5, _x6, _x7, _x8) {\n  return _approveChecked.apply(this, arguments);\n}\nfunction _approveChecked() {\n  _approveChecked = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(connection, payer, mint, account, delegate, owner, amount, decimals) {\n    var multiSigners,\n      confirmOptions,\n      programId,\n      _getSigners,\n      _getSigners2,\n      ownerPublicKey,\n      signers,\n      transaction,\n      _args = arguments;\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            multiSigners = _args.length > 8 && _args[8] !== undefined ? _args[8] : [];\n            confirmOptions = _args.length > 9 ? _args[9] : undefined;\n            programId = _args.length > 10 && _args[10] !== undefined ? _args[10] : TOKEN_PROGRAM_ID;\n            _getSigners = getSigners(owner, multiSigners), _getSigners2 = _slicedToArray(_getSigners, 2), ownerPublicKey = _getSigners2[0], signers = _getSigners2[1];\n            transaction = new Transaction().add(createApproveCheckedInstruction(account, mint, delegate, ownerPublicKey, amount, decimals, multiSigners, programId));\n            _context.next = 7;\n            return sendAndConfirmTransaction(connection, transaction, [payer].concat(_toConsumableArray(signers)), confirmOptions);\n          case 7:\n            return _context.abrupt(\"return\", _context.sent);\n          case 8:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _approveChecked.apply(this, arguments);\n}","map":{"version":3,"mappings":";;;;AACA,SAASA,yBAAyB,EAAEC,WAAW,QAAQ,iBAAiB;AACxE,SAASC,gBAAgB,QAAQ,iBAAiB;AAClD,SAASC,+BAA+B,QAAQ,mCAAmC;AACnF,SAASC,UAAU,QAAQ,eAAe;AAE1C;;;;;;;;;;;;;;;;;AAiBA,gBAAsBC,cAAc;EAAA;AAAA;AA6BnC;EAAA,6EA7BM,iBACHC,UAAsB,EACtBC,KAAa,EACbC,IAAe,EACfC,OAAkB,EAClBC,QAAmB,EACnBC,KAAyB,EACzBC,MAAuB,EACvBC,QAAgB;IAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;IAAA;MAAA;QAAA;UAAA;YAChBC,uEAAyB,EAAE;YAC3BC,cAA+B;YAC/BC,SAAS,8DAAGd,gBAAgB;YAAA,cAEME,UAAU,CAACO,KAAK,EAAEG,YAAY,CAAC,iDAA1DG,cAAc,oBAAEC,OAAO;YAExBC,WAAW,GAAG,IAAIlB,WAAW,EAAE,CAACmB,GAAG,CACrCjB,+BAA+B,CAC3BM,OAAO,EACPD,IAAI,EACJE,QAAQ,EACRO,cAAc,EACdL,MAAM,EACNC,QAAQ,EACRC,YAAY,EACZE,SAAS,CACZ,CACJ;YAAA;YAAA,OAEYhB,yBAAyB,CAACM,UAAU,EAAEa,WAAW,GAAGZ,KAAK,4BAAKW,OAAO,IAAGH,cAAc,CAAC;UAAA;YAAA;UAAA;UAAA;YAAA;QAAA;MAAA;IAAA;EAAA,CACvG;EAAA;AAAA","names":["sendAndConfirmTransaction","Transaction","TOKEN_PROGRAM_ID","createApproveCheckedInstruction","getSigners","approveChecked","connection","payer","mint","account","delegate","owner","amount","decimals","multiSigners","confirmOptions","programId","ownerPublicKey","signers","transaction","add"],"sources":["/Users/ivan/Metadata/node_modules/@solana/spl-token/src/actions/approveChecked.ts"],"sourcesContent":["import type { ConfirmOptions, Connection, PublicKey, Signer, TransactionSignature } from '@solana/web3.js';\nimport { sendAndConfirmTransaction, Transaction } from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID } from '../constants.js';\nimport { createApproveCheckedInstruction } from '../instructions/approveChecked.js';\nimport { getSigners } from './internal.js';\n\n/**\n * Approve a delegate to transfer up to a maximum number of tokens from an account, asserting the token mint and\n * decimals\n *\n * @param connection     Connection to use\n * @param payer          Payer of the transaction fees\n * @param account        Address of the account\n * @param delegate       Account authorized to perform a transfer tokens from the source account\n * @param owner          Owner of the source account\n * @param amount         Maximum number of tokens the delegate may transfer\n * @param decimals       Number of decimals in approve amount\n * @param multiSigners   Signing accounts if `owner` is a multisig\n * @param confirmOptions Options for confirming the transaction\n * @param programId      SPL Token program account\n *\n * @return Signature of the confirmed transaction\n */\nexport async function approveChecked(\n    connection: Connection,\n    payer: Signer,\n    mint: PublicKey,\n    account: PublicKey,\n    delegate: PublicKey,\n    owner: Signer | PublicKey,\n    amount: number | bigint,\n    decimals: number,\n    multiSigners: Signer[] = [],\n    confirmOptions?: ConfirmOptions,\n    programId = TOKEN_PROGRAM_ID\n): Promise<TransactionSignature> {\n    const [ownerPublicKey, signers] = getSigners(owner, multiSigners);\n\n    const transaction = new Transaction().add(\n        createApproveCheckedInstruction(\n            account,\n            mint,\n            delegate,\n            ownerPublicKey,\n            amount,\n            decimals,\n            multiSigners,\n            programId\n        )\n    );\n\n    return await sendAndConfirmTransaction(connection, transaction, [payer, ...signers], confirmOptions);\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}