{"ast":null,"code":"import _createForOfIteratorHelper from \"/Users/ivan/Metadata/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _regeneratorRuntime from \"/Users/ivan/Metadata/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"/Users/ivan/Metadata/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _classCallCheck from \"/Users/ivan/Metadata/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/ivan/Metadata/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/Users/ivan/Metadata/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/ivan/Metadata/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport EventEmitter from 'eventemitter3';\nimport { WalletNotConnectedError } from './errors.js';\nexport { EventEmitter };\n/**\n * A wallet's readiness describes a series of states that the wallet can be in,\n * depending on what kind of wallet it is. An installable wallet (eg. a browser\n * extension like Phantom) might be `Installed` if we've found the Phantom API\n * in the global scope, or `NotDetected` otherwise. A loadable, zero-install\n * runtime (eg. Torus Wallet) might simply signal that it's `Loadable`. Use this\n * metadata to personalize the wallet list for each user (eg. to show their\n * installed wallets first).\n */\nexport var WalletReadyState;\n(function (WalletReadyState) {\n  /**\n   * User-installable wallets can typically be detected by scanning for an API\n   * that they've injected into the global context. If such an API is present,\n   * we consider the wallet to have been installed.\n   */\n  WalletReadyState[\"Installed\"] = \"Installed\";\n  WalletReadyState[\"NotDetected\"] = \"NotDetected\";\n  /**\n   * Loadable wallets are always available to you. Since you can load them at\n   * any time, it's meaningless to say that they have been detected.\n   */\n  WalletReadyState[\"Loadable\"] = \"Loadable\";\n  /**\n   * If a wallet is not supported on a given platform (eg. server-rendering, or\n   * mobile) then it will stay in the `Unsupported` state.\n   */\n  WalletReadyState[\"Unsupported\"] = \"Unsupported\";\n})(WalletReadyState || (WalletReadyState = {}));\nexport var BaseWalletAdapter = /*#__PURE__*/function (_EventEmitter) {\n  _inherits(BaseWalletAdapter, _EventEmitter);\n  var _super = _createSuper(BaseWalletAdapter);\n  function BaseWalletAdapter() {\n    _classCallCheck(this, BaseWalletAdapter);\n    return _super.apply(this, arguments);\n  }\n  _createClass(BaseWalletAdapter, [{\n    key: \"connected\",\n    get: function get() {\n      return !!this.publicKey;\n    }\n  }, {\n    key: \"prepareTransaction\",\n    value: function () {\n      var _prepareTransaction = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(transaction, connection) {\n        var options,\n          publicKey,\n          _args = arguments;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                options = _args.length > 2 && _args[2] !== undefined ? _args[2] : {};\n                publicKey = this.publicKey;\n                if (publicKey) {\n                  _context.next = 4;\n                  break;\n                }\n                throw new WalletNotConnectedError();\n              case 4:\n                transaction.feePayer = transaction.feePayer || publicKey;\n                _context.t0 = transaction.recentBlockhash;\n                if (_context.t0) {\n                  _context.next = 10;\n                  break;\n                }\n                _context.next = 9;\n                return connection.getLatestBlockhash({\n                  commitment: options.preflightCommitment,\n                  minContextSlot: options.minContextSlot\n                });\n              case 9:\n                _context.t0 = _context.sent.blockhash;\n              case 10:\n                transaction.recentBlockhash = _context.t0;\n                return _context.abrupt(\"return\", transaction);\n              case 12:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n      function prepareTransaction(_x, _x2) {\n        return _prepareTransaction.apply(this, arguments);\n      }\n      return prepareTransaction;\n    }()\n  }]);\n  return BaseWalletAdapter;\n}(EventEmitter);\nexport function scopePollingDetectionStrategy(detect) {\n  // Early return when server-side rendering\n  if (typeof window === 'undefined' || typeof document === 'undefined') return;\n  var disposers = [];\n  function detectAndDispose() {\n    var detected = detect();\n    if (detected) {\n      var _iterator = _createForOfIteratorHelper(disposers),\n        _step;\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var dispose = _step.value;\n          dispose();\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n    }\n  }\n  // Strategy #1: Try detecting every second.\n  var interval =\n  // TODO: #334 Replace with idle callback strategy.\n  setInterval(detectAndDispose, 1000);\n  disposers.push(function () {\n    return clearInterval(interval);\n  });\n  // Strategy #2: Detect as soon as the DOM becomes 'ready'/'interactive'.\n  if (\n  // Implies that `DOMContentLoaded` has not yet fired.\n  document.readyState === 'loading') {\n    document.addEventListener('DOMContentLoaded', detectAndDispose, {\n      once: true\n    });\n    disposers.push(function () {\n      return document.removeEventListener('DOMContentLoaded', detectAndDispose);\n    });\n  }\n  // Strategy #3: Detect after the `window` has fully loaded.\n  if (\n  // If the `complete` state has been reached, we're too late.\n  document.readyState !== 'complete') {\n    window.addEventListener('load', detectAndDispose, {\n      once: true\n    });\n    disposers.push(function () {\n      return window.removeEventListener('load', detectAndDispose);\n    });\n  }\n  // Strategy #4: Detect synchronously, now.\n  detectAndDispose();\n}","map":{"version":3,"mappings":";;;;;;;AACA,OAAOA,YAAY,MAAM,eAAe;AAExC,SAASC,uBAAuB,QAAQ,aAAa;AAGrD,SAASD,YAAY;AAuCrB;;;;;;;;;AASA,WAAYE,gBAkBX;AAlBD,WAAYA,gBAAgB;EACxB;;;;;EAKAA,2CAAuB;EACvBA,+CAA2B;EAC3B;;;;EAIAA,yCAAqB;EACrB;;;;EAIAA,+CAA2B;AAC/B,CAAC,EAlBWA,gBAAgB,KAAhBA,gBAAgB;AAoB5B,WAAsBC,iBAClB;EAAA;EAAA;EAAA;IAAA;IAAA;EAAA;EAAA;IAAA;IAAA,KAWA,eAAa;MACT,OAAO,CAAC,CAAC,IAAI,CAACC,SAAS;IAC3B;EAAC;IAAA;IAAA;MAAA,qFAWS,iBACNC,WAAwB,EACxBC,UAAsB;QAAA;UAAA;UAAA;QAAA;UAAA;YAAA;cAAA;gBACtBC,kEAAuB,EAAE;gBAEnBH,SAAS,GAAG,IAAI,CAACA,SAAS;gBAAA,IAC3BA,SAAS;kBAAA;kBAAA;gBAAA;gBAAA,MAAQ,IAAIH,uBAAuB,EAAE;cAAA;gBAEnDI,WAAW,CAACG,QAAQ,GAAGH,WAAW,CAACG,QAAQ,IAAIJ,SAAS;gBAAC,cAErDC,WAAW,CAACI,eAAe;gBAAA;kBAAA;kBAAA;gBAAA;gBAAA;gBAAA,OAEjBH,UAAU,CAACI,kBAAkB,CAAC;kBAChCC,UAAU,EAAEJ,OAAO,CAACK,mBAAmB;kBACvCC,cAAc,EAAEN,OAAO,CAACM;iBAC3B,CAAC;cAAA;gBAAA,4BACJC,SAAS;cAAA;gBAPfT,WAAW,CAACI,eAAe;gBAAA,iCASpBJ,WAAW;cAAA;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA,CACrB;MAAA;QAAA;MAAA;MAAA;IAAA;EAAA;EAAA;AAAA,EA3COL,YAAiC;AA8C7C,OAAM,SAAUe,6BAA6B,CAACC,MAAqB;EAC/D;EACA,IAAI,OAAOC,MAAM,KAAK,WAAW,IAAI,OAAOC,QAAQ,KAAK,WAAW,EAAE;EAEtE,IAAMC,SAAS,GAAmB,EAAE;EAEpC,SAASC,gBAAgB;IACrB,IAAMC,QAAQ,GAAGL,MAAM,EAAE;IACzB,IAAIK,QAAQ,EAAE;MAAA,2CACYF,SAAS;QAAA;MAAA;QAA/B,oDAAiC;UAAA,IAAtBG,OAAO;UACdA,OAAO,EAAE;;MACZ;QAAA;MAAA;QAAA;MAAA;;EAET;EAEA;EACA,IAAMC,QAAQ;EACV;EACAC,WAAW,CAACJ,gBAAgB,EAAE,IAAI,CAAC;EACvCD,SAAS,CAACM,IAAI,CAAC;IAAA,OAAMC,aAAa,CAACH,QAAQ,CAAC;EAAA,EAAC;EAE7C;EACA;EACI;EACAL,QAAQ,CAACS,UAAU,KAAK,SAAS,EACnC;IACET,QAAQ,CAACU,gBAAgB,CAAC,kBAAkB,EAAER,gBAAgB,EAAE;MAAES,IAAI,EAAE;IAAI,CAAE,CAAC;IAC/EV,SAAS,CAACM,IAAI,CAAC;MAAA,OAAMP,QAAQ,CAACY,mBAAmB,CAAC,kBAAkB,EAAEV,gBAAgB,CAAC;IAAA,EAAC;;EAG5F;EACA;EACI;EACAF,QAAQ,CAACS,UAAU,KAAK,UAAU,EACpC;IACEV,MAAM,CAACW,gBAAgB,CAAC,MAAM,EAAER,gBAAgB,EAAE;MAAES,IAAI,EAAE;IAAI,CAAE,CAAC;IACjEV,SAAS,CAACM,IAAI,CAAC;MAAA,OAAMR,MAAM,CAACa,mBAAmB,CAAC,MAAM,EAAEV,gBAAgB,CAAC;IAAA,EAAC;;EAG9E;EACAA,gBAAgB,EAAE;AACtB","names":["EventEmitter","WalletNotConnectedError","WalletReadyState","BaseWalletAdapter","publicKey","transaction","connection","options","feePayer","recentBlockhash","getLatestBlockhash","commitment","preflightCommitment","minContextSlot","blockhash","scopePollingDetectionStrategy","detect","window","document","disposers","detectAndDispose","detected","dispose","interval","setInterval","push","clearInterval","readyState","addEventListener","once","removeEventListener"],"sources":["/Users/ivan/Metadata/node_modules/@solana/wallet-adapter-base/src/adapter.ts"],"sourcesContent":["import type { Connection, PublicKey, SendOptions, Signer, Transaction, TransactionSignature } from '@solana/web3.js';\nimport EventEmitter from 'eventemitter3';\nimport type { WalletError } from './errors.js';\nimport { WalletNotConnectedError } from './errors.js';\nimport type { SupportedTransactionVersions, TransactionOrVersionedTransaction } from './types.js';\n\nexport { EventEmitter };\n\nexport interface WalletAdapterEvents {\n    connect(publicKey: PublicKey): void;\n    disconnect(): void;\n    error(error: WalletError): void;\n    readyStateChange(readyState: WalletReadyState): void;\n}\n\nexport interface SendTransactionOptions extends SendOptions {\n    signers?: Signer[];\n}\n\n// WalletName is a nominal type that wallet adapters should use, e.g. `'MyCryptoWallet' as WalletName<'MyCryptoWallet'>`\n// https://medium.com/@KevinBGreene/surviving-the-typescript-ecosystem-branding-and-type-tagging-6cf6e516523d\nexport type WalletName<T extends string = string> = T & { __brand__: 'WalletName' };\n\nexport interface WalletAdapterProps<Name extends string = string> {\n    name: WalletName<Name>;\n    url: string;\n    icon: string;\n    readyState: WalletReadyState;\n    publicKey: PublicKey | null;\n    connecting: boolean;\n    connected: boolean;\n    supportedTransactionVersions?: SupportedTransactionVersions;\n\n    connect(): Promise<void>;\n    disconnect(): Promise<void>;\n\n    sendTransaction(\n        transaction: TransactionOrVersionedTransaction<this['supportedTransactionVersions']>,\n        connection: Connection,\n        options?: SendTransactionOptions\n    ): Promise<TransactionSignature>;\n}\n\nexport type WalletAdapter<Name extends string = string> = WalletAdapterProps<Name> & EventEmitter<WalletAdapterEvents>;\n\n/**\n * A wallet's readiness describes a series of states that the wallet can be in,\n * depending on what kind of wallet it is. An installable wallet (eg. a browser\n * extension like Phantom) might be `Installed` if we've found the Phantom API\n * in the global scope, or `NotDetected` otherwise. A loadable, zero-install\n * runtime (eg. Torus Wallet) might simply signal that it's `Loadable`. Use this\n * metadata to personalize the wallet list for each user (eg. to show their\n * installed wallets first).\n */\nexport enum WalletReadyState {\n    /**\n     * User-installable wallets can typically be detected by scanning for an API\n     * that they've injected into the global context. If such an API is present,\n     * we consider the wallet to have been installed.\n     */\n    Installed = 'Installed',\n    NotDetected = 'NotDetected',\n    /**\n     * Loadable wallets are always available to you. Since you can load them at\n     * any time, it's meaningless to say that they have been detected.\n     */\n    Loadable = 'Loadable',\n    /**\n     * If a wallet is not supported on a given platform (eg. server-rendering, or\n     * mobile) then it will stay in the `Unsupported` state.\n     */\n    Unsupported = 'Unsupported',\n}\n\nexport abstract class BaseWalletAdapter<Name extends string = string>\n    extends EventEmitter<WalletAdapterEvents>\n    implements WalletAdapter<Name>\n{\n    abstract name: WalletName<Name>;\n    abstract url: string;\n    abstract icon: string;\n    abstract readyState: WalletReadyState;\n    abstract publicKey: PublicKey | null;\n    abstract connecting: boolean;\n    abstract supportedTransactionVersions?: SupportedTransactionVersions;\n\n    get connected() {\n        return !!this.publicKey;\n    }\n\n    abstract connect(): Promise<void>;\n    abstract disconnect(): Promise<void>;\n\n    abstract sendTransaction(\n        transaction: TransactionOrVersionedTransaction<this['supportedTransactionVersions']>,\n        connection: Connection,\n        options?: SendTransactionOptions\n    ): Promise<TransactionSignature>;\n\n    protected async prepareTransaction(\n        transaction: Transaction,\n        connection: Connection,\n        options: SendOptions = {}\n    ): Promise<Transaction> {\n        const publicKey = this.publicKey;\n        if (!publicKey) throw new WalletNotConnectedError();\n\n        transaction.feePayer = transaction.feePayer || publicKey;\n        transaction.recentBlockhash =\n            transaction.recentBlockhash ||\n            (\n                await connection.getLatestBlockhash({\n                    commitment: options.preflightCommitment,\n                    minContextSlot: options.minContextSlot,\n                })\n            ).blockhash;\n\n        return transaction;\n    }\n}\n\nexport function scopePollingDetectionStrategy(detect: () => boolean): void {\n    // Early return when server-side rendering\n    if (typeof window === 'undefined' || typeof document === 'undefined') return;\n\n    const disposers: (() => void)[] = [];\n\n    function detectAndDispose() {\n        const detected = detect();\n        if (detected) {\n            for (const dispose of disposers) {\n                dispose();\n            }\n        }\n    }\n\n    // Strategy #1: Try detecting every second.\n    const interval =\n        // TODO: #334 Replace with idle callback strategy.\n        setInterval(detectAndDispose, 1000);\n    disposers.push(() => clearInterval(interval));\n\n    // Strategy #2: Detect as soon as the DOM becomes 'ready'/'interactive'.\n    if (\n        // Implies that `DOMContentLoaded` has not yet fired.\n        document.readyState === 'loading'\n    ) {\n        document.addEventListener('DOMContentLoaded', detectAndDispose, { once: true });\n        disposers.push(() => document.removeEventListener('DOMContentLoaded', detectAndDispose));\n    }\n\n    // Strategy #3: Detect after the `window` has fully loaded.\n    if (\n        // If the `complete` state has been reached, we're too late.\n        document.readyState !== 'complete'\n    ) {\n        window.addEventListener('load', detectAndDispose, { once: true });\n        disposers.push(() => window.removeEventListener('load', detectAndDispose));\n    }\n\n    // Strategy #4: Detect synchronously, now.\n    detectAndDispose();\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}