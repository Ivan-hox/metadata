{"ast":null,"code":"import _toArray from \"/Users/ivan/Metadata/node_modules/@babel/runtime/helpers/esm/toArray.js\";\nimport _createForOfIteratorHelper from \"/Users/ivan/Metadata/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _slicedToArray from \"/Users/ivan/Metadata/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport { struct, u16, u8 } from '@solana/buffer-layout';\nimport { publicKey, u64 } from '@solana/buffer-layout-utils';\nimport { PublicKey, TransactionInstruction } from '@solana/web3.js';\nimport { programSupportsExtensions, TOKEN_2022_PROGRAM_ID } from '../../constants.js';\nimport { TokenInvalidInstructionDataError, TokenInvalidInstructionKeysError, TokenInvalidInstructionProgramError, TokenInvalidInstructionTypeError, TokenUnsupportedInstructionError } from '../../errors.js';\nimport { TokenInstruction } from '../../instructions/types.js';\nexport var TransferFeeInstruction;\n(function (TransferFeeInstruction) {\n  TransferFeeInstruction[TransferFeeInstruction[\"InitializeTransferFeeConfig\"] = 0] = \"InitializeTransferFeeConfig\";\n  TransferFeeInstruction[TransferFeeInstruction[\"TransferCheckedWithFee\"] = 1] = \"TransferCheckedWithFee\";\n  TransferFeeInstruction[TransferFeeInstruction[\"WithdrawWithheldTokensFromMint\"] = 2] = \"WithdrawWithheldTokensFromMint\";\n  TransferFeeInstruction[TransferFeeInstruction[\"WithdrawWithheldTokensFromAccounts\"] = 3] = \"WithdrawWithheldTokensFromAccounts\";\n  TransferFeeInstruction[TransferFeeInstruction[\"HarvestWithheldTokensToMint\"] = 4] = \"HarvestWithheldTokensToMint\";\n  TransferFeeInstruction[TransferFeeInstruction[\"SetTransferFee\"] = 5] = \"SetTransferFee\";\n})(TransferFeeInstruction || (TransferFeeInstruction = {}));\n/** TODO: docs */\nexport var initializeTransferFeeConfigInstructionData = struct([u8('instruction'), u8('transferFeeInstruction'), u8('transferFeeConfigAuthorityOption'), publicKey('transferFeeConfigAuthority'), u8('withdrawWithheldAuthorityOption'), publicKey('withdrawWithheldAuthority'), u16('transferFeeBasisPoints'), u64('maximumFee')]);\n/**\n * Construct an InitializeTransferFeeConfig instruction\n *\n * @param mint            Token mint account\n * @param transferFeeConfigAuthority  Optional authority that can update the fees\n * @param withdrawWithheldAuthority Optional authority that can withdraw fees\n * @param transferFeeBasisPoints Amount of transfer collected as fees, expressed as basis points of the transfer amount\n * @param maximumFee        Maximum fee assessed on transfers\n * @param programId       SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\nexport function createInitializeTransferFeeConfigInstruction(mint, transferFeeConfigAuthority, withdrawWithheldAuthority, transferFeeBasisPoints, maximumFee) {\n  var programId = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : TOKEN_2022_PROGRAM_ID;\n  if (!programSupportsExtensions(programId)) {\n    throw new TokenUnsupportedInstructionError();\n  }\n  var keys = [{\n    pubkey: mint,\n    isSigner: false,\n    isWritable: true\n  }];\n  var data = Buffer.alloc(initializeTransferFeeConfigInstructionData.span);\n  initializeTransferFeeConfigInstructionData.encode({\n    instruction: TokenInstruction.TransferFeeExtension,\n    transferFeeInstruction: TransferFeeInstruction.InitializeTransferFeeConfig,\n    transferFeeConfigAuthorityOption: transferFeeConfigAuthority ? 1 : 0,\n    transferFeeConfigAuthority: transferFeeConfigAuthority || new PublicKey(0),\n    withdrawWithheldAuthorityOption: withdrawWithheldAuthority ? 1 : 0,\n    withdrawWithheldAuthority: withdrawWithheldAuthority || new PublicKey(0),\n    transferFeeBasisPoints: transferFeeBasisPoints,\n    maximumFee: maximumFee\n  }, data);\n  return new TransactionInstruction({\n    keys: keys,\n    programId: programId,\n    data: data\n  });\n}\n/**\n * Decode an InitializeTransferFeeConfig instruction and validate it\n *\n * @param instruction Transaction instruction to decode\n * @param programId   SPL Token program account\n *\n * @return Decoded, valid instruction\n */\nexport function decodeInitializeTransferFeeConfigInstruction(instruction, programId) {\n  if (!instruction.programId.equals(programId)) throw new TokenInvalidInstructionProgramError();\n  if (instruction.data.length !== initializeTransferFeeConfigInstructionData.span) throw new TokenInvalidInstructionDataError();\n  var _decodeInitializeTran = decodeInitializeTransferFeeConfigInstructionUnchecked(instruction),\n    mint = _decodeInitializeTran.keys.mint,\n    data = _decodeInitializeTran.data;\n  if (data.instruction !== TokenInstruction.TransferFeeExtension || data.transferFeeInstruction !== TransferFeeInstruction.InitializeTransferFeeConfig) throw new TokenInvalidInstructionTypeError();\n  if (!mint) throw new TokenInvalidInstructionKeysError();\n  return {\n    programId: programId,\n    keys: {\n      mint: mint\n    },\n    data: data\n  };\n}\n/**\n * Decode an InitializeTransferFeeConfig instruction without validating it\n *\n * @param instruction Transaction instruction to decode\n *\n * @return Decoded, non-validated instruction\n */\nexport function decodeInitializeTransferFeeConfigInstructionUnchecked(_ref) {\n  var programId = _ref.programId,\n    _ref$keys = _slicedToArray(_ref.keys, 1),\n    mint = _ref$keys[0],\n    data = _ref.data;\n  var _initializeTransferFe = initializeTransferFeeConfigInstructionData.decode(data),\n    instruction = _initializeTransferFe.instruction,\n    transferFeeInstruction = _initializeTransferFe.transferFeeInstruction,\n    transferFeeConfigAuthorityOption = _initializeTransferFe.transferFeeConfigAuthorityOption,\n    transferFeeConfigAuthority = _initializeTransferFe.transferFeeConfigAuthority,\n    withdrawWithheldAuthorityOption = _initializeTransferFe.withdrawWithheldAuthorityOption,\n    withdrawWithheldAuthority = _initializeTransferFe.withdrawWithheldAuthority,\n    transferFeeBasisPoints = _initializeTransferFe.transferFeeBasisPoints,\n    maximumFee = _initializeTransferFe.maximumFee;\n  return {\n    programId: programId,\n    keys: {\n      mint: mint\n    },\n    data: {\n      instruction: instruction,\n      transferFeeInstruction: transferFeeInstruction,\n      transferFeeConfigAuthority: transferFeeConfigAuthorityOption ? transferFeeConfigAuthority : null,\n      withdrawWithheldAuthority: withdrawWithheldAuthorityOption ? withdrawWithheldAuthority : null,\n      transferFeeBasisPoints: transferFeeBasisPoints,\n      maximumFee: maximumFee\n    }\n  };\n}\nexport var transferCheckedWithFeeInstructionData = struct([u8('instruction'), u8('transferFeeInstruction'), u64('amount'), u8('decimals'), u64('fee')]);\n/**\n * Construct an TransferCheckedWithFee instruction\n *\n * @param source          The source account\n * @param mint            The token mint\n * @param destination     The destination account\n * @param authority       The source account's owner/delegate\n * @param signers         The signer account(s)\n * @param amount          The amount of tokens to transfer\n * @param decimals        The expected number of base 10 digits to the right of the decimal place\n * @param fee             The expected fee assesed on this transfer, calculated off-chain based on the transferFeeBasisPoints and maximumFee of the mint.\n * @param programId       SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\nexport function createTransferCheckedWithFeeInstruction(source, mint, destination, authority, amount, decimals, fee) {\n  var multiSigners = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : [];\n  var programId = arguments.length > 8 && arguments[8] !== undefined ? arguments[8] : TOKEN_2022_PROGRAM_ID;\n  if (!programSupportsExtensions(programId)) {\n    throw new TokenUnsupportedInstructionError();\n  }\n  var data = Buffer.alloc(transferCheckedWithFeeInstructionData.span);\n  transferCheckedWithFeeInstructionData.encode({\n    instruction: TokenInstruction.TransferFeeExtension,\n    transferFeeInstruction: TransferFeeInstruction.TransferCheckedWithFee,\n    amount: amount,\n    decimals: decimals,\n    fee: fee\n  }, data);\n  var keys = [];\n  keys.push({\n    pubkey: source,\n    isSigner: false,\n    isWritable: true\n  });\n  keys.push({\n    pubkey: mint,\n    isSigner: false,\n    isWritable: false\n  });\n  keys.push({\n    pubkey: destination,\n    isSigner: false,\n    isWritable: true\n  });\n  keys.push({\n    pubkey: authority,\n    isSigner: !multiSigners.length,\n    isWritable: false\n  });\n  var _iterator = _createForOfIteratorHelper(multiSigners),\n    _step;\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var signer = _step.value;\n      keys.push({\n        pubkey: signer.publicKey,\n        isSigner: true,\n        isWritable: false\n      });\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n  return new TransactionInstruction({\n    keys: keys,\n    programId: programId,\n    data: data\n  });\n}\n/**\n * Decode a TransferCheckedWithFee instruction and validate it\n *\n * @param instruction Transaction instruction to decode\n * @param programId   SPL Token program account\n *\n * @return Decoded, valid instruction\n */\nexport function decodeTransferCheckedWithFeeInstruction(instruction, programId) {\n  if (!instruction.programId.equals(programId)) throw new TokenInvalidInstructionProgramError();\n  if (instruction.data.length !== transferCheckedWithFeeInstructionData.span) throw new TokenInvalidInstructionDataError();\n  var _decodeTransferChecke = decodeTransferCheckedWithFeeInstructionUnchecked(instruction),\n    _decodeTransferChecke2 = _decodeTransferChecke.keys,\n    source = _decodeTransferChecke2.source,\n    mint = _decodeTransferChecke2.mint,\n    destination = _decodeTransferChecke2.destination,\n    authority = _decodeTransferChecke2.authority,\n    signers = _decodeTransferChecke2.signers,\n    data = _decodeTransferChecke.data;\n  if (data.instruction !== TokenInstruction.TransferFeeExtension || data.transferFeeInstruction !== TransferFeeInstruction.TransferCheckedWithFee) throw new TokenInvalidInstructionTypeError();\n  if (!mint) throw new TokenInvalidInstructionKeysError();\n  return {\n    programId: programId,\n    keys: {\n      source: source,\n      mint: mint,\n      destination: destination,\n      authority: authority,\n      signers: signers ? signers : null\n    },\n    data: data\n  };\n}\n/**\n * Decode a TransferCheckedWithFees instruction without validating it\n *\n * @param instruction Transaction instruction to decode\n *\n * @return Decoded, non-validated instruction\n */\nexport function decodeTransferCheckedWithFeeInstructionUnchecked(_ref2) {\n  var programId = _ref2.programId,\n    _ref2$keys = _toArray(_ref2.keys),\n    source = _ref2$keys[0],\n    mint = _ref2$keys[1],\n    destination = _ref2$keys[2],\n    authority = _ref2$keys[3],\n    signers = _ref2$keys.slice(4),\n    data = _ref2.data;\n  var _transferCheckedWithF = transferCheckedWithFeeInstructionData.decode(data),\n    instruction = _transferCheckedWithF.instruction,\n    transferFeeInstruction = _transferCheckedWithF.transferFeeInstruction,\n    amount = _transferCheckedWithF.amount,\n    decimals = _transferCheckedWithF.decimals,\n    fee = _transferCheckedWithF.fee;\n  return {\n    programId: programId,\n    keys: {\n      source: source,\n      mint: mint,\n      destination: destination,\n      authority: authority,\n      signers: signers\n    },\n    data: {\n      instruction: instruction,\n      transferFeeInstruction: transferFeeInstruction,\n      amount: amount,\n      decimals: decimals,\n      fee: fee\n    }\n  };\n}\nexport var withdrawWithheldTokensFromMintInstructionData = struct([u8('instruction'), u8('transferFeeInstruction')]);\n/**\n * Construct a WithdrawWithheldTokensFromMint instruction\n *\n * @param mint              The token mint\n * @param destination       The destination account\n * @param authority         The source account's owner/delegate\n * @param signers           The signer account(s)\n * @param programID         SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\nexport function createWithdrawWithheldTokensFromMintInstruction(mint, destination, authority) {\n  var signers = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [];\n  var programId = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : TOKEN_2022_PROGRAM_ID;\n  if (!programSupportsExtensions(programId)) {\n    throw new TokenUnsupportedInstructionError();\n  }\n  var data = Buffer.alloc(withdrawWithheldTokensFromMintInstructionData.span);\n  withdrawWithheldTokensFromMintInstructionData.encode({\n    instruction: TokenInstruction.TransferFeeExtension,\n    transferFeeInstruction: TransferFeeInstruction.WithdrawWithheldTokensFromMint\n  }, data);\n  var keys = [];\n  keys.push({\n    pubkey: mint,\n    isSigner: false,\n    isWritable: true\n  }, {\n    pubkey: destination,\n    isSigner: false,\n    isWritable: true\n  }, {\n    pubkey: authority,\n    isSigner: !signers.length,\n    isWritable: false\n  });\n  var _iterator2 = _createForOfIteratorHelper(signers),\n    _step2;\n  try {\n    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n      var signer = _step2.value;\n      keys.push({\n        pubkey: signer.publicKey,\n        isSigner: true,\n        isWritable: false\n      });\n    }\n  } catch (err) {\n    _iterator2.e(err);\n  } finally {\n    _iterator2.f();\n  }\n  return new TransactionInstruction({\n    keys: keys,\n    programId: programId,\n    data: data\n  });\n}\n/**\n * Decode a WithdrawWithheldTokensFromMint instruction and validate it\n *\n * @param instruction Transaction instruction to decode\n * @param programId   SPL Token program account\n *\n * @return Decoded, valid instruction\n */\nexport function decodeWithdrawWithheldTokensFromMintInstruction(instruction, programId) {\n  if (!instruction.programId.equals(programId)) throw new TokenInvalidInstructionProgramError();\n  if (instruction.data.length !== withdrawWithheldTokensFromMintInstructionData.span) throw new TokenInvalidInstructionDataError();\n  var _decodeWithdrawWithhe = decodeWithdrawWithheldTokensFromMintInstructionUnchecked(instruction),\n    _decodeWithdrawWithhe2 = _decodeWithdrawWithhe.keys,\n    mint = _decodeWithdrawWithhe2.mint,\n    destination = _decodeWithdrawWithhe2.destination,\n    authority = _decodeWithdrawWithhe2.authority,\n    signers = _decodeWithdrawWithhe2.signers,\n    data = _decodeWithdrawWithhe.data;\n  if (data.instruction !== TokenInstruction.TransferFeeExtension || data.transferFeeInstruction !== TransferFeeInstruction.WithdrawWithheldTokensFromMint) throw new TokenInvalidInstructionTypeError();\n  if (!mint) throw new TokenInvalidInstructionKeysError();\n  return {\n    programId: programId,\n    keys: {\n      mint: mint,\n      destination: destination,\n      authority: authority,\n      signers: signers ? signers : null\n    },\n    data: data\n  };\n}\n/**\n * Decode a WithdrawWithheldTokensFromMint instruction without validating it\n *\n * @param instruction Transaction instruction to decode\n *\n * @return Decoded, non-validated instruction\n */\nexport function decodeWithdrawWithheldTokensFromMintInstructionUnchecked(_ref3) {\n  var programId = _ref3.programId,\n    _ref3$keys = _toArray(_ref3.keys),\n    mint = _ref3$keys[0],\n    destination = _ref3$keys[1],\n    authority = _ref3$keys[2],\n    signers = _ref3$keys.slice(3),\n    data = _ref3.data;\n  var _withdrawWithheldToke = withdrawWithheldTokensFromMintInstructionData.decode(data),\n    instruction = _withdrawWithheldToke.instruction,\n    transferFeeInstruction = _withdrawWithheldToke.transferFeeInstruction;\n  return {\n    programId: programId,\n    keys: {\n      mint: mint,\n      destination: destination,\n      authority: authority,\n      signers: signers\n    },\n    data: {\n      instruction: instruction,\n      transferFeeInstruction: transferFeeInstruction\n    }\n  };\n}\nexport var withdrawWithheldTokensFromAccountsInstructionData = struct([u8('instruction'), u8('transferFeeInstruction'), u8('numTokenAccounts')]);\n/**\n * Construct a WithdrawWithheldTokensFromAccounts instruction\n *\n * @param mint              The token mint\n * @param destination       The destination account\n * @param authority         The source account's owner/delegate\n * @param signers           The signer account(s)\n * @param sources           The source accounts to withdraw from\n * @param programID         SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\nexport function createWithdrawWithheldTokensFromAccountsInstruction(mint, destination, authority, signers, sources) {\n  var programId = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : TOKEN_2022_PROGRAM_ID;\n  if (!programSupportsExtensions(programId)) {\n    throw new TokenUnsupportedInstructionError();\n  }\n  var data = Buffer.alloc(withdrawWithheldTokensFromAccountsInstructionData.span);\n  withdrawWithheldTokensFromAccountsInstructionData.encode({\n    instruction: TokenInstruction.TransferFeeExtension,\n    transferFeeInstruction: TransferFeeInstruction.WithdrawWithheldTokensFromAccounts,\n    numTokenAccounts: sources.length\n  }, data);\n  var keys = [];\n  keys.push({\n    pubkey: mint,\n    isSigner: false,\n    isWritable: true\n  }, {\n    pubkey: destination,\n    isSigner: false,\n    isWritable: true\n  }, {\n    pubkey: authority,\n    isSigner: !signers.length,\n    isWritable: false\n  });\n  var _iterator3 = _createForOfIteratorHelper(signers),\n    _step3;\n  try {\n    for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n      var signer = _step3.value;\n      keys.push({\n        pubkey: signer.publicKey,\n        isSigner: true,\n        isWritable: false\n      });\n    }\n  } catch (err) {\n    _iterator3.e(err);\n  } finally {\n    _iterator3.f();\n  }\n  var _iterator4 = _createForOfIteratorHelper(sources),\n    _step4;\n  try {\n    for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n      var source = _step4.value;\n      keys.push({\n        pubkey: source,\n        isSigner: false,\n        isWritable: true\n      });\n    }\n  } catch (err) {\n    _iterator4.e(err);\n  } finally {\n    _iterator4.f();\n  }\n  return new TransactionInstruction({\n    keys: keys,\n    programId: programId,\n    data: data\n  });\n}\n/**\n * Decode a WithdrawWithheldTokensFromAccounts instruction and validate it\n *\n * @param instruction Transaction instruction to decode\n * @param programId   SPL Token program account\n *\n * @return Decoded, valid instruction\n */\nexport function decodeWithdrawWithheldTokensFromAccountsInstruction(instruction, programId) {\n  if (!instruction.programId.equals(programId)) throw new TokenInvalidInstructionProgramError();\n  if (instruction.data.length !== withdrawWithheldTokensFromAccountsInstructionData.span) throw new TokenInvalidInstructionDataError();\n  var _decodeWithdrawWithhe3 = decodeWithdrawWithheldTokensFromAccountsInstructionUnchecked(instruction),\n    _decodeWithdrawWithhe4 = _decodeWithdrawWithhe3.keys,\n    mint = _decodeWithdrawWithhe4.mint,\n    destination = _decodeWithdrawWithhe4.destination,\n    authority = _decodeWithdrawWithhe4.authority,\n    signers = _decodeWithdrawWithhe4.signers,\n    sources = _decodeWithdrawWithhe4.sources,\n    data = _decodeWithdrawWithhe3.data;\n  if (data.instruction !== TokenInstruction.TransferFeeExtension || data.transferFeeInstruction !== TransferFeeInstruction.WithdrawWithheldTokensFromAccounts) throw new TokenInvalidInstructionTypeError();\n  if (!mint) throw new TokenInvalidInstructionKeysError();\n  return {\n    programId: programId,\n    keys: {\n      mint: mint,\n      destination: destination,\n      authority: authority,\n      signers: signers ? signers : null,\n      sources: sources ? sources : null\n    },\n    data: data\n  };\n}\n/**\n * Decode a WithdrawWithheldTokensFromAccount instruction without validating it\n *\n * @param instruction Transaction instruction to decode\n *\n * @return Decoded, non-validated instruction\n */\nexport function decodeWithdrawWithheldTokensFromAccountsInstructionUnchecked(_ref4) {\n  var programId = _ref4.programId,\n    keys = _ref4.keys,\n    data = _ref4.data;\n  var _withdrawWithheldToke2 = withdrawWithheldTokensFromAccountsInstructionData.decode(data),\n    instruction = _withdrawWithheldToke2.instruction,\n    transferFeeInstruction = _withdrawWithheldToke2.transferFeeInstruction,\n    numTokenAccounts = _withdrawWithheldToke2.numTokenAccounts;\n  var _ref5 = [keys[0], keys[1], keys[2], keys.slice(3, 3 + numTokenAccounts), keys.slice(-1 * numTokenAccounts)],\n    mint = _ref5[0],\n    destination = _ref5[1],\n    authority = _ref5[2],\n    signers = _ref5[3],\n    sources = _ref5[4];\n  return {\n    programId: programId,\n    keys: {\n      mint: mint,\n      destination: destination,\n      authority: authority,\n      signers: signers,\n      sources: sources\n    },\n    data: {\n      instruction: instruction,\n      transferFeeInstruction: transferFeeInstruction,\n      numTokenAccounts: numTokenAccounts\n    }\n  };\n}\nexport var harvestWithheldTokensToMintInstructionData = struct([u8('instruction'), u8('transferFeeInstruction')]);\n/**\n * Construct a HarvestWithheldTokensToMint instruction\n *\n * @param mint              The token mint\n * @param sources           The source accounts to withdraw from\n * @param programID         SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\nexport function createHarvestWithheldTokensToMintInstruction(mint, sources) {\n  var programId = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : TOKEN_2022_PROGRAM_ID;\n  if (!programSupportsExtensions(programId)) {\n    throw new TokenUnsupportedInstructionError();\n  }\n  var data = Buffer.alloc(harvestWithheldTokensToMintInstructionData.span);\n  harvestWithheldTokensToMintInstructionData.encode({\n    instruction: TokenInstruction.TransferFeeExtension,\n    transferFeeInstruction: TransferFeeInstruction.HarvestWithheldTokensToMint\n  }, data);\n  var keys = [];\n  keys.push({\n    pubkey: mint,\n    isSigner: false,\n    isWritable: true\n  });\n  var _iterator5 = _createForOfIteratorHelper(sources),\n    _step5;\n  try {\n    for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n      var source = _step5.value;\n      keys.push({\n        pubkey: source,\n        isSigner: false,\n        isWritable: true\n      });\n    }\n  } catch (err) {\n    _iterator5.e(err);\n  } finally {\n    _iterator5.f();\n  }\n  return new TransactionInstruction({\n    keys: keys,\n    programId: programId,\n    data: data\n  });\n}\n/**\n * Decode a HarvestWithheldTokensToMint instruction and validate it\n *\n * @param instruction Transaction instruction to decode\n * @param programId   SPL Token program account\n *\n * @return Decoded, valid instruction\n */\nexport function decodeHarvestWithheldTokensToMintInstruction(instruction, programId) {\n  if (!instruction.programId.equals(programId)) throw new TokenInvalidInstructionProgramError();\n  if (instruction.data.length !== harvestWithheldTokensToMintInstructionData.span) throw new TokenInvalidInstructionDataError();\n  var _decodeHarvestWithhel = decodeHarvestWithheldTokensToMintInstructionUnchecked(instruction),\n    _decodeHarvestWithhel2 = _decodeHarvestWithhel.keys,\n    mint = _decodeHarvestWithhel2.mint,\n    sources = _decodeHarvestWithhel2.sources,\n    data = _decodeHarvestWithhel.data;\n  if (data.instruction !== TokenInstruction.TransferFeeExtension || data.transferFeeInstruction !== TransferFeeInstruction.HarvestWithheldTokensToMint) throw new TokenInvalidInstructionTypeError();\n  if (!mint) throw new TokenInvalidInstructionKeysError();\n  return {\n    programId: programId,\n    keys: {\n      mint: mint,\n      sources: sources\n    },\n    data: data\n  };\n}\n/**\n * Decode a HarvestWithheldTokensToMint instruction without validating it\n *\n * @param instruction Transaction instruction to decode\n *\n * @return Decoded, non-validated instruction\n */\nexport function decodeHarvestWithheldTokensToMintInstructionUnchecked(_ref6) {\n  var programId = _ref6.programId,\n    _ref6$keys = _toArray(_ref6.keys),\n    mint = _ref6$keys[0],\n    sources = _ref6$keys.slice(1),\n    data = _ref6.data;\n  var _harvestWithheldToken = harvestWithheldTokensToMintInstructionData.decode(data),\n    instruction = _harvestWithheldToken.instruction,\n    transferFeeInstruction = _harvestWithheldToken.transferFeeInstruction;\n  return {\n    programId: programId,\n    keys: {\n      mint: mint,\n      sources: sources\n    },\n    data: {\n      instruction: instruction,\n      transferFeeInstruction: transferFeeInstruction\n    }\n  };\n}","map":{"version":3,"mappings":"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","names":["struct","u16","u8","publicKey","u64","PublicKey","TransactionInstruction","programSupportsExtensions","TOKEN_2022_PROGRAM_ID","TokenInvalidInstructionDataError","TokenInvalidInstructionKeysError","TokenInvalidInstructionProgramError","TokenInvalidInstructionTypeError","TokenUnsupportedInstructionError","TokenInstruction","TransferFeeInstruction","initializeTransferFeeConfigInstructionData","createInitializeTransferFeeConfigInstruction","mint","transferFeeConfigAuthority","withdrawWithheldAuthority","transferFeeBasisPoints","maximumFee","programId","keys","pubkey","isSigner","isWritable","data","Buffer","alloc","span","encode","instruction","TransferFeeExtension","transferFeeInstruction","InitializeTransferFeeConfig","transferFeeConfigAuthorityOption","withdrawWithheldAuthorityOption","decodeInitializeTransferFeeConfigInstruction","equals","length","decodeInitializeTransferFeeConfigInstructionUnchecked","decode","transferCheckedWithFeeInstructionData","createTransferCheckedWithFeeInstruction","source","destination","authority","amount","decimals","fee","multiSigners","TransferCheckedWithFee","push","signer","decodeTransferCheckedWithFeeInstruction","decodeTransferCheckedWithFeeInstructionUnchecked","signers","withdrawWithheldTokensFromMintInstructionData","createWithdrawWithheldTokensFromMintInstruction","WithdrawWithheldTokensFromMint","decodeWithdrawWithheldTokensFromMintInstruction","decodeWithdrawWithheldTokensFromMintInstructionUnchecked","withdrawWithheldTokensFromAccountsInstructionData","createWithdrawWithheldTokensFromAccountsInstruction","sources","WithdrawWithheldTokensFromAccounts","numTokenAccounts","decodeWithdrawWithheldTokensFromAccountsInstruction","decodeWithdrawWithheldTokensFromAccountsInstructionUnchecked","slice","harvestWithheldTokensToMintInstructionData","createHarvestWithheldTokensToMintInstruction","HarvestWithheldTokensToMint","decodeHarvestWithheldTokensToMintInstruction","decodeHarvestWithheldTokensToMintInstructionUnchecked"],"sources":["/Users/ivan/Metadata/node_modules/@solana/spl-token/src/extensions/transferFee/instructions.ts"],"sourcesContent":["import { struct, u16, u8 } from '@solana/buffer-layout';\nimport { publicKey, u64 } from '@solana/buffer-layout-utils';\nimport type { AccountMeta, Signer } from '@solana/web3.js';\nimport { PublicKey, TransactionInstruction } from '@solana/web3.js';\nimport { programSupportsExtensions, TOKEN_2022_PROGRAM_ID } from '../../constants.js';\nimport {\n    TokenInvalidInstructionDataError,\n    TokenInvalidInstructionKeysError,\n    TokenInvalidInstructionProgramError,\n    TokenInvalidInstructionTypeError,\n    TokenUnsupportedInstructionError,\n} from '../../errors.js';\nimport { TokenInstruction } from '../../instructions/types.js';\n\nexport enum TransferFeeInstruction {\n    InitializeTransferFeeConfig = 0,\n    TransferCheckedWithFee = 1,\n    WithdrawWithheldTokensFromMint = 2,\n    WithdrawWithheldTokensFromAccounts = 3,\n    HarvestWithheldTokensToMint = 4,\n    SetTransferFee = 5,\n}\n\n// InitializeTransferFeeConfig\n\n/** TODO: docs */\nexport interface InitializeTransferFeeConfigInstructionData {\n    instruction: TokenInstruction.TransferFeeExtension;\n    transferFeeInstruction: TransferFeeInstruction.InitializeTransferFeeConfig;\n    transferFeeConfigAuthorityOption: 1 | 0;\n    transferFeeConfigAuthority: PublicKey;\n    withdrawWithheldAuthorityOption: 1 | 0;\n    withdrawWithheldAuthority: PublicKey;\n    transferFeeBasisPoints: number;\n    maximumFee: bigint;\n}\n\n/** TODO: docs */\nexport const initializeTransferFeeConfigInstructionData = struct<InitializeTransferFeeConfigInstructionData>([\n    u8('instruction'),\n    u8('transferFeeInstruction'),\n    u8('transferFeeConfigAuthorityOption'),\n    publicKey('transferFeeConfigAuthority'),\n    u8('withdrawWithheldAuthorityOption'),\n    publicKey('withdrawWithheldAuthority'),\n    u16('transferFeeBasisPoints'),\n    u64('maximumFee'),\n]);\n\n/**\n * Construct an InitializeTransferFeeConfig instruction\n *\n * @param mint            Token mint account\n * @param transferFeeConfigAuthority  Optional authority that can update the fees\n * @param withdrawWithheldAuthority Optional authority that can withdraw fees\n * @param transferFeeBasisPoints Amount of transfer collected as fees, expressed as basis points of the transfer amount\n * @param maximumFee        Maximum fee assessed on transfers\n * @param programId       SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\nexport function createInitializeTransferFeeConfigInstruction(\n    mint: PublicKey,\n    transferFeeConfigAuthority: PublicKey | null,\n    withdrawWithheldAuthority: PublicKey | null,\n    transferFeeBasisPoints: number,\n    maximumFee: bigint,\n    programId = TOKEN_2022_PROGRAM_ID\n): TransactionInstruction {\n    if (!programSupportsExtensions(programId)) {\n        throw new TokenUnsupportedInstructionError();\n    }\n    const keys = [{ pubkey: mint, isSigner: false, isWritable: true }];\n\n    const data = Buffer.alloc(initializeTransferFeeConfigInstructionData.span);\n    initializeTransferFeeConfigInstructionData.encode(\n        {\n            instruction: TokenInstruction.TransferFeeExtension,\n            transferFeeInstruction: TransferFeeInstruction.InitializeTransferFeeConfig,\n            transferFeeConfigAuthorityOption: transferFeeConfigAuthority ? 1 : 0,\n            transferFeeConfigAuthority: transferFeeConfigAuthority || new PublicKey(0),\n            withdrawWithheldAuthorityOption: withdrawWithheldAuthority ? 1 : 0,\n            withdrawWithheldAuthority: withdrawWithheldAuthority || new PublicKey(0),\n            transferFeeBasisPoints: transferFeeBasisPoints,\n            maximumFee: maximumFee,\n        },\n        data\n    );\n\n    return new TransactionInstruction({ keys, programId, data });\n}\n\n/** A decoded, valid InitializeTransferFeeConfig instruction */\nexport interface DecodedInitializeTransferFeeConfigInstruction {\n    programId: PublicKey;\n    keys: {\n        mint: AccountMeta;\n    };\n    data: {\n        instruction: TokenInstruction.TransferFeeExtension;\n        transferFeeInstruction: TransferFeeInstruction.InitializeTransferFeeConfig;\n        transferFeeConfigAuthority: PublicKey | null;\n        withdrawWithheldAuthority: PublicKey | null;\n        transferFeeBasisPoints: number;\n        maximumFee: bigint;\n    };\n}\n\n/**\n * Decode an InitializeTransferFeeConfig instruction and validate it\n *\n * @param instruction Transaction instruction to decode\n * @param programId   SPL Token program account\n *\n * @return Decoded, valid instruction\n */\nexport function decodeInitializeTransferFeeConfigInstruction(\n    instruction: TransactionInstruction,\n    programId: PublicKey\n): DecodedInitializeTransferFeeConfigInstruction {\n    if (!instruction.programId.equals(programId)) throw new TokenInvalidInstructionProgramError();\n    if (instruction.data.length !== initializeTransferFeeConfigInstructionData.span)\n        throw new TokenInvalidInstructionDataError();\n\n    const {\n        keys: { mint },\n        data,\n    } = decodeInitializeTransferFeeConfigInstructionUnchecked(instruction);\n    if (\n        data.instruction !== TokenInstruction.TransferFeeExtension ||\n        data.transferFeeInstruction !== TransferFeeInstruction.InitializeTransferFeeConfig\n    )\n        throw new TokenInvalidInstructionTypeError();\n    if (!mint) throw new TokenInvalidInstructionKeysError();\n\n    return {\n        programId,\n        keys: {\n            mint,\n        },\n        data,\n    };\n}\n\n/** A decoded, non-validated InitializeTransferFeeConfig instruction */\nexport interface DecodedInitializeTransferFeeConfigInstructionUnchecked {\n    programId: PublicKey;\n    keys: {\n        mint: AccountMeta | undefined;\n    };\n    data: {\n        instruction: TokenInstruction.TransferFeeExtension;\n        transferFeeInstruction: TransferFeeInstruction.InitializeTransferFeeConfig;\n        transferFeeConfigAuthority: PublicKey | null;\n        withdrawWithheldAuthority: PublicKey | null;\n        transferFeeBasisPoints: number;\n        maximumFee: bigint;\n    };\n}\n\n/**\n * Decode an InitializeTransferFeeConfig instruction without validating it\n *\n * @param instruction Transaction instruction to decode\n *\n * @return Decoded, non-validated instruction\n */\nexport function decodeInitializeTransferFeeConfigInstructionUnchecked({\n    programId,\n    keys: [mint],\n    data,\n}: TransactionInstruction): DecodedInitializeTransferFeeConfigInstructionUnchecked {\n    const {\n        instruction,\n        transferFeeInstruction,\n        transferFeeConfigAuthorityOption,\n        transferFeeConfigAuthority,\n        withdrawWithheldAuthorityOption,\n        withdrawWithheldAuthority,\n        transferFeeBasisPoints,\n        maximumFee,\n    } = initializeTransferFeeConfigInstructionData.decode(data);\n\n    return {\n        programId,\n        keys: {\n            mint,\n        },\n        data: {\n            instruction,\n            transferFeeInstruction,\n            transferFeeConfigAuthority: transferFeeConfigAuthorityOption ? transferFeeConfigAuthority : null,\n            withdrawWithheldAuthority: withdrawWithheldAuthorityOption ? withdrawWithheldAuthority : null,\n            transferFeeBasisPoints,\n            maximumFee,\n        },\n    };\n}\n\n// TransferCheckedWithFee\nexport interface TransferCheckedWithFeeInstructionData {\n    instruction: TokenInstruction.TransferFeeExtension;\n    transferFeeInstruction: TransferFeeInstruction.TransferCheckedWithFee;\n    amount: bigint;\n    decimals: number;\n    fee: bigint;\n}\n\nexport const transferCheckedWithFeeInstructionData = struct<TransferCheckedWithFeeInstructionData>([\n    u8('instruction'),\n    u8('transferFeeInstruction'),\n    u64('amount'),\n    u8('decimals'),\n    u64('fee'),\n]);\n\n/**\n * Construct an TransferCheckedWithFee instruction\n *\n * @param source          The source account\n * @param mint            The token mint\n * @param destination     The destination account\n * @param authority       The source account's owner/delegate\n * @param signers         The signer account(s)\n * @param amount          The amount of tokens to transfer\n * @param decimals        The expected number of base 10 digits to the right of the decimal place\n * @param fee             The expected fee assesed on this transfer, calculated off-chain based on the transferFeeBasisPoints and maximumFee of the mint.\n * @param programId       SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\nexport function createTransferCheckedWithFeeInstruction(\n    source: PublicKey,\n    mint: PublicKey,\n    destination: PublicKey,\n    authority: PublicKey,\n    amount: bigint,\n    decimals: number,\n    fee: bigint,\n    multiSigners: Signer[] = [],\n    programId = TOKEN_2022_PROGRAM_ID\n): TransactionInstruction {\n    if (!programSupportsExtensions(programId)) {\n        throw new TokenUnsupportedInstructionError();\n    }\n    const data = Buffer.alloc(transferCheckedWithFeeInstructionData.span);\n    transferCheckedWithFeeInstructionData.encode(\n        {\n            instruction: TokenInstruction.TransferFeeExtension,\n            transferFeeInstruction: TransferFeeInstruction.TransferCheckedWithFee,\n            amount,\n            decimals,\n            fee,\n        },\n        data\n    );\n    const keys: AccountMeta[] = [];\n    keys.push({ pubkey: source, isSigner: false, isWritable: true });\n    keys.push({ pubkey: mint, isSigner: false, isWritable: false });\n    keys.push({ pubkey: destination, isSigner: false, isWritable: true });\n    keys.push({ pubkey: authority, isSigner: !multiSigners.length, isWritable: false });\n    for (const signer of multiSigners) {\n        keys.push({ pubkey: signer.publicKey, isSigner: true, isWritable: false });\n    }\n    return new TransactionInstruction({ keys, programId, data });\n}\n\n/** A decoded, valid TransferCheckedWithFee instruction */\nexport interface DecodedTransferCheckedWithFeeInstruction {\n    programId: PublicKey;\n    keys: {\n        source: AccountMeta;\n        mint: AccountMeta;\n        destination: AccountMeta;\n        authority: AccountMeta;\n        signers: AccountMeta[] | null;\n    };\n    data: {\n        instruction: TokenInstruction.TransferFeeExtension;\n        transferFeeInstruction: TransferFeeInstruction.TransferCheckedWithFee;\n        amount: bigint;\n        decimals: number;\n        fee: bigint;\n    };\n}\n\n/**\n * Decode a TransferCheckedWithFee instruction and validate it\n *\n * @param instruction Transaction instruction to decode\n * @param programId   SPL Token program account\n *\n * @return Decoded, valid instruction\n */\nexport function decodeTransferCheckedWithFeeInstruction(\n    instruction: TransactionInstruction,\n    programId: PublicKey\n): DecodedTransferCheckedWithFeeInstruction {\n    if (!instruction.programId.equals(programId)) throw new TokenInvalidInstructionProgramError();\n    if (instruction.data.length !== transferCheckedWithFeeInstructionData.span)\n        throw new TokenInvalidInstructionDataError();\n\n    const {\n        keys: { source, mint, destination, authority, signers },\n        data,\n    } = decodeTransferCheckedWithFeeInstructionUnchecked(instruction);\n    if (\n        data.instruction !== TokenInstruction.TransferFeeExtension ||\n        data.transferFeeInstruction !== TransferFeeInstruction.TransferCheckedWithFee\n    )\n        throw new TokenInvalidInstructionTypeError();\n    if (!mint) throw new TokenInvalidInstructionKeysError();\n\n    return {\n        programId,\n        keys: {\n            source,\n            mint,\n            destination,\n            authority,\n            signers: signers ? signers : null,\n        },\n        data,\n    };\n}\n\n/** A decoded, non-validated TransferCheckedWithFees instruction */\nexport interface DecodedTransferCheckedWithFeeInstructionUnchecked {\n    programId: PublicKey;\n    keys: {\n        source: AccountMeta;\n        mint: AccountMeta;\n        destination: AccountMeta;\n        authority: AccountMeta;\n        signers: AccountMeta[] | undefined;\n    };\n    data: {\n        instruction: TokenInstruction.TransferFeeExtension;\n        transferFeeInstruction: TransferFeeInstruction.TransferCheckedWithFee;\n        amount: bigint;\n        decimals: number;\n        fee: bigint;\n    };\n}\n\n/**\n * Decode a TransferCheckedWithFees instruction without validating it\n *\n * @param instruction Transaction instruction to decode\n *\n * @return Decoded, non-validated instruction\n */\nexport function decodeTransferCheckedWithFeeInstructionUnchecked({\n    programId,\n    keys: [source, mint, destination, authority, ...signers],\n    data,\n}: TransactionInstruction): DecodedTransferCheckedWithFeeInstructionUnchecked {\n    const { instruction, transferFeeInstruction, amount, decimals, fee } =\n        transferCheckedWithFeeInstructionData.decode(data);\n\n    return {\n        programId,\n        keys: {\n            source,\n            mint,\n            destination,\n            authority,\n            signers,\n        },\n        data: {\n            instruction,\n            transferFeeInstruction,\n            amount,\n            decimals,\n            fee,\n        },\n    };\n}\n\n// WithdrawWithheldTokensFromMint\nexport interface WithdrawWithheldTokensFromMintInstructionData {\n    instruction: TokenInstruction.TransferFeeExtension;\n    transferFeeInstruction: TransferFeeInstruction.WithdrawWithheldTokensFromMint;\n}\n\nexport const withdrawWithheldTokensFromMintInstructionData = struct<WithdrawWithheldTokensFromMintInstructionData>([\n    u8('instruction'),\n    u8('transferFeeInstruction'),\n]);\n\n/**\n * Construct a WithdrawWithheldTokensFromMint instruction\n *\n * @param mint              The token mint\n * @param destination       The destination account\n * @param authority         The source account's owner/delegate\n * @param signers           The signer account(s)\n * @param programID         SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\nexport function createWithdrawWithheldTokensFromMintInstruction(\n    mint: PublicKey,\n    destination: PublicKey,\n    authority: PublicKey,\n    signers: Signer[] = [],\n    programId = TOKEN_2022_PROGRAM_ID\n): TransactionInstruction {\n    if (!programSupportsExtensions(programId)) {\n        throw new TokenUnsupportedInstructionError();\n    }\n    const data = Buffer.alloc(withdrawWithheldTokensFromMintInstructionData.span);\n    withdrawWithheldTokensFromMintInstructionData.encode(\n        {\n            instruction: TokenInstruction.TransferFeeExtension,\n            transferFeeInstruction: TransferFeeInstruction.WithdrawWithheldTokensFromMint,\n        },\n        data\n    );\n    const keys: AccountMeta[] = [];\n    keys.push(\n        { pubkey: mint, isSigner: false, isWritable: true },\n        { pubkey: destination, isSigner: false, isWritable: true },\n        { pubkey: authority, isSigner: !signers.length, isWritable: false }\n    );\n    for (const signer of signers) {\n        keys.push({ pubkey: signer.publicKey, isSigner: true, isWritable: false });\n    }\n    return new TransactionInstruction({ keys, programId, data });\n}\n\n/** A decoded, valid WithdrawWithheldTokensFromMint instruction */\nexport interface DecodedWithdrawWithheldTokensFromMintInstruction {\n    programId: PublicKey;\n    keys: {\n        mint: AccountMeta;\n        destination: AccountMeta;\n        authority: AccountMeta;\n        signers: AccountMeta[] | null;\n    };\n    data: {\n        instruction: TokenInstruction.TransferFeeExtension;\n        transferFeeInstruction: TransferFeeInstruction.WithdrawWithheldTokensFromMint;\n    };\n}\n\n/**\n * Decode a WithdrawWithheldTokensFromMint instruction and validate it\n *\n * @param instruction Transaction instruction to decode\n * @param programId   SPL Token program account\n *\n * @return Decoded, valid instruction\n */\nexport function decodeWithdrawWithheldTokensFromMintInstruction(\n    instruction: TransactionInstruction,\n    programId: PublicKey\n): DecodedWithdrawWithheldTokensFromMintInstruction {\n    if (!instruction.programId.equals(programId)) throw new TokenInvalidInstructionProgramError();\n    if (instruction.data.length !== withdrawWithheldTokensFromMintInstructionData.span)\n        throw new TokenInvalidInstructionDataError();\n\n    const {\n        keys: { mint, destination, authority, signers },\n        data,\n    } = decodeWithdrawWithheldTokensFromMintInstructionUnchecked(instruction);\n    if (\n        data.instruction !== TokenInstruction.TransferFeeExtension ||\n        data.transferFeeInstruction !== TransferFeeInstruction.WithdrawWithheldTokensFromMint\n    )\n        throw new TokenInvalidInstructionTypeError();\n    if (!mint) throw new TokenInvalidInstructionKeysError();\n\n    return {\n        programId,\n        keys: {\n            mint,\n            destination,\n            authority,\n            signers: signers ? signers : null,\n        },\n        data,\n    };\n}\n\n/** A decoded, valid WithdrawWithheldTokensFromMint instruction */\nexport interface DecodedWithdrawWithheldTokensFromMintInstructionUnchecked {\n    programId: PublicKey;\n    keys: {\n        mint: AccountMeta;\n        destination: AccountMeta;\n        authority: AccountMeta;\n        signers: AccountMeta[] | null;\n    };\n    data: {\n        instruction: TokenInstruction.TransferFeeExtension;\n        transferFeeInstruction: TransferFeeInstruction.WithdrawWithheldTokensFromMint;\n    };\n}\n\n/**\n * Decode a WithdrawWithheldTokensFromMint instruction without validating it\n *\n * @param instruction Transaction instruction to decode\n *\n * @return Decoded, non-validated instruction\n */\nexport function decodeWithdrawWithheldTokensFromMintInstructionUnchecked({\n    programId,\n    keys: [mint, destination, authority, ...signers],\n    data,\n}: TransactionInstruction): DecodedWithdrawWithheldTokensFromMintInstructionUnchecked {\n    const { instruction, transferFeeInstruction } = withdrawWithheldTokensFromMintInstructionData.decode(data);\n\n    return {\n        programId,\n        keys: {\n            mint,\n            destination,\n            authority,\n            signers,\n        },\n        data: {\n            instruction,\n            transferFeeInstruction,\n        },\n    };\n}\n\n// WithdrawWithheldTokensFromAccounts\nexport interface WithdrawWithheldTokensFromAccountsInstructionData {\n    instruction: TokenInstruction.TransferFeeExtension;\n    transferFeeInstruction: TransferFeeInstruction.WithdrawWithheldTokensFromAccounts;\n    numTokenAccounts: number;\n}\n\nexport const withdrawWithheldTokensFromAccountsInstructionData =\n    struct<WithdrawWithheldTokensFromAccountsInstructionData>([\n        u8('instruction'),\n        u8('transferFeeInstruction'),\n        u8('numTokenAccounts'),\n    ]);\n\n/**\n * Construct a WithdrawWithheldTokensFromAccounts instruction\n *\n * @param mint              The token mint\n * @param destination       The destination account\n * @param authority         The source account's owner/delegate\n * @param signers           The signer account(s)\n * @param sources           The source accounts to withdraw from\n * @param programID         SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\nexport function createWithdrawWithheldTokensFromAccountsInstruction(\n    mint: PublicKey,\n    destination: PublicKey,\n    authority: PublicKey,\n    signers: Signer[],\n    sources: PublicKey[],\n    programId = TOKEN_2022_PROGRAM_ID\n): TransactionInstruction {\n    if (!programSupportsExtensions(programId)) {\n        throw new TokenUnsupportedInstructionError();\n    }\n    const data = Buffer.alloc(withdrawWithheldTokensFromAccountsInstructionData.span);\n    withdrawWithheldTokensFromAccountsInstructionData.encode(\n        {\n            instruction: TokenInstruction.TransferFeeExtension,\n            transferFeeInstruction: TransferFeeInstruction.WithdrawWithheldTokensFromAccounts,\n            numTokenAccounts: sources.length,\n        },\n        data\n    );\n    const keys: AccountMeta[] = [];\n    keys.push(\n        { pubkey: mint, isSigner: false, isWritable: true },\n        { pubkey: destination, isSigner: false, isWritable: true },\n        { pubkey: authority, isSigner: !signers.length, isWritable: false }\n    );\n    for (const signer of signers) {\n        keys.push({ pubkey: signer.publicKey, isSigner: true, isWritable: false });\n    }\n    for (const source of sources) {\n        keys.push({ pubkey: source, isSigner: false, isWritable: true });\n    }\n    return new TransactionInstruction({ keys, programId, data });\n}\n\n/** A decoded, valid WithdrawWithheldTokensFromAccounts instruction */\nexport interface DecodedWithdrawWithheldTokensFromAccountsInstruction {\n    programId: PublicKey;\n    keys: {\n        mint: AccountMeta;\n        destination: AccountMeta;\n        authority: AccountMeta;\n        signers: AccountMeta[] | null;\n        sources: AccountMeta[] | null;\n    };\n    data: {\n        instruction: TokenInstruction.TransferFeeExtension;\n        transferFeeInstruction: TransferFeeInstruction.WithdrawWithheldTokensFromAccounts;\n        numTokenAccounts: number;\n    };\n}\n\n/**\n * Decode a WithdrawWithheldTokensFromAccounts instruction and validate it\n *\n * @param instruction Transaction instruction to decode\n * @param programId   SPL Token program account\n *\n * @return Decoded, valid instruction\n */\nexport function decodeWithdrawWithheldTokensFromAccountsInstruction(\n    instruction: TransactionInstruction,\n    programId: PublicKey\n): DecodedWithdrawWithheldTokensFromAccountsInstruction {\n    if (!instruction.programId.equals(programId)) throw new TokenInvalidInstructionProgramError();\n    if (instruction.data.length !== withdrawWithheldTokensFromAccountsInstructionData.span)\n        throw new TokenInvalidInstructionDataError();\n\n    const {\n        keys: { mint, destination, authority, signers, sources },\n        data,\n    } = decodeWithdrawWithheldTokensFromAccountsInstructionUnchecked(instruction);\n    if (\n        data.instruction !== TokenInstruction.TransferFeeExtension ||\n        data.transferFeeInstruction !== TransferFeeInstruction.WithdrawWithheldTokensFromAccounts\n    )\n        throw new TokenInvalidInstructionTypeError();\n    if (!mint) throw new TokenInvalidInstructionKeysError();\n\n    return {\n        programId,\n        keys: {\n            mint,\n            destination,\n            authority,\n            signers: signers ? signers : null,\n            sources: sources ? sources : null,\n        },\n        data,\n    };\n}\n\n/** A decoded, valid WithdrawWithheldTokensFromAccounts instruction */\nexport interface DecodedWithdrawWithheldTokensFromAccountsInstructionUnchecked {\n    programId: PublicKey;\n    keys: {\n        mint: AccountMeta;\n        destination: AccountMeta;\n        authority: AccountMeta;\n        signers: AccountMeta[] | null;\n        sources: AccountMeta[] | null;\n    };\n    data: {\n        instruction: TokenInstruction.TransferFeeExtension;\n        transferFeeInstruction: TransferFeeInstruction.WithdrawWithheldTokensFromAccounts;\n        numTokenAccounts: number;\n    };\n}\n\n/**\n * Decode a WithdrawWithheldTokensFromAccount instruction without validating it\n *\n * @param instruction Transaction instruction to decode\n *\n * @return Decoded, non-validated instruction\n */\nexport function decodeWithdrawWithheldTokensFromAccountsInstructionUnchecked({\n    programId,\n    keys,\n    data,\n}: TransactionInstruction): DecodedWithdrawWithheldTokensFromAccountsInstructionUnchecked {\n    const { instruction, transferFeeInstruction, numTokenAccounts } =\n        withdrawWithheldTokensFromAccountsInstructionData.decode(data);\n    const [mint, destination, authority, signers, sources] = [\n        keys[0],\n        keys[1],\n        keys[2],\n        keys.slice(3, 3 + numTokenAccounts),\n        keys.slice(-1 * numTokenAccounts),\n    ];\n    return {\n        programId,\n        keys: {\n            mint,\n            destination,\n            authority,\n            signers,\n            sources,\n        },\n        data: {\n            instruction,\n            transferFeeInstruction,\n            numTokenAccounts,\n        },\n    };\n}\n\n// HarvestWithheldTokensToMint\n\nexport interface HarvestWithheldTokensToMintInstructionData {\n    instruction: TokenInstruction.TransferFeeExtension;\n    transferFeeInstruction: TransferFeeInstruction.HarvestWithheldTokensToMint;\n}\n\nexport const harvestWithheldTokensToMintInstructionData = struct<HarvestWithheldTokensToMintInstructionData>([\n    u8('instruction'),\n    u8('transferFeeInstruction'),\n]);\n\n/**\n * Construct a HarvestWithheldTokensToMint instruction\n *\n * @param mint              The token mint\n * @param sources           The source accounts to withdraw from\n * @param programID         SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\nexport function createHarvestWithheldTokensToMintInstruction(\n    mint: PublicKey,\n    sources: PublicKey[],\n    programId = TOKEN_2022_PROGRAM_ID\n): TransactionInstruction {\n    if (!programSupportsExtensions(programId)) {\n        throw new TokenUnsupportedInstructionError();\n    }\n    const data = Buffer.alloc(harvestWithheldTokensToMintInstructionData.span);\n    harvestWithheldTokensToMintInstructionData.encode(\n        {\n            instruction: TokenInstruction.TransferFeeExtension,\n            transferFeeInstruction: TransferFeeInstruction.HarvestWithheldTokensToMint,\n        },\n        data\n    );\n    const keys: AccountMeta[] = [];\n    keys.push({ pubkey: mint, isSigner: false, isWritable: true });\n    for (const source of sources) {\n        keys.push({ pubkey: source, isSigner: false, isWritable: true });\n    }\n    return new TransactionInstruction({ keys, programId, data });\n}\n\n/** A decoded, valid HarvestWithheldTokensToMint instruction */\nexport interface DecodedHarvestWithheldTokensToMintInstruction {\n    programId: PublicKey;\n    keys: {\n        mint: AccountMeta;\n        sources: AccountMeta[] | null;\n    };\n    data: {\n        instruction: TokenInstruction.TransferFeeExtension;\n        transferFeeInstruction: TransferFeeInstruction.HarvestWithheldTokensToMint;\n    };\n}\n\n/**\n * Decode a HarvestWithheldTokensToMint instruction and validate it\n *\n * @param instruction Transaction instruction to decode\n * @param programId   SPL Token program account\n *\n * @return Decoded, valid instruction\n */\nexport function decodeHarvestWithheldTokensToMintInstruction(\n    instruction: TransactionInstruction,\n    programId: PublicKey\n): DecodedHarvestWithheldTokensToMintInstruction {\n    if (!instruction.programId.equals(programId)) throw new TokenInvalidInstructionProgramError();\n    if (instruction.data.length !== harvestWithheldTokensToMintInstructionData.span)\n        throw new TokenInvalidInstructionDataError();\n\n    const {\n        keys: { mint, sources },\n        data,\n    } = decodeHarvestWithheldTokensToMintInstructionUnchecked(instruction);\n    if (\n        data.instruction !== TokenInstruction.TransferFeeExtension ||\n        data.transferFeeInstruction !== TransferFeeInstruction.HarvestWithheldTokensToMint\n    )\n        throw new TokenInvalidInstructionTypeError();\n    if (!mint) throw new TokenInvalidInstructionKeysError();\n\n    return {\n        programId,\n        keys: {\n            mint,\n            sources,\n        },\n        data,\n    };\n}\n\n/** A decoded, valid HarvestWithheldTokensToMint instruction */\nexport interface DecodedHarvestWithheldTokensToMintInstructionUnchecked {\n    programId: PublicKey;\n    keys: {\n        mint: AccountMeta;\n        sources: AccountMeta[] | null;\n    };\n    data: {\n        instruction: TokenInstruction.TransferFeeExtension;\n        transferFeeInstruction: TransferFeeInstruction.HarvestWithheldTokensToMint;\n    };\n}\n\n/**\n * Decode a HarvestWithheldTokensToMint instruction without validating it\n *\n * @param instruction Transaction instruction to decode\n *\n * @return Decoded, non-validated instruction\n */\nexport function decodeHarvestWithheldTokensToMintInstructionUnchecked({\n    programId,\n    keys: [mint, ...sources],\n    data,\n}: TransactionInstruction): DecodedHarvestWithheldTokensToMintInstructionUnchecked {\n    const { instruction, transferFeeInstruction } = harvestWithheldTokensToMintInstructionData.decode(data);\n    return {\n        programId,\n        keys: {\n            mint,\n            sources,\n        },\n        data: {\n            instruction,\n            transferFeeInstruction,\n        },\n    };\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}