{"ast":null,"code":"import _regeneratorRuntime from \"/Users/ivan/Metadata/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"/Users/ivan/Metadata/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { sendAndConfirmTransaction, Transaction } from '@solana/web3.js';\nimport { ASSOCIATED_TOKEN_PROGRAM_ID, TOKEN_PROGRAM_ID } from '../constants.js';\nimport { createAssociatedTokenAccountInstruction } from '../instructions/associatedTokenAccount.js';\nimport { getAssociatedTokenAddress } from '../state/mint.js';\n/**\n * Create and initialize a new associated token account\n *\n * @param connection               Connection to use\n * @param payer                    Payer of the transaction and initialization fees\n * @param mint                     Mint for the account\n * @param owner                    Owner of the new account\n * @param confirmOptions           Options for confirming the transaction\n * @param programId                SPL Token program account\n * @param associatedTokenProgramId SPL Associated Token program account\n *\n * @return Address of the new associated token account\n */\nexport function createAssociatedTokenAccount(_x, _x2, _x3, _x4, _x5) {\n  return _createAssociatedTokenAccount.apply(this, arguments);\n}\nfunction _createAssociatedTokenAccount() {\n  _createAssociatedTokenAccount = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(connection, payer, mint, owner, confirmOptions) {\n    var programId,\n      associatedTokenProgramId,\n      associatedToken,\n      transaction,\n      _args = arguments;\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            programId = _args.length > 5 && _args[5] !== undefined ? _args[5] : TOKEN_PROGRAM_ID;\n            associatedTokenProgramId = _args.length > 6 && _args[6] !== undefined ? _args[6] : ASSOCIATED_TOKEN_PROGRAM_ID;\n            _context.next = 4;\n            return getAssociatedTokenAddress(mint, owner, false, programId, associatedTokenProgramId);\n          case 4:\n            associatedToken = _context.sent;\n            transaction = new Transaction().add(createAssociatedTokenAccountInstruction(payer.publicKey, associatedToken, owner, mint, programId, associatedTokenProgramId));\n            _context.next = 8;\n            return sendAndConfirmTransaction(connection, transaction, [payer], confirmOptions);\n          case 8:\n            return _context.abrupt(\"return\", associatedToken);\n          case 9:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _createAssociatedTokenAccount.apply(this, arguments);\n}","map":{"version":3,"mappings":";;AACA,SAASA,yBAAyB,EAAEC,WAAW,QAAQ,iBAAiB;AACxE,SAASC,2BAA2B,EAAEC,gBAAgB,QAAQ,iBAAiB;AAC/E,SAASC,uCAAuC,QAAQ,2CAA2C;AACnG,SAASC,yBAAyB,QAAQ,kBAAkB;AAE5D;;;;;;;;;;;;;AAaA,gBAAsBC,4BAA4B;EAAA;AAAA;AAyBjD;EAAA,2FAzBM,iBACHC,UAAsB,EACtBC,KAAa,EACbC,IAAe,EACfC,KAAgB,EAChBC,cAA+B;IAAA;MAAA;MAAA;MAAA;MAAA;IAAA;MAAA;QAAA;UAAA;YAC/BC,SAAS,2DAAGT,gBAAgB;YAC5BU,wBAAwB,2DAAGX,2BAA2B;YAAA;YAAA,OAExBG,yBAAyB,CAACI,IAAI,EAAEC,KAAK,EAAE,KAAK,EAAEE,SAAS,EAAEC,wBAAwB,CAAC;UAAA;YAA1GC,eAAe;YAEfC,WAAW,GAAG,IAAId,WAAW,EAAE,CAACe,GAAG,CACrCZ,uCAAuC,CACnCI,KAAK,CAACS,SAAS,EACfH,eAAe,EACfJ,KAAK,EACLD,IAAI,EACJG,SAAS,EACTC,wBAAwB,CAC3B,CACJ;YAAA;YAAA,OAEKb,yBAAyB,CAACO,UAAU,EAAEQ,WAAW,EAAE,CAACP,KAAK,CAAC,EAAEG,cAAc,CAAC;UAAA;YAAA,iCAE1EG,eAAe;UAAA;UAAA;YAAA;QAAA;MAAA;IAAA;EAAA,CACzB;EAAA;AAAA","names":["sendAndConfirmTransaction","Transaction","ASSOCIATED_TOKEN_PROGRAM_ID","TOKEN_PROGRAM_ID","createAssociatedTokenAccountInstruction","getAssociatedTokenAddress","createAssociatedTokenAccount","connection","payer","mint","owner","confirmOptions","programId","associatedTokenProgramId","associatedToken","transaction","add","publicKey"],"sources":["/Users/ivan/Metadata/node_modules/@solana/spl-token/src/actions/createAssociatedTokenAccount.ts"],"sourcesContent":["import type { ConfirmOptions, Connection, PublicKey, Signer } from '@solana/web3.js';\nimport { sendAndConfirmTransaction, Transaction } from '@solana/web3.js';\nimport { ASSOCIATED_TOKEN_PROGRAM_ID, TOKEN_PROGRAM_ID } from '../constants.js';\nimport { createAssociatedTokenAccountInstruction } from '../instructions/associatedTokenAccount.js';\nimport { getAssociatedTokenAddress } from '../state/mint.js';\n\n/**\n * Create and initialize a new associated token account\n *\n * @param connection               Connection to use\n * @param payer                    Payer of the transaction and initialization fees\n * @param mint                     Mint for the account\n * @param owner                    Owner of the new account\n * @param confirmOptions           Options for confirming the transaction\n * @param programId                SPL Token program account\n * @param associatedTokenProgramId SPL Associated Token program account\n *\n * @return Address of the new associated token account\n */\nexport async function createAssociatedTokenAccount(\n    connection: Connection,\n    payer: Signer,\n    mint: PublicKey,\n    owner: PublicKey,\n    confirmOptions?: ConfirmOptions,\n    programId = TOKEN_PROGRAM_ID,\n    associatedTokenProgramId = ASSOCIATED_TOKEN_PROGRAM_ID\n): Promise<PublicKey> {\n    const associatedToken = await getAssociatedTokenAddress(mint, owner, false, programId, associatedTokenProgramId);\n\n    const transaction = new Transaction().add(\n        createAssociatedTokenAccountInstruction(\n            payer.publicKey,\n            associatedToken,\n            owner,\n            mint,\n            programId,\n            associatedTokenProgramId\n        )\n    );\n\n    await sendAndConfirmTransaction(connection, transaction, [payer], confirmOptions);\n\n    return associatedToken;\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}