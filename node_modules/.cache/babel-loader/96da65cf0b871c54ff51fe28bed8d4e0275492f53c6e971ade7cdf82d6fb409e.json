{"ast":null,"code":"import _regeneratorRuntime from \"/Users/ivan/Metadata/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _toConsumableArray from \"/Users/ivan/Metadata/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _slicedToArray from \"/Users/ivan/Metadata/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _asyncToGenerator from \"/Users/ivan/Metadata/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { sendAndConfirmTransaction, Transaction } from '@solana/web3.js';\nimport { getSigners } from '../../actions/internal.js';\nimport { TOKEN_2022_PROGRAM_ID } from '../../constants.js';\nimport { createHarvestWithheldTokensToMintInstruction, createTransferCheckedWithFeeInstruction, createWithdrawWithheldTokensFromAccountsInstruction, createWithdrawWithheldTokensFromMintInstruction } from './instructions.js';\n/**\n * Transfer tokens from one account to another, asserting the transfer fee, token mint, and decimals\n *\n * @param connection     Connection to use\n * @param payer          Payer of the transaction fees\n * @param source         Source account\n * @param mint           Mint for the account\n * @param destination    Destination account\n * @param owner          Owner of the source account\n * @param amount         Number of tokens to transfer\n * @param decimals       Number of decimals in transfer amount\n * @param multiSigners   Signing accounts if `owner` is a multisig\n * @param confirmOptions Options for confirming the transaction\n * @param programId      SPL Token program account\n *\n * @return Signature of the confirmed transaction\n */\nexport function transferCheckedWithFee(_x, _x2, _x3, _x4, _x5, _x6, _x7, _x8, _x9) {\n  return _transferCheckedWithFee.apply(this, arguments);\n}\n/**\n * Withdraw withheld tokens from mint\n *\n * @param connection     Connection to use\n * @param payer          Payer of the transaction fees\n * @param mint           The token mint\n * @param destination    The destination account\n * @param authority      The mint's withdraw withheld tokens authority\n * @param multiSigners   Signing accounts if `owner` is a multisig\n * @param confirmOptions Options for confirming the transaction\n * @param programId      SPL Token program account\n *\n * @return Signature of the confirmed transaction\n */\nfunction _transferCheckedWithFee() {\n  _transferCheckedWithFee = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(connection, payer, source, mint, destination, owner, amount, decimals, fee) {\n    var multiSigners,\n      confirmOptions,\n      programId,\n      _getSigners,\n      _getSigners2,\n      ownerPublicKey,\n      signers,\n      transaction,\n      _args = arguments;\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            multiSigners = _args.length > 9 && _args[9] !== undefined ? _args[9] : [];\n            confirmOptions = _args.length > 10 ? _args[10] : undefined;\n            programId = _args.length > 11 && _args[11] !== undefined ? _args[11] : TOKEN_2022_PROGRAM_ID;\n            _getSigners = getSigners(owner, multiSigners), _getSigners2 = _slicedToArray(_getSigners, 2), ownerPublicKey = _getSigners2[0], signers = _getSigners2[1];\n            transaction = new Transaction().add(createTransferCheckedWithFeeInstruction(source, mint, destination, ownerPublicKey, amount, decimals, fee, multiSigners, programId));\n            _context.next = 7;\n            return sendAndConfirmTransaction(connection, transaction, [payer].concat(_toConsumableArray(signers)), confirmOptions);\n          case 7:\n            return _context.abrupt(\"return\", _context.sent);\n          case 8:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _transferCheckedWithFee.apply(this, arguments);\n}\nexport function withdrawWithheldTokensFromMint(_x10, _x11, _x12, _x13, _x14) {\n  return _withdrawWithheldTokensFromMint.apply(this, arguments);\n}\n/**\n * Withdraw withheld tokens from accounts\n *\n * @param connection     Connection to use\n * @param payer          Payer of the transaction fees\n * @param mint           The token mint\n * @param destination    The destination account\n * @param authority      The mint's withdraw withheld tokens authority\n * @param multiSigners   Signing accounts if `owner` is a multisig\n * @param sources        Source accounts from which to withdraw withheld fees\n * @param confirmOptions Options for confirming the transaction\n * @param programId      SPL Token program account\n *\n * @return Signature of the confirmed transaction\n */\nfunction _withdrawWithheldTokensFromMint() {\n  _withdrawWithheldTokensFromMint = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(connection, payer, mint, destination, authority) {\n    var multiSigners,\n      confirmOptions,\n      programId,\n      _getSigners3,\n      _getSigners4,\n      authorityPublicKey,\n      signers,\n      transaction,\n      _args2 = arguments;\n    return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            multiSigners = _args2.length > 5 && _args2[5] !== undefined ? _args2[5] : [];\n            confirmOptions = _args2.length > 6 ? _args2[6] : undefined;\n            programId = _args2.length > 7 && _args2[7] !== undefined ? _args2[7] : TOKEN_2022_PROGRAM_ID;\n            _getSigners3 = getSigners(authority, multiSigners), _getSigners4 = _slicedToArray(_getSigners3, 2), authorityPublicKey = _getSigners4[0], signers = _getSigners4[1];\n            transaction = new Transaction().add(createWithdrawWithheldTokensFromMintInstruction(mint, destination, authorityPublicKey, signers, programId));\n            _context2.next = 7;\n            return sendAndConfirmTransaction(connection, transaction, [payer].concat(_toConsumableArray(signers)), confirmOptions);\n          case 7:\n            return _context2.abrupt(\"return\", _context2.sent);\n          case 8:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n  return _withdrawWithheldTokensFromMint.apply(this, arguments);\n}\nexport function withdrawWithheldTokensFromAccounts(_x15, _x16, _x17, _x18, _x19, _x20, _x21, _x22) {\n  return _withdrawWithheldTokensFromAccounts.apply(this, arguments);\n}\n/**\n * Harvest withheld tokens from accounts to the mint\n *\n * @param connection     Connection to use\n * @param payer          Payer of the transaction fees\n * @param mint           The token mint\n * @param sources        Source accounts from which to withdraw withheld fees\n * @param confirmOptions Options for confirming the transaction\n * @param programId      SPL Token program account\n *\n * @return Signature of the confirmed transaction\n */\nfunction _withdrawWithheldTokensFromAccounts() {\n  _withdrawWithheldTokensFromAccounts = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(connection, payer, mint, destination, authority, multiSigners, sources, confirmOptions) {\n    var programId,\n      _getSigners5,\n      _getSigners6,\n      authorityPublicKey,\n      signers,\n      transaction,\n      _args3 = arguments;\n    return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            programId = _args3.length > 8 && _args3[8] !== undefined ? _args3[8] : TOKEN_2022_PROGRAM_ID;\n            _getSigners5 = getSigners(authority, multiSigners), _getSigners6 = _slicedToArray(_getSigners5, 2), authorityPublicKey = _getSigners6[0], signers = _getSigners6[1];\n            transaction = new Transaction().add(createWithdrawWithheldTokensFromAccountsInstruction(mint, destination, authorityPublicKey, signers, sources, programId));\n            _context3.next = 5;\n            return sendAndConfirmTransaction(connection, transaction, [payer].concat(_toConsumableArray(signers)), confirmOptions);\n          case 5:\n            return _context3.abrupt(\"return\", _context3.sent);\n          case 6:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3);\n  }));\n  return _withdrawWithheldTokensFromAccounts.apply(this, arguments);\n}\nexport function harvestWithheldTokensToMint(_x23, _x24, _x25, _x26, _x27) {\n  return _harvestWithheldTokensToMint.apply(this, arguments);\n}\nfunction _harvestWithheldTokensToMint() {\n  _harvestWithheldTokensToMint = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(connection, payer, mint, sources, confirmOptions) {\n    var programId,\n      transaction,\n      _args4 = arguments;\n    return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            programId = _args4.length > 5 && _args4[5] !== undefined ? _args4[5] : TOKEN_2022_PROGRAM_ID;\n            transaction = new Transaction().add(createHarvestWithheldTokensToMintInstruction(mint, sources, programId));\n            _context4.next = 4;\n            return sendAndConfirmTransaction(connection, transaction, [payer], confirmOptions);\n          case 4:\n            return _context4.abrupt(\"return\", _context4.sent);\n          case 5:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, _callee4);\n  }));\n  return _harvestWithheldTokensToMint.apply(this, arguments);\n}","map":{"version":3,"mappings":"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","names":["sendAndConfirmTransaction","Transaction","getSigners","TOKEN_2022_PROGRAM_ID","createHarvestWithheldTokensToMintInstruction","createTransferCheckedWithFeeInstruction","createWithdrawWithheldTokensFromAccountsInstruction","createWithdrawWithheldTokensFromMintInstruction","transferCheckedWithFee","connection","payer","source","mint","destination","owner","amount","decimals","fee","multiSigners","confirmOptions","programId","ownerPublicKey","signers","transaction","add","withdrawWithheldTokensFromMint","authority","authorityPublicKey","withdrawWithheldTokensFromAccounts","sources","harvestWithheldTokensToMint"],"sources":["/Users/ivan/Metadata/node_modules/@solana/spl-token/src/extensions/transferFee/actions.ts"],"sourcesContent":["import type { ConfirmOptions, Connection, PublicKey, Signer, TransactionSignature } from '@solana/web3.js';\nimport { sendAndConfirmTransaction, Transaction } from '@solana/web3.js';\nimport { getSigners } from '../../actions/internal.js';\nimport { TOKEN_2022_PROGRAM_ID } from '../../constants.js';\nimport {\n    createHarvestWithheldTokensToMintInstruction,\n    createTransferCheckedWithFeeInstruction,\n    createWithdrawWithheldTokensFromAccountsInstruction,\n    createWithdrawWithheldTokensFromMintInstruction,\n} from './instructions.js';\n\n/**\n * Transfer tokens from one account to another, asserting the transfer fee, token mint, and decimals\n *\n * @param connection     Connection to use\n * @param payer          Payer of the transaction fees\n * @param source         Source account\n * @param mint           Mint for the account\n * @param destination    Destination account\n * @param owner          Owner of the source account\n * @param amount         Number of tokens to transfer\n * @param decimals       Number of decimals in transfer amount\n * @param multiSigners   Signing accounts if `owner` is a multisig\n * @param confirmOptions Options for confirming the transaction\n * @param programId      SPL Token program account\n *\n * @return Signature of the confirmed transaction\n */\nexport async function transferCheckedWithFee(\n    connection: Connection,\n    payer: Signer,\n    source: PublicKey,\n    mint: PublicKey,\n    destination: PublicKey,\n    owner: Signer | PublicKey,\n    amount: bigint,\n    decimals: number,\n    fee: bigint,\n    multiSigners: Signer[] = [],\n    confirmOptions?: ConfirmOptions,\n    programId = TOKEN_2022_PROGRAM_ID\n): Promise<TransactionSignature> {\n    const [ownerPublicKey, signers] = getSigners(owner, multiSigners);\n\n    const transaction = new Transaction().add(\n        createTransferCheckedWithFeeInstruction(\n            source,\n            mint,\n            destination,\n            ownerPublicKey,\n            amount,\n            decimals,\n            fee,\n            multiSigners,\n            programId\n        )\n    );\n\n    return await sendAndConfirmTransaction(connection, transaction, [payer, ...signers], confirmOptions);\n}\n\n/**\n * Withdraw withheld tokens from mint\n *\n * @param connection     Connection to use\n * @param payer          Payer of the transaction fees\n * @param mint           The token mint\n * @param destination    The destination account\n * @param authority      The mint's withdraw withheld tokens authority\n * @param multiSigners   Signing accounts if `owner` is a multisig\n * @param confirmOptions Options for confirming the transaction\n * @param programId      SPL Token program account\n *\n * @return Signature of the confirmed transaction\n */\nexport async function withdrawWithheldTokensFromMint(\n    connection: Connection,\n    payer: Signer,\n    mint: PublicKey,\n    destination: PublicKey,\n    authority: Signer | PublicKey,\n    multiSigners: Signer[] = [],\n    confirmOptions?: ConfirmOptions,\n    programId = TOKEN_2022_PROGRAM_ID\n): Promise<TransactionSignature> {\n    const [authorityPublicKey, signers] = getSigners(authority, multiSigners);\n\n    const transaction = new Transaction().add(\n        createWithdrawWithheldTokensFromMintInstruction(mint, destination, authorityPublicKey, signers, programId)\n    );\n\n    return await sendAndConfirmTransaction(connection, transaction, [payer, ...signers], confirmOptions);\n}\n\n/**\n * Withdraw withheld tokens from accounts\n *\n * @param connection     Connection to use\n * @param payer          Payer of the transaction fees\n * @param mint           The token mint\n * @param destination    The destination account\n * @param authority      The mint's withdraw withheld tokens authority\n * @param multiSigners   Signing accounts if `owner` is a multisig\n * @param sources        Source accounts from which to withdraw withheld fees\n * @param confirmOptions Options for confirming the transaction\n * @param programId      SPL Token program account\n *\n * @return Signature of the confirmed transaction\n */\nexport async function withdrawWithheldTokensFromAccounts(\n    connection: Connection,\n    payer: Signer,\n    mint: PublicKey,\n    destination: PublicKey,\n    authority: Signer | PublicKey,\n    multiSigners: Signer[],\n    sources: PublicKey[],\n    confirmOptions?: ConfirmOptions,\n    programId = TOKEN_2022_PROGRAM_ID\n): Promise<TransactionSignature> {\n    const [authorityPublicKey, signers] = getSigners(authority, multiSigners);\n\n    const transaction = new Transaction().add(\n        createWithdrawWithheldTokensFromAccountsInstruction(\n            mint,\n            destination,\n            authorityPublicKey,\n            signers,\n            sources,\n            programId\n        )\n    );\n\n    return await sendAndConfirmTransaction(connection, transaction, [payer, ...signers], confirmOptions);\n}\n\n/**\n * Harvest withheld tokens from accounts to the mint\n *\n * @param connection     Connection to use\n * @param payer          Payer of the transaction fees\n * @param mint           The token mint\n * @param sources        Source accounts from which to withdraw withheld fees\n * @param confirmOptions Options for confirming the transaction\n * @param programId      SPL Token program account\n *\n * @return Signature of the confirmed transaction\n */\nexport async function harvestWithheldTokensToMint(\n    connection: Connection,\n    payer: Signer,\n    mint: PublicKey,\n    sources: PublicKey[],\n    confirmOptions?: ConfirmOptions,\n    programId = TOKEN_2022_PROGRAM_ID\n): Promise<TransactionSignature> {\n    const transaction = new Transaction().add(createHarvestWithheldTokensToMintInstruction(mint, sources, programId));\n\n    return await sendAndConfirmTransaction(connection, transaction, [payer], confirmOptions);\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}