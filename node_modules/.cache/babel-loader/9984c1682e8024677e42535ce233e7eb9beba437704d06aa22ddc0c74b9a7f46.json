{"ast":null,"code":"import _objectSpread from \"/Users/ivan/Metadata/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _slicedToArray from \"/Users/ivan/Metadata/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _toConsumableArray from \"/Users/ivan/Metadata/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _objectWithoutProperties from \"/Users/ivan/Metadata/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js\";\nimport _regeneratorRuntime from \"/Users/ivan/Metadata/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"/Users/ivan/Metadata/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _classCallCheck from \"/Users/ivan/Metadata/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/ivan/Metadata/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _assertThisInitialized from \"/Users/ivan/Metadata/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";\nimport _inherits from \"/Users/ivan/Metadata/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/ivan/Metadata/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nvar _excluded = [\"signers\"];\nvar __classPrivateFieldSet = this && this.__classPrivateFieldSet || function (receiver, state, value, kind, f) {\n  if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n  return kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;\n};\nvar __classPrivateFieldGet = this && this.__classPrivateFieldGet || function (receiver, state, kind, f) {\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n  return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar _StandardWalletAdapter_instances, _StandardWalletAdapter_account, _StandardWalletAdapter_publicKey, _StandardWalletAdapter_connecting, _StandardWalletAdapter_off, _StandardWalletAdapter_wallet, _StandardWalletAdapter_supportedTransactionVersions, _StandardWalletAdapter_readyState, _StandardWalletAdapter_connected, _StandardWalletAdapter_disconnected, _StandardWalletAdapter_changed, _StandardWalletAdapter_signTransaction, _StandardWalletAdapter_signAllTransactions, _StandardWalletAdapter_signMessage;\nimport { BaseWalletAdapter, WalletAccountError, WalletConfigError, WalletConnectionError, WalletDisconnectedError, WalletDisconnectionError, WalletError, WalletNotConnectedError, WalletNotReadyError, WalletPublicKeyError, WalletReadyState, WalletSendTransactionError, WalletSignMessageError, WalletSignTransactionError } from '@solana/wallet-adapter-base';\nimport { getChainForEndpoint, getCommitment } from '@solana/wallet-standard-util';\nimport { PublicKey, Transaction, VersionedTransaction } from '@solana/web3.js';\nimport { arraysEqual } from '@wallet-standard/wallet';\nimport bs58 from 'bs58';\nimport { isVersionedTransaction } from './transaction.js';\n/** TODO: docs */\nexport function isWalletAdapterCompatibleWallet(wallet) {\n  return 'standard:connect' in wallet.features && 'standard:events' in wallet.features && ('solana:signAndSendTransaction' in wallet.features || 'solana:signTransaction' in wallet.features);\n}\n/** TODO: docs */\nexport var StandardWalletAdapter = /*#__PURE__*/function (_BaseWalletAdapter) {\n  _inherits(StandardWalletAdapter, _BaseWalletAdapter);\n  var _super = _createSuper(StandardWalletAdapter);\n  function StandardWalletAdapter(_ref) {\n    var _this;\n    var wallet = _ref.wallet;\n    _classCallCheck(this, StandardWalletAdapter);\n    _this = _super.call(this);\n    _StandardWalletAdapter_instances.add(_assertThisInitialized(_this));\n    _StandardWalletAdapter_account.set(_assertThisInitialized(_this), void 0);\n    _StandardWalletAdapter_publicKey.set(_assertThisInitialized(_this), void 0);\n    _StandardWalletAdapter_connecting.set(_assertThisInitialized(_this), void 0);\n    _StandardWalletAdapter_off.set(_assertThisInitialized(_this), void 0);\n    _StandardWalletAdapter_wallet.set(_assertThisInitialized(_this), void 0);\n    _StandardWalletAdapter_supportedTransactionVersions.set(_assertThisInitialized(_this), void 0);\n    _StandardWalletAdapter_readyState.set(_assertThisInitialized(_this), typeof window === 'undefined' || typeof document === 'undefined' ? WalletReadyState.Unsupported : WalletReadyState.Installed);\n    _StandardWalletAdapter_changed.set(_assertThisInitialized(_this), function (properties) {\n      // If the adapter isn't connected or the change doesn't include accounts, do nothing.\n      if (!__classPrivateFieldGet(_assertThisInitialized(_this), _StandardWalletAdapter_account, \"f\") || !__classPrivateFieldGet(_assertThisInitialized(_this), _StandardWalletAdapter_publicKey, \"f\") || !('accounts' in properties)) return;\n      var account = __classPrivateFieldGet(_assertThisInitialized(_this), _StandardWalletAdapter_wallet, \"f\").accounts[0];\n      // If there's no connected account, disconnect the adapter.\n      if (!account) {\n        __classPrivateFieldGet(_assertThisInitialized(_this), _StandardWalletAdapter_instances, \"m\", _StandardWalletAdapter_disconnected).call(_assertThisInitialized(_this));\n        _this.emit('error', new WalletDisconnectedError());\n        _this.emit('disconnect');\n        return;\n      }\n      // If the account hasn't actually changed, do nothing.\n      if (account === __classPrivateFieldGet(_assertThisInitialized(_this), _StandardWalletAdapter_account, \"f\")) return;\n      var publicKey;\n      // If the account public key isn't valid, disconnect the adapter.\n      try {\n        publicKey = new PublicKey(account.publicKey);\n      } catch (error) {\n        __classPrivateFieldGet(_assertThisInitialized(_this), _StandardWalletAdapter_instances, \"m\", _StandardWalletAdapter_disconnected).call(_assertThisInitialized(_this));\n        _this.emit('error', new WalletPublicKeyError(error === null || error === void 0 ? void 0 : error.message));\n        _this.emit('disconnect');\n        return;\n      }\n      // Change the adapter's account and public key and emit an event.\n      __classPrivateFieldGet(_assertThisInitialized(_this), _StandardWalletAdapter_instances, \"m\", _StandardWalletAdapter_connected).call(_assertThisInitialized(_this), account, publicKey);\n      _this.emit('connect', publicKey);\n    });\n    __classPrivateFieldSet(_assertThisInitialized(_this), _StandardWalletAdapter_wallet, wallet, \"f\");\n    var supportedTransactionVersions = 'solana:signAndSendTransaction' in wallet.features ? wallet.features['solana:signAndSendTransaction'].supportedTransactionVersions : wallet.features['solana:signTransaction'].supportedTransactionVersions;\n    __classPrivateFieldSet(_assertThisInitialized(_this), _StandardWalletAdapter_supportedTransactionVersions, arraysEqual(supportedTransactionVersions, ['legacy']) ? null : new Set(supportedTransactionVersions), \"f\");\n    __classPrivateFieldSet(_assertThisInitialized(_this), _StandardWalletAdapter_account, null, \"f\");\n    __classPrivateFieldSet(_assertThisInitialized(_this), _StandardWalletAdapter_publicKey, null, \"f\");\n    __classPrivateFieldSet(_assertThisInitialized(_this), _StandardWalletAdapter_connecting, false, \"f\");\n    return _this;\n  }\n  _createClass(StandardWalletAdapter, [{\n    key: \"supportedTransactionVersions\",\n    get: function get() {\n      return __classPrivateFieldGet(this, _StandardWalletAdapter_supportedTransactionVersions, \"f\");\n    }\n  }, {\n    key: \"name\",\n    get: function get() {\n      return __classPrivateFieldGet(this, _StandardWalletAdapter_wallet, \"f\").name;\n    }\n  }, {\n    key: \"icon\",\n    get: function get() {\n      return __classPrivateFieldGet(this, _StandardWalletAdapter_wallet, \"f\").icon;\n    }\n  }, {\n    key: \"url\",\n    get: function get() {\n      return 'https://github.com/wallet-standard';\n    }\n  }, {\n    key: \"publicKey\",\n    get: function get() {\n      return __classPrivateFieldGet(this, _StandardWalletAdapter_publicKey, \"f\");\n    }\n  }, {\n    key: \"connecting\",\n    get: function get() {\n      return __classPrivateFieldGet(this, _StandardWalletAdapter_connecting, \"f\");\n    }\n  }, {\n    key: \"readyState\",\n    get: function get() {\n      return __classPrivateFieldGet(this, _StandardWalletAdapter_readyState, \"f\");\n    }\n  }, {\n    key: \"wallet\",\n    get: function get() {\n      return __classPrivateFieldGet(this, _StandardWalletAdapter_wallet, \"f\");\n    }\n  }, {\n    key: \"standard\",\n    get: function get() {\n      return true;\n    }\n  }, {\n    key: \"connect\",\n    value: function () {\n      var _connect = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        var account, publicKey;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.prev = 0;\n                if (!(this.connected || this.connecting)) {\n                  _context.next = 3;\n                  break;\n                }\n                return _context.abrupt(\"return\");\n              case 3:\n                if (!(__classPrivateFieldGet(this, _StandardWalletAdapter_readyState, \"f\") !== WalletReadyState.Installed)) {\n                  _context.next = 5;\n                  break;\n                }\n                throw new WalletNotReadyError();\n              case 5:\n                __classPrivateFieldSet(this, _StandardWalletAdapter_connecting, true, \"f\");\n                if (__classPrivateFieldGet(this, _StandardWalletAdapter_wallet, \"f\").accounts.length) {\n                  _context.next = 15;\n                  break;\n                }\n                _context.prev = 7;\n                _context.next = 10;\n                return __classPrivateFieldGet(this, _StandardWalletAdapter_wallet, \"f\").features['standard:connect'].connect();\n              case 10:\n                _context.next = 15;\n                break;\n              case 12:\n                _context.prev = 12;\n                _context.t0 = _context[\"catch\"](7);\n                throw new WalletConnectionError(_context.t0 === null || _context.t0 === void 0 ? void 0 : _context.t0.message, _context.t0);\n              case 15:\n                if (__classPrivateFieldGet(this, _StandardWalletAdapter_wallet, \"f\").accounts.length) {\n                  _context.next = 17;\n                  break;\n                }\n                throw new WalletAccountError();\n              case 17:\n                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n                account = __classPrivateFieldGet(this, _StandardWalletAdapter_wallet, \"f\").accounts[0];\n                _context.prev = 18;\n                publicKey = new PublicKey(account.publicKey);\n                _context.next = 25;\n                break;\n              case 22:\n                _context.prev = 22;\n                _context.t1 = _context[\"catch\"](18);\n                throw new WalletPublicKeyError(_context.t1 === null || _context.t1 === void 0 ? void 0 : _context.t1.message, _context.t1);\n              case 25:\n                __classPrivateFieldSet(this, _StandardWalletAdapter_off, __classPrivateFieldGet(this, _StandardWalletAdapter_wallet, \"f\").features['standard:events'].on('change', __classPrivateFieldGet(this, _StandardWalletAdapter_changed, \"f\")), \"f\");\n                __classPrivateFieldGet(this, _StandardWalletAdapter_instances, \"m\", _StandardWalletAdapter_connected).call(this, account, publicKey);\n                this.emit('connect', publicKey);\n                _context.next = 34;\n                break;\n              case 30:\n                _context.prev = 30;\n                _context.t2 = _context[\"catch\"](0);\n                this.emit('error', _context.t2);\n                throw _context.t2;\n              case 34:\n                _context.prev = 34;\n                __classPrivateFieldSet(this, _StandardWalletAdapter_connecting, false, \"f\");\n                return _context.finish(34);\n              case 37:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this, [[0, 30, 34, 37], [7, 12], [18, 22]]);\n      }));\n      function connect() {\n        return _connect.apply(this, arguments);\n      }\n      return connect;\n    }()\n  }, {\n    key: \"disconnect\",\n    value: function () {\n      var _disconnect = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                if (!('standard:disconnect' in __classPrivateFieldGet(this, _StandardWalletAdapter_wallet, \"f\").features)) {\n                  _context2.next = 9;\n                  break;\n                }\n                _context2.prev = 1;\n                _context2.next = 4;\n                return __classPrivateFieldGet(this, _StandardWalletAdapter_wallet, \"f\").features['standard:disconnect'].disconnect();\n              case 4:\n                _context2.next = 9;\n                break;\n              case 6:\n                _context2.prev = 6;\n                _context2.t0 = _context2[\"catch\"](1);\n                this.emit('error', new WalletDisconnectionError(_context2.t0 === null || _context2.t0 === void 0 ? void 0 : _context2.t0.message, _context2.t0));\n              case 9:\n                __classPrivateFieldGet(this, _StandardWalletAdapter_instances, \"m\", _StandardWalletAdapter_disconnected).call(this);\n                this.emit('disconnect');\n              case 11:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this, [[1, 6]]);\n      }));\n      function disconnect() {\n        return _disconnect.apply(this, arguments);\n      }\n      return disconnect;\n    }()\n  }, {\n    key: \"sendTransaction\",\n    value: function () {\n      var _sendTransaction = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(transaction, connection) {\n        var options,\n          account,\n          feature,\n          chain,\n          signers,\n          sendOptions,\n          serializedTransaction,\n          _transaction,\n          _yield$__classPrivate,\n          _yield$__classPrivate2,\n          output,\n          _yield$__classPrivate3,\n          _yield$__classPrivate4,\n          _output,\n          _args3 = arguments;\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                options = _args3.length > 2 && _args3[2] !== undefined ? _args3[2] : {};\n                _context3.prev = 1;\n                account = __classPrivateFieldGet(this, _StandardWalletAdapter_account, \"f\");\n                if (account) {\n                  _context3.next = 5;\n                  break;\n                }\n                throw new WalletNotConnectedError();\n              case 5:\n                if (!('solana:signAndSendTransaction' in __classPrivateFieldGet(this, _StandardWalletAdapter_wallet, \"f\").features)) {\n                  _context3.next = 17;\n                  break;\n                }\n                if (!account.features.includes('solana:signAndSendTransaction')) {\n                  _context3.next = 10;\n                  break;\n                }\n                feature = 'solana:signAndSendTransaction';\n                _context3.next = 15;\n                break;\n              case 10:\n                if (!('solana:signTransaction' in __classPrivateFieldGet(this, _StandardWalletAdapter_wallet, \"f\").features && account.features.includes('solana:signTransaction'))) {\n                  _context3.next = 14;\n                  break;\n                }\n                feature = 'solana:signTransaction';\n                _context3.next = 15;\n                break;\n              case 14:\n                throw new WalletAccountError();\n              case 15:\n                _context3.next = 24;\n                break;\n              case 17:\n                if (!('solana:signTransaction' in __classPrivateFieldGet(this, _StandardWalletAdapter_wallet, \"f\").features)) {\n                  _context3.next = 23;\n                  break;\n                }\n                if (account.features.includes('solana:signTransaction')) {\n                  _context3.next = 20;\n                  break;\n                }\n                throw new WalletAccountError();\n              case 20:\n                feature = 'solana:signTransaction';\n                _context3.next = 24;\n                break;\n              case 23:\n                throw new WalletConfigError();\n              case 24:\n                chain = getChainForEndpoint(connection.rpcEndpoint);\n                if (account.chains.includes(chain)) {\n                  _context3.next = 27;\n                  break;\n                }\n                throw new WalletSendTransactionError();\n              case 27:\n                _context3.prev = 27;\n                signers = options.signers, sendOptions = _objectWithoutProperties(options, _excluded);\n                if (!isVersionedTransaction(transaction)) {\n                  _context3.next = 34;\n                  break;\n                }\n                (signers === null || signers === void 0 ? void 0 : signers.length) && transaction.sign(signers);\n                serializedTransaction = transaction.serialize();\n                _context3.next = 39;\n                break;\n              case 34:\n                _context3.next = 36;\n                return this.prepareTransaction(transaction, connection, sendOptions);\n              case 36:\n                transaction = _context3.sent;\n                (signers === null || signers === void 0 ? void 0 : signers.length) && (_transaction = transaction).partialSign.apply(_transaction, _toConsumableArray(signers));\n                serializedTransaction = new Uint8Array(transaction.serialize({\n                  requireAllSignatures: false,\n                  verifySignatures: false\n                }));\n              case 39:\n                if (!(feature === 'solana:signAndSendTransaction')) {\n                  _context3.next = 48;\n                  break;\n                }\n                _context3.next = 42;\n                return __classPrivateFieldGet(this, _StandardWalletAdapter_wallet, \"f\").features['solana:signAndSendTransaction'].signAndSendTransaction({\n                  account: account,\n                  chain: chain,\n                  transaction: serializedTransaction,\n                  options: {\n                    preflightCommitment: getCommitment(sendOptions.preflightCommitment || connection.commitment),\n                    skipPreflight: sendOptions.skipPreflight,\n                    maxRetries: sendOptions.maxRetries,\n                    minContextSlot: sendOptions.minContextSlot\n                  }\n                });\n              case 42:\n                _yield$__classPrivate = _context3.sent;\n                _yield$__classPrivate2 = _slicedToArray(_yield$__classPrivate, 1);\n                output = _yield$__classPrivate2[0];\n                return _context3.abrupt(\"return\", bs58.encode(output.signature));\n              case 48:\n                _context3.next = 50;\n                return __classPrivateFieldGet(this, _StandardWalletAdapter_wallet, \"f\").features['solana:signTransaction'].signTransaction({\n                  account: account,\n                  chain: chain,\n                  transaction: serializedTransaction,\n                  options: {\n                    preflightCommitment: getCommitment(sendOptions.preflightCommitment || connection.commitment),\n                    minContextSlot: sendOptions.minContextSlot\n                  }\n                });\n              case 50:\n                _yield$__classPrivate3 = _context3.sent;\n                _yield$__classPrivate4 = _slicedToArray(_yield$__classPrivate3, 1);\n                _output = _yield$__classPrivate4[0];\n                _context3.next = 55;\n                return connection.sendRawTransaction(_output.signedTransaction, _objectSpread(_objectSpread({}, sendOptions), {}, {\n                  preflightCommitment: getCommitment(sendOptions.preflightCommitment || connection.commitment)\n                }));\n              case 55:\n                return _context3.abrupt(\"return\", _context3.sent);\n              case 56:\n                _context3.next = 63;\n                break;\n              case 58:\n                _context3.prev = 58;\n                _context3.t0 = _context3[\"catch\"](27);\n                if (!(_context3.t0 instanceof WalletError)) {\n                  _context3.next = 62;\n                  break;\n                }\n                throw _context3.t0;\n              case 62:\n                throw new WalletSendTransactionError(_context3.t0 === null || _context3.t0 === void 0 ? void 0 : _context3.t0.message, _context3.t0);\n              case 63:\n                _context3.next = 69;\n                break;\n              case 65:\n                _context3.prev = 65;\n                _context3.t1 = _context3[\"catch\"](1);\n                this.emit('error', _context3.t1);\n                throw _context3.t1;\n              case 69:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this, [[1, 65], [27, 58]]);\n      }));\n      function sendTransaction(_x, _x2) {\n        return _sendTransaction.apply(this, arguments);\n      }\n      return sendTransaction;\n    }()\n  }]);\n  return StandardWalletAdapter;\n}(BaseWalletAdapter);\n_StandardWalletAdapter_account = new WeakMap(), _StandardWalletAdapter_publicKey = new WeakMap(), _StandardWalletAdapter_connecting = new WeakMap(), _StandardWalletAdapter_off = new WeakMap(), _StandardWalletAdapter_wallet = new WeakMap(), _StandardWalletAdapter_supportedTransactionVersions = new WeakMap(), _StandardWalletAdapter_readyState = new WeakMap(), _StandardWalletAdapter_changed = new WeakMap(), _StandardWalletAdapter_instances = new WeakSet(), _StandardWalletAdapter_connected = function _StandardWalletAdapter_connected(account, publicKey) {\n  __classPrivateFieldSet(this, _StandardWalletAdapter_account, account, \"f\");\n  __classPrivateFieldSet(this, _StandardWalletAdapter_publicKey, publicKey, \"f\");\n  if (account !== null && account !== void 0 && account.features.includes('solana:signTransaction')) {\n    this.signTransaction = __classPrivateFieldGet(this, _StandardWalletAdapter_instances, \"m\", _StandardWalletAdapter_signTransaction);\n    this.signAllTransactions = __classPrivateFieldGet(this, _StandardWalletAdapter_instances, \"m\", _StandardWalletAdapter_signAllTransactions);\n  } else {\n    delete this.signTransaction;\n    delete this.signAllTransactions;\n  }\n  if (account !== null && account !== void 0 && account.features.includes('solana:signMessage')) {\n    this.signMessage = __classPrivateFieldGet(this, _StandardWalletAdapter_instances, \"m\", _StandardWalletAdapter_signMessage);\n  } else {\n    delete this.signMessage;\n  }\n}, _StandardWalletAdapter_disconnected = function _StandardWalletAdapter_disconnected() {\n  var off = __classPrivateFieldGet(this, _StandardWalletAdapter_off, \"f\");\n  if (off) {\n    __classPrivateFieldSet(this, _StandardWalletAdapter_off, undefined, \"f\");\n    off();\n  }\n  __classPrivateFieldGet(this, _StandardWalletAdapter_instances, \"m\", _StandardWalletAdapter_connected).call(this, null, null);\n}, _StandardWalletAdapter_signTransaction = /*#__PURE__*/function () {\n  var _StandardWalletAdapter_signTransaction2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(transaction) {\n    var account, signedTransactions, serializedTransaction;\n    return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            _context4.prev = 0;\n            account = __classPrivateFieldGet(this, _StandardWalletAdapter_account, \"f\");\n            if (account) {\n              _context4.next = 4;\n              break;\n            }\n            throw new WalletNotConnectedError();\n          case 4:\n            if ('solana:signTransaction' in __classPrivateFieldGet(this, _StandardWalletAdapter_wallet, \"f\").features) {\n              _context4.next = 6;\n              break;\n            }\n            throw new WalletConfigError();\n          case 6:\n            if (account.features.includes('solana:signTransaction')) {\n              _context4.next = 8;\n              break;\n            }\n            throw new WalletAccountError();\n          case 8:\n            _context4.prev = 8;\n            _context4.next = 11;\n            return __classPrivateFieldGet(this, _StandardWalletAdapter_wallet, \"f\").features['solana:signTransaction'].signTransaction({\n              account: account,\n              transaction: isVersionedTransaction(transaction) ? transaction.serialize() : new Uint8Array(transaction.serialize({\n                requireAllSignatures: false,\n                verifySignatures: false\n              }))\n            });\n          case 11:\n            signedTransactions = _context4.sent;\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            serializedTransaction = signedTransactions[0].signedTransaction;\n            return _context4.abrupt(\"return\", isVersionedTransaction(transaction) ? VersionedTransaction.deserialize(serializedTransaction) : Transaction.from(serializedTransaction));\n          case 16:\n            _context4.prev = 16;\n            _context4.t0 = _context4[\"catch\"](8);\n            if (!(_context4.t0 instanceof WalletError)) {\n              _context4.next = 20;\n              break;\n            }\n            throw _context4.t0;\n          case 20:\n            throw new WalletSignTransactionError(_context4.t0 === null || _context4.t0 === void 0 ? void 0 : _context4.t0.message, _context4.t0);\n          case 21:\n            _context4.next = 27;\n            break;\n          case 23:\n            _context4.prev = 23;\n            _context4.t1 = _context4[\"catch\"](0);\n            this.emit('error', _context4.t1);\n            throw _context4.t1;\n          case 27:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, _callee4, this, [[0, 23], [8, 16]]);\n  }));\n  function _StandardWalletAdapter_signTransaction(_x3) {\n    return _StandardWalletAdapter_signTransaction2.apply(this, arguments);\n  }\n  return _StandardWalletAdapter_signTransaction;\n}(), _StandardWalletAdapter_signAllTransactions = /*#__PURE__*/function () {\n  var _StandardWalletAdapter_signAllTransactions2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5(transactions) {\n    var account, _classPrivateFieldGe, signedTransactions;\n    return _regeneratorRuntime().wrap(function _callee5$(_context5) {\n      while (1) {\n        switch (_context5.prev = _context5.next) {\n          case 0:\n            _context5.prev = 0;\n            account = __classPrivateFieldGet(this, _StandardWalletAdapter_account, \"f\");\n            if (account) {\n              _context5.next = 4;\n              break;\n            }\n            throw new WalletNotConnectedError();\n          case 4:\n            if ('solana:signTransaction' in __classPrivateFieldGet(this, _StandardWalletAdapter_wallet, \"f\").features) {\n              _context5.next = 6;\n              break;\n            }\n            throw new WalletConfigError();\n          case 6:\n            if (account.features.includes('solana:signTransaction')) {\n              _context5.next = 8;\n              break;\n            }\n            throw new WalletSignTransactionError();\n          case 8:\n            _context5.prev = 8;\n            _context5.next = 11;\n            return (_classPrivateFieldGe = __classPrivateFieldGet(this, _StandardWalletAdapter_wallet, \"f\").features['solana:signTransaction']).signTransaction.apply(_classPrivateFieldGe, _toConsumableArray(transactions.map(function (transaction) {\n              return {\n                account: account,\n                transaction: isVersionedTransaction(transaction) ? transaction.serialize() : new Uint8Array(transaction.serialize({\n                  requireAllSignatures: false,\n                  verifySignatures: false\n                }))\n              };\n            })));\n          case 11:\n            signedTransactions = _context5.sent;\n            return _context5.abrupt(\"return\", transactions.map(function (transaction, index) {\n              // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n              var signedTransaction = signedTransactions[index].signedTransaction;\n              return isVersionedTransaction(transaction) ? VersionedTransaction.deserialize(signedTransaction) : Transaction.from(signedTransaction);\n            }));\n          case 15:\n            _context5.prev = 15;\n            _context5.t0 = _context5[\"catch\"](8);\n            throw new WalletSignTransactionError(_context5.t0 === null || _context5.t0 === void 0 ? void 0 : _context5.t0.message, _context5.t0);\n          case 18:\n            _context5.next = 24;\n            break;\n          case 20:\n            _context5.prev = 20;\n            _context5.t1 = _context5[\"catch\"](0);\n            this.emit('error', _context5.t1);\n            throw _context5.t1;\n          case 24:\n          case \"end\":\n            return _context5.stop();\n        }\n      }\n    }, _callee5, this, [[0, 20], [8, 15]]);\n  }));\n  function _StandardWalletAdapter_signAllTransactions(_x4) {\n    return _StandardWalletAdapter_signAllTransactions2.apply(this, arguments);\n  }\n  return _StandardWalletAdapter_signAllTransactions;\n}(), _StandardWalletAdapter_signMessage = /*#__PURE__*/function () {\n  var _StandardWalletAdapter_signMessage2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee6(message) {\n    var account, signedMessages;\n    return _regeneratorRuntime().wrap(function _callee6$(_context6) {\n      while (1) {\n        switch (_context6.prev = _context6.next) {\n          case 0:\n            _context6.prev = 0;\n            account = __classPrivateFieldGet(this, _StandardWalletAdapter_account, \"f\");\n            if (account) {\n              _context6.next = 4;\n              break;\n            }\n            throw new WalletNotConnectedError();\n          case 4:\n            if ('solana:signMessage' in __classPrivateFieldGet(this, _StandardWalletAdapter_wallet, \"f\").features) {\n              _context6.next = 6;\n              break;\n            }\n            throw new WalletConfigError();\n          case 6:\n            if (account.features.includes('solana:signMessage')) {\n              _context6.next = 8;\n              break;\n            }\n            throw new WalletSignMessageError();\n          case 8:\n            _context6.prev = 8;\n            _context6.next = 11;\n            return __classPrivateFieldGet(this, _StandardWalletAdapter_wallet, \"f\").features['solana:signMessage'].signMessage({\n              account: account,\n              message: message\n            });\n          case 11:\n            signedMessages = _context6.sent;\n            return _context6.abrupt(\"return\", signedMessages[0].signature);\n          case 15:\n            _context6.prev = 15;\n            _context6.t0 = _context6[\"catch\"](8);\n            throw new WalletSignMessageError(_context6.t0 === null || _context6.t0 === void 0 ? void 0 : _context6.t0.message, _context6.t0);\n          case 18:\n            _context6.next = 24;\n            break;\n          case 20:\n            _context6.prev = 20;\n            _context6.t1 = _context6[\"catch\"](0);\n            this.emit('error', _context6.t1);\n            throw _context6.t1;\n          case 24:\n          case \"end\":\n            return _context6.stop();\n        }\n      }\n    }, _callee6, this, [[0, 20], [8, 15]]);\n  }));\n  function _StandardWalletAdapter_signMessage(_x5) {\n    return _StandardWalletAdapter_signMessage2.apply(this, arguments);\n  }\n  return _StandardWalletAdapter_signMessage;\n}();","map":{"version":3,"mappings":"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","names":["BaseWalletAdapter","WalletAccountError","WalletConfigError","WalletConnectionError","WalletDisconnectedError","WalletDisconnectionError","WalletError","WalletNotConnectedError","WalletNotReadyError","WalletPublicKeyError","WalletReadyState","WalletSendTransactionError","WalletSignMessageError","WalletSignTransactionError","getChainForEndpoint","getCommitment","PublicKey","Transaction","VersionedTransaction","arraysEqual","bs58","isVersionedTransaction","isWalletAdapterCompatibleWallet","wallet","features","StandardWalletAdapter","_StandardWalletAdapter_account","_StandardWalletAdapter_publicKey","_StandardWalletAdapter_connecting","_StandardWalletAdapter_off","_StandardWalletAdapter_wallet","_StandardWalletAdapter_supportedTransactionVersions","_StandardWalletAdapter_readyState","window","document","Unsupported","Installed","_StandardWalletAdapter_changed","properties","__classPrivateFieldGet","account","accounts","_StandardWalletAdapter_instances","emit","publicKey","error","message","__classPrivateFieldSet","supportedTransactionVersions","Set","name","icon","connected","connecting","length","connect","on","disconnect","transaction","connection","options","includes","feature","chain","rpcEndpoint","chains","signers","sendOptions","sign","serializedTransaction","serialize","prepareTransaction","partialSign","Uint8Array","requireAllSignatures","verifySignatures","signAndSendTransaction","preflightCommitment","commitment","skipPreflight","maxRetries","minContextSlot","output","encode","signature","signTransaction","sendRawTransaction","signedTransaction","signAllTransactions","signMessage","off","undefined","signedTransactions","deserialize","from","_StandardWalletAdapter_signTransaction","transactions","map","index","_StandardWalletAdapter_signAllTransactions","signedMessages","_StandardWalletAdapter_signMessage"],"sources":["/Users/ivan/Metadata/node_modules/@solana/wallet-standard-wallet-adapter-react/node_modules/@solana/wallet-standard-wallet-adapter-base/src/adapter.ts"],"sourcesContent":["import type {\n    SendTransactionOptions,\n    SupportedTransactionVersions,\n    WalletAdapter,\n    WalletName,\n} from '@solana/wallet-adapter-base';\nimport {\n    BaseWalletAdapter,\n    WalletAccountError,\n    WalletConfigError,\n    WalletConnectionError,\n    WalletDisconnectedError,\n    WalletDisconnectionError,\n    WalletError,\n    WalletNotConnectedError,\n    WalletNotReadyError,\n    WalletPublicKeyError,\n    WalletReadyState,\n    WalletSendTransactionError,\n    WalletSignMessageError,\n    WalletSignTransactionError,\n} from '@solana/wallet-adapter-base';\nimport type {\n    SolanaSignAndSendTransactionFeature,\n    SolanaSignMessageFeature,\n    SolanaSignTransactionFeature,\n} from '@solana/wallet-standard-features';\nimport { getChainForEndpoint, getCommitment } from '@solana/wallet-standard-util';\nimport type { Connection, TransactionSignature } from '@solana/web3.js';\nimport { PublicKey, Transaction, VersionedTransaction } from '@solana/web3.js';\nimport type { Wallet, WalletAccount, WalletWithFeatures } from '@wallet-standard/base';\nimport type { ConnectFeature, DisconnectFeature, EventsFeature, EventsListeners } from '@wallet-standard/features';\nimport { arraysEqual } from '@wallet-standard/wallet';\nimport bs58 from 'bs58';\nimport { isVersionedTransaction } from './transaction.js';\n\n/** TODO: docs */\nexport type WalletAdapterCompatibleWallet = WalletWithFeatures<\n    ConnectFeature &\n        EventsFeature &\n        (SolanaSignAndSendTransactionFeature | SolanaSignTransactionFeature) &\n        (DisconnectFeature | SolanaSignMessageFeature | never)\n>;\n\n/** TODO: docs */\nexport function isWalletAdapterCompatibleWallet(wallet: Wallet): wallet is WalletAdapterCompatibleWallet {\n    return (\n        'standard:connect' in wallet.features &&\n        'standard:events' in wallet.features &&\n        ('solana:signAndSendTransaction' in wallet.features || 'solana:signTransaction' in wallet.features)\n    );\n}\n\n/** TODO: docs */\nexport interface StandardWalletAdapterConfig {\n    wallet: WalletAdapterCompatibleWallet;\n}\n\n/** TODO: docs */\nexport type StandardAdapter = WalletAdapter & {\n    wallet: WalletAdapterCompatibleWallet;\n    standard: true;\n};\n\n/** TODO: docs */\nexport class StandardWalletAdapter extends BaseWalletAdapter implements StandardAdapter {\n    #account: WalletAccount | null;\n    #publicKey: PublicKey | null;\n    #connecting: boolean;\n    #off: (() => void) | undefined;\n    readonly #wallet: WalletAdapterCompatibleWallet;\n    readonly #supportedTransactionVersions: SupportedTransactionVersions;\n    readonly #readyState: WalletReadyState =\n        typeof window === 'undefined' || typeof document === 'undefined'\n            ? WalletReadyState.Unsupported\n            : WalletReadyState.Installed;\n\n    get supportedTransactionVersions() {\n        return this.#supportedTransactionVersions;\n    }\n\n    get name() {\n        return this.#wallet.name as WalletName;\n    }\n\n    get icon() {\n        return this.#wallet.icon;\n    }\n\n    get url() {\n        return 'https://github.com/wallet-standard';\n    }\n\n    get publicKey() {\n        return this.#publicKey;\n    }\n\n    get connecting() {\n        return this.#connecting;\n    }\n\n    get readyState() {\n        return this.#readyState;\n    }\n\n    get wallet(): WalletAdapterCompatibleWallet {\n        return this.#wallet;\n    }\n\n    get standard() {\n        return true as const;\n    }\n\n    constructor({ wallet }: StandardWalletAdapterConfig) {\n        super();\n        this.#wallet = wallet;\n\n        const supportedTransactionVersions =\n            'solana:signAndSendTransaction' in wallet.features\n                ? wallet.features['solana:signAndSendTransaction'].supportedTransactionVersions\n                : wallet.features['solana:signTransaction'].supportedTransactionVersions;\n        this.#supportedTransactionVersions = arraysEqual(supportedTransactionVersions, ['legacy'])\n            ? null\n            : new Set(supportedTransactionVersions);\n\n        this.#account = null;\n        this.#publicKey = null;\n        this.#connecting = false;\n    }\n\n    async connect(): Promise<void> {\n        try {\n            if (this.connected || this.connecting) return;\n            if (this.#readyState !== WalletReadyState.Installed) throw new WalletNotReadyError();\n\n            this.#connecting = true;\n\n            if (!this.#wallet.accounts.length) {\n                try {\n                    await this.#wallet.features['standard:connect'].connect();\n                } catch (error: any) {\n                    throw new WalletConnectionError(error?.message, error);\n                }\n            }\n\n            if (!this.#wallet.accounts.length) throw new WalletAccountError();\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            const account = this.#wallet.accounts[0]!;\n\n            let publicKey: PublicKey;\n            try {\n                publicKey = new PublicKey(account.publicKey);\n            } catch (error: any) {\n                throw new WalletPublicKeyError(error?.message, error);\n            }\n\n            this.#off = this.#wallet.features['standard:events'].on('change', this.#changed);\n            this.#connected(account, publicKey);\n            this.emit('connect', publicKey);\n        } catch (error: any) {\n            this.emit('error', error);\n            throw error;\n        } finally {\n            this.#connecting = false;\n        }\n    }\n\n    async disconnect(): Promise<void> {\n        if ('standard:disconnect' in this.#wallet.features) {\n            try {\n                await this.#wallet.features['standard:disconnect'].disconnect();\n            } catch (error: any) {\n                this.emit('error', new WalletDisconnectionError(error?.message, error));\n            }\n        }\n\n        this.#disconnected();\n        this.emit('disconnect');\n    }\n\n    #connected(account: WalletAccount, publicKey: PublicKey): void;\n    #connected(account: null, publicKey: null): void;\n    #connected(account: WalletAccount | null, publicKey: PublicKey | null) {\n        this.#account = account;\n        this.#publicKey = publicKey;\n\n        if (account?.features.includes('solana:signTransaction')) {\n            this.signTransaction = this.#signTransaction;\n            this.signAllTransactions = this.#signAllTransactions;\n        } else {\n            delete this.signTransaction;\n            delete this.signAllTransactions;\n        }\n\n        if (account?.features.includes('solana:signMessage')) {\n            this.signMessage = this.#signMessage;\n        } else {\n            delete this.signMessage;\n        }\n    }\n\n    #disconnected(): void {\n        const off = this.#off;\n        if (off) {\n            this.#off = undefined;\n            off();\n        }\n\n        this.#connected(null, null);\n    }\n\n    #changed: EventsListeners['change'] = (properties) => {\n        // If the adapter isn't connected or the change doesn't include accounts, do nothing.\n        if (!this.#account || !this.#publicKey || !('accounts' in properties)) return;\n\n        const account = this.#wallet.accounts[0];\n        // If there's no connected account, disconnect the adapter.\n        if (!account) {\n            this.#disconnected();\n            this.emit('error', new WalletDisconnectedError());\n            this.emit('disconnect');\n            return;\n        }\n\n        // If the account hasn't actually changed, do nothing.\n        if (account === this.#account) return;\n\n        let publicKey: PublicKey;\n        // If the account public key isn't valid, disconnect the adapter.\n        try {\n            publicKey = new PublicKey(account.publicKey);\n        } catch (error: any) {\n            this.#disconnected();\n            this.emit('error', new WalletPublicKeyError(error?.message));\n            this.emit('disconnect');\n            return;\n        }\n\n        // Change the adapter's account and public key and emit an event.\n        this.#connected(account, publicKey);\n        this.emit('connect', publicKey);\n    };\n\n    async sendTransaction<T extends Transaction | VersionedTransaction>(\n        transaction: T,\n        connection: Connection,\n        options: SendTransactionOptions = {}\n    ): Promise<TransactionSignature> {\n        try {\n            const account = this.#account;\n            if (!account) throw new WalletNotConnectedError();\n\n            let feature: 'solana:signAndSendTransaction' | 'solana:signTransaction';\n            if ('solana:signAndSendTransaction' in this.#wallet.features) {\n                if (account.features.includes('solana:signAndSendTransaction')) {\n                    feature = 'solana:signAndSendTransaction';\n                } else if (\n                    'solana:signTransaction' in this.#wallet.features &&\n                    account.features.includes('solana:signTransaction')\n                ) {\n                    feature = 'solana:signTransaction';\n                } else {\n                    throw new WalletAccountError();\n                }\n            } else if ('solana:signTransaction' in this.#wallet.features) {\n                if (!account.features.includes('solana:signTransaction')) throw new WalletAccountError();\n                feature = 'solana:signTransaction';\n            } else {\n                throw new WalletConfigError();\n            }\n\n            const chain = getChainForEndpoint(connection.rpcEndpoint);\n            if (!account.chains.includes(chain)) throw new WalletSendTransactionError();\n\n            try {\n                const { signers, ...sendOptions } = options;\n\n                let serializedTransaction: Uint8Array;\n                if (isVersionedTransaction(transaction)) {\n                    signers?.length && transaction.sign(signers);\n                    serializedTransaction = transaction.serialize();\n                } else {\n                    transaction = (await this.prepareTransaction(transaction, connection, sendOptions)) as T;\n                    signers?.length && (transaction as Transaction).partialSign(...signers);\n                    serializedTransaction = new Uint8Array(\n                        (transaction as Transaction).serialize({\n                            requireAllSignatures: false,\n                            verifySignatures: false,\n                        })\n                    );\n                }\n\n                if (feature === 'solana:signAndSendTransaction') {\n                    const [output] = await (this.#wallet.features as SolanaSignAndSendTransactionFeature)[\n                        'solana:signAndSendTransaction'\n                    ].signAndSendTransaction({\n                        account,\n                        chain,\n                        transaction: serializedTransaction,\n                        options: {\n                            preflightCommitment: getCommitment(\n                                sendOptions.preflightCommitment || connection.commitment\n                            ),\n                            skipPreflight: sendOptions.skipPreflight,\n                            maxRetries: sendOptions.maxRetries,\n                            minContextSlot: sendOptions.minContextSlot,\n                        },\n                    });\n\n                    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n                    return bs58.encode(output!.signature);\n                } else {\n                    const [output] = await (this.#wallet.features as SolanaSignTransactionFeature)[\n                        'solana:signTransaction'\n                    ].signTransaction({\n                        account,\n                        chain,\n                        transaction: serializedTransaction,\n                        options: {\n                            preflightCommitment: getCommitment(\n                                sendOptions.preflightCommitment || connection.commitment\n                            ),\n                            minContextSlot: sendOptions.minContextSlot,\n                        },\n                    });\n\n                    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n                    return await connection.sendRawTransaction(output!.signedTransaction, {\n                        ...sendOptions,\n                        preflightCommitment: getCommitment(sendOptions.preflightCommitment || connection.commitment),\n                    });\n                }\n            } catch (error: any) {\n                if (error instanceof WalletError) throw error;\n                throw new WalletSendTransactionError(error?.message, error);\n            }\n        } catch (error: any) {\n            this.emit('error', error);\n            throw error;\n        }\n    }\n\n    signTransaction: (<T extends Transaction | VersionedTransaction>(transaction: T) => Promise<T>) | undefined;\n    async #signTransaction<T extends Transaction | VersionedTransaction>(transaction: T): Promise<T> {\n        try {\n            const account = this.#account;\n            if (!account) throw new WalletNotConnectedError();\n\n            if (!('solana:signTransaction' in this.#wallet.features)) throw new WalletConfigError();\n            if (!account.features.includes('solana:signTransaction')) throw new WalletAccountError();\n\n            try {\n                const signedTransactions = await this.#wallet.features['solana:signTransaction'].signTransaction({\n                    account,\n                    transaction: isVersionedTransaction(transaction)\n                        ? transaction.serialize()\n                        : new Uint8Array(\n                              transaction.serialize({\n                                  requireAllSignatures: false,\n                                  verifySignatures: false,\n                              })\n                          ),\n                });\n\n                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n                const serializedTransaction = signedTransactions[0]!.signedTransaction;\n\n                return (\n                    isVersionedTransaction(transaction)\n                        ? VersionedTransaction.deserialize(serializedTransaction)\n                        : Transaction.from(serializedTransaction)\n                ) as T;\n            } catch (error: any) {\n                if (error instanceof WalletError) throw error;\n                throw new WalletSignTransactionError(error?.message, error);\n            }\n        } catch (error: any) {\n            this.emit('error', error);\n            throw error;\n        }\n    }\n\n    signAllTransactions: (<T extends Transaction | VersionedTransaction>(transaction: T[]) => Promise<T[]>) | undefined;\n    async #signAllTransactions<T extends Transaction | VersionedTransaction>(transactions: T[]): Promise<T[]> {\n        try {\n            const account = this.#account;\n            if (!account) throw new WalletNotConnectedError();\n\n            if (!('solana:signTransaction' in this.#wallet.features)) throw new WalletConfigError();\n            if (!account.features.includes('solana:signTransaction')) throw new WalletSignTransactionError();\n\n            try {\n                const signedTransactions = await this.#wallet.features['solana:signTransaction'].signTransaction(\n                    ...transactions.map((transaction) => ({\n                        account,\n                        transaction: isVersionedTransaction(transaction)\n                            ? transaction.serialize()\n                            : new Uint8Array(\n                                  transaction.serialize({\n                                      requireAllSignatures: false,\n                                      verifySignatures: false,\n                                  })\n                              ),\n                    }))\n                );\n\n                return transactions.map((transaction, index) => {\n                    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n                    const signedTransaction = signedTransactions[index]!.signedTransaction;\n\n                    return (\n                        isVersionedTransaction(transaction)\n                            ? VersionedTransaction.deserialize(signedTransaction)\n                            : Transaction.from(signedTransaction)\n                    ) as T;\n                });\n            } catch (error: any) {\n                throw new WalletSignTransactionError(error?.message, error);\n            }\n        } catch (error: any) {\n            this.emit('error', error);\n            throw error;\n        }\n    }\n\n    signMessage: ((message: Uint8Array) => Promise<Uint8Array>) | undefined;\n    async #signMessage(message: Uint8Array): Promise<Uint8Array> {\n        try {\n            const account = this.#account;\n            if (!account) throw new WalletNotConnectedError();\n\n            if (!('solana:signMessage' in this.#wallet.features)) throw new WalletConfigError();\n            if (!account.features.includes('solana:signMessage')) throw new WalletSignMessageError();\n\n            try {\n                const signedMessages = await this.#wallet.features['solana:signMessage'].signMessage({\n                    account,\n                    message,\n                });\n\n                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n                return signedMessages[0]!.signature;\n            } catch (error: any) {\n                throw new WalletSignMessageError(error?.message, error);\n            }\n        } catch (error: any) {\n            this.emit('error', error);\n            throw error;\n        }\n    }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}