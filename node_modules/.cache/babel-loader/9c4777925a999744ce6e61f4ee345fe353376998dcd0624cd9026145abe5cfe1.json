{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createUpdateRateInterestBearingMintInstruction = exports.createInitializeInterestBearingMintInstruction = exports.interestBearingMintUpdateRateInstructionData = exports.interestBearingMintInitializeInstructionData = exports.InterestBearingMintInstruction = void 0;\nvar buffer_layout_1 = require(\"@solana/buffer-layout\");\nvar buffer_layout_utils_1 = require(\"@solana/buffer-layout-utils\");\nvar web3_js_1 = require(\"@solana/web3.js\");\nvar constants_js_1 = require(\"../../constants.js\");\nvar internal_js_1 = require(\"../../instructions/internal.js\");\nvar types_js_1 = require(\"../../instructions/types.js\");\nvar InterestBearingMintInstruction;\n(function (InterestBearingMintInstruction) {\n  InterestBearingMintInstruction[InterestBearingMintInstruction[\"Initialize\"] = 0] = \"Initialize\";\n  InterestBearingMintInstruction[InterestBearingMintInstruction[\"UpdateRate\"] = 1] = \"UpdateRate\";\n})(InterestBearingMintInstruction = exports.InterestBearingMintInstruction || (exports.InterestBearingMintInstruction = {}));\nexports.interestBearingMintInitializeInstructionData = (0, buffer_layout_1.struct)([(0, buffer_layout_1.u8)('instruction'), (0, buffer_layout_1.u8)('interestBearingMintInstruction'),\n// TODO: Make this an optional public key\n(0, buffer_layout_utils_1.publicKey)('rateAuthority'), (0, buffer_layout_1.s16)('rate')]);\nexports.interestBearingMintUpdateRateInstructionData = (0, buffer_layout_1.struct)([(0, buffer_layout_1.u8)('instruction'), (0, buffer_layout_1.u8)('interestBearingMintInstruction'), (0, buffer_layout_1.s16)('rate')]);\n/**\n * Construct an InitializeInterestBearingMint instruction\n *\n * @param mint           Mint to initialize\n * @param rateAuthority  The public key for the account that can update the rate\n * @param rate           The initial interest rate\n * @param programId      SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\nfunction createInitializeInterestBearingMintInstruction(mint, rateAuthority, rate) {\n  var programId = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : constants_js_1.TOKEN_2022_PROGRAM_ID;\n  var keys = [{\n    pubkey: mint,\n    isSigner: false,\n    isWritable: true\n  }];\n  var data = Buffer.alloc(exports.interestBearingMintInitializeInstructionData.span);\n  exports.interestBearingMintInitializeInstructionData.encode({\n    instruction: types_js_1.TokenInstruction.InterestBearingMintExtension,\n    interestBearingMintInstruction: InterestBearingMintInstruction.Initialize,\n    rateAuthority: rateAuthority,\n    rate: rate\n  }, data);\n  return new web3_js_1.TransactionInstruction({\n    keys: keys,\n    programId: programId,\n    data: data\n  });\n}\nexports.createInitializeInterestBearingMintInstruction = createInitializeInterestBearingMintInstruction;\n/**\n * Construct an UpdateRateInterestBearingMint instruction\n *\n * @param mint           Mint to initialize\n * @param rateAuthority  The public key for the account that can update the rate\n * @param rate           The updated interest rate\n * @param multiSigners   Signing accounts if `rateAuthority` is a multisig\n * @param programId      SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\nfunction createUpdateRateInterestBearingMintInstruction(mint, rateAuthority, rate) {\n  var multiSigners = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [];\n  var programId = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : constants_js_1.TOKEN_2022_PROGRAM_ID;\n  var keys = (0, internal_js_1.addSigners)([{\n    pubkey: mint,\n    isSigner: false,\n    isWritable: true\n  }, {\n    pubkey: rateAuthority,\n    isSigner: !multiSigners.length,\n    isWritable: false\n  }], rateAuthority, multiSigners);\n  var data = Buffer.alloc(exports.interestBearingMintUpdateRateInstructionData.span);\n  exports.interestBearingMintUpdateRateInstructionData.encode({\n    instruction: types_js_1.TokenInstruction.InterestBearingMintExtension,\n    interestBearingMintInstruction: InterestBearingMintInstruction.UpdateRate,\n    rate: rate\n  }, data);\n  return new web3_js_1.TransactionInstruction({\n    keys: keys,\n    programId: programId,\n    data: data\n  });\n}\nexports.createUpdateRateInterestBearingMintInstruction = createUpdateRateInterestBearingMintInstruction;","map":{"version":3,"mappings":";;;;;;AAAA;AACA;AAEA;AACA;AACA;AACA;AAEA,IAAYA,8BAGX;AAHD,WAAYA,8BAA8B;EACtCA,+FAAc;EACdA,+FAAc;AAClB,CAAC,EAHWA,8BAA8B,GAA9BC,sCAA8B,KAA9BA,sCAA8B;AAkB7BA,oDAA4C,GAAG,0BAAM,EAA+C,CAC7G,sBAAE,EAAC,aAAa,CAAC,EACjB,sBAAE,EAAC,gCAAgC,CAAC;AACpC;AACA,mCAAS,EAAC,eAAe,CAAC,EAC1B,uBAAG,EAAC,MAAM,CAAC,CACd,CAAC;AAEWA,oDAA4C,GAAG,0BAAM,EAA+C,CAC7G,sBAAE,EAAC,aAAa,CAAC,EACjB,sBAAE,EAAC,gCAAgC,CAAC,EACpC,uBAAG,EAAC,MAAM,CAAC,CACd,CAAC;AAEF;;;;;;;;;;AAUA,SAAgBC,8CAA8C,CAC1DC,IAAe,EACfC,aAAwB,EACxBC,IAAY,EACqB;EAAA,IAAjCC,SAAS,uEAAGC,oCAAqB;EAEjC,IAAMC,IAAI,GAAG,CAAC;IAAEC,MAAM,EAAEN,IAAI;IAAEO,QAAQ,EAAE,KAAK;IAAEC,UAAU,EAAE;EAAI,CAAE,CAAC;EAClE,IAAMC,IAAI,GAAGC,MAAM,CAACC,KAAK,CAACb,oDAA4C,CAACc,IAAI,CAAC;EAC5Ed,oDAA4C,CAACe,MAAM,CAC/C;IACIC,WAAW,EAAEC,2BAAgB,CAACC,4BAA4B;IAC1DC,8BAA8B,EAAEpB,8BAA8B,CAACqB,UAAU;IACzEjB,aAAa,EAAbA,aAAa;IACbC,IAAI,EAAJA;GACH,EACDO,IAAI,CACP;EACD,OAAO,IAAIU,gCAAsB,CAAC;IAAEd,IAAI,EAAJA,IAAI;IAAEF,SAAS,EAATA,SAAS;IAAEM,IAAI,EAAJA;EAAI,CAAE,CAAC;AAChE;AAlBAX;AAoBA;;;;;;;;;;;AAWA,SAAgBsB,8CAA8C,CAC1DpB,IAAe,EACfC,aAAwB,EACxBC,IAAY,EAEqB;EAAA,IADjCmB,mFAAyB,EAAE;EAAA,IAC3BlB,SAAS,uEAAGC,oCAAqB;EAEjC,IAAMC,IAAI,GAAG,4BAAU,EACnB,CACI;IAAEC,MAAM,EAAEN,IAAI;IAAEO,QAAQ,EAAE,KAAK;IAAEC,UAAU,EAAE;EAAI,CAAE,EACnD;IAAEF,MAAM,EAAEL,aAAa;IAAEM,QAAQ,EAAE,CAACc,YAAY,CAACC,MAAM;IAAEd,UAAU,EAAE;EAAK,CAAE,CAC/E,EACDP,aAAa,EACboB,YAAY,CACf;EACD,IAAMZ,IAAI,GAAGC,MAAM,CAACC,KAAK,CAACb,oDAA4C,CAACc,IAAI,CAAC;EAC5Ed,oDAA4C,CAACe,MAAM,CAC/C;IACIC,WAAW,EAAEC,2BAAgB,CAACC,4BAA4B;IAC1DC,8BAA8B,EAAEpB,8BAA8B,CAAC0B,UAAU;IACzErB,IAAI,EAAJA;GACH,EACDO,IAAI,CACP;EACD,OAAO,IAAIU,gCAAsB,CAAC;IAAEd,IAAI,EAAJA,IAAI;IAAEF,SAAS,EAATA,SAAS;IAAEM,IAAI,EAAJA;EAAI,CAAE,CAAC;AAChE;AAzBAX","names":["InterestBearingMintInstruction","exports","createInitializeInterestBearingMintInstruction","mint","rateAuthority","rate","programId","constants_js_1","keys","pubkey","isSigner","isWritable","data","Buffer","alloc","span","encode","instruction","types_js_1","InterestBearingMintExtension","interestBearingMintInstruction","Initialize","web3_js_1","createUpdateRateInterestBearingMintInstruction","multiSigners","length","UpdateRate"],"sources":["/Users/ivan/Metadata/node_modules/@solana/spl-token/src/extensions/interestBearingMint/instructions.ts"],"sourcesContent":["import { s16, struct, u8 } from '@solana/buffer-layout';\nimport { publicKey } from '@solana/buffer-layout-utils';\nimport type { PublicKey, Signer } from '@solana/web3.js';\nimport { TransactionInstruction } from '@solana/web3.js';\nimport { TOKEN_2022_PROGRAM_ID } from '../../constants.js';\nimport { addSigners } from '../../instructions/internal.js';\nimport { TokenInstruction } from '../../instructions/types.js';\n\nexport enum InterestBearingMintInstruction {\n    Initialize = 0,\n    UpdateRate = 1,\n}\n\nexport interface InterestBearingMintInitializeInstructionData {\n    instruction: TokenInstruction.InterestBearingMintExtension;\n    interestBearingMintInstruction: InterestBearingMintInstruction.Initialize;\n    rateAuthority: PublicKey;\n    rate: number;\n}\n\nexport interface InterestBearingMintUpdateRateInstructionData {\n    instruction: TokenInstruction.InterestBearingMintExtension;\n    interestBearingMintInstruction: InterestBearingMintInstruction.UpdateRate;\n    rate: number;\n}\n\nexport const interestBearingMintInitializeInstructionData = struct<InterestBearingMintInitializeInstructionData>([\n    u8('instruction'),\n    u8('interestBearingMintInstruction'),\n    // TODO: Make this an optional public key\n    publicKey('rateAuthority'),\n    s16('rate'),\n]);\n\nexport const interestBearingMintUpdateRateInstructionData = struct<InterestBearingMintUpdateRateInstructionData>([\n    u8('instruction'),\n    u8('interestBearingMintInstruction'),\n    s16('rate'),\n]);\n\n/**\n * Construct an InitializeInterestBearingMint instruction\n *\n * @param mint           Mint to initialize\n * @param rateAuthority  The public key for the account that can update the rate\n * @param rate           The initial interest rate\n * @param programId      SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\nexport function createInitializeInterestBearingMintInstruction(\n    mint: PublicKey,\n    rateAuthority: PublicKey,\n    rate: number,\n    programId = TOKEN_2022_PROGRAM_ID\n) {\n    const keys = [{ pubkey: mint, isSigner: false, isWritable: true }];\n    const data = Buffer.alloc(interestBearingMintInitializeInstructionData.span);\n    interestBearingMintInitializeInstructionData.encode(\n        {\n            instruction: TokenInstruction.InterestBearingMintExtension,\n            interestBearingMintInstruction: InterestBearingMintInstruction.Initialize,\n            rateAuthority,\n            rate,\n        },\n        data\n    );\n    return new TransactionInstruction({ keys, programId, data });\n}\n\n/**\n * Construct an UpdateRateInterestBearingMint instruction\n *\n * @param mint           Mint to initialize\n * @param rateAuthority  The public key for the account that can update the rate\n * @param rate           The updated interest rate\n * @param multiSigners   Signing accounts if `rateAuthority` is a multisig\n * @param programId      SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\nexport function createUpdateRateInterestBearingMintInstruction(\n    mint: PublicKey,\n    rateAuthority: PublicKey,\n    rate: number,\n    multiSigners: Signer[] = [],\n    programId = TOKEN_2022_PROGRAM_ID\n) {\n    const keys = addSigners(\n        [\n            { pubkey: mint, isSigner: false, isWritable: true },\n            { pubkey: rateAuthority, isSigner: !multiSigners.length, isWritable: false },\n        ],\n        rateAuthority,\n        multiSigners\n    );\n    const data = Buffer.alloc(interestBearingMintUpdateRateInstructionData.span);\n    interestBearingMintUpdateRateInstructionData.encode(\n        {\n            instruction: TokenInstruction.InterestBearingMintExtension,\n            interestBearingMintInstruction: InterestBearingMintInstruction.UpdateRate,\n            rate,\n        },\n        data\n    );\n    return new TransactionInstruction({ keys, programId, data });\n}\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}