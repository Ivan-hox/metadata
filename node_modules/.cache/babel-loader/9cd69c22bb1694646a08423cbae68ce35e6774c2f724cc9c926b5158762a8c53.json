{"ast":null,"code":"\"use strict\";\n\nvar _createForOfIteratorHelper = require(\"/Users/ivan/Metadata/node_modules/@babel/runtime/helpers/createForOfIteratorHelper.js\").default;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createUpdateDefaultAccountStateInstruction = exports.createInitializeDefaultAccountStateInstruction = exports.defaultAccountStateInstructionData = exports.DefaultAccountStateInstruction = void 0;\nvar buffer_layout_1 = require(\"@solana/buffer-layout\");\nvar web3_js_1 = require(\"@solana/web3.js\");\nvar constants_js_1 = require(\"../../constants.js\");\nvar errors_js_1 = require(\"../../errors.js\");\nvar types_js_1 = require(\"../../instructions/types.js\");\nvar DefaultAccountStateInstruction;\n(function (DefaultAccountStateInstruction) {\n  DefaultAccountStateInstruction[DefaultAccountStateInstruction[\"Initialize\"] = 0] = \"Initialize\";\n  DefaultAccountStateInstruction[DefaultAccountStateInstruction[\"Update\"] = 1] = \"Update\";\n})(DefaultAccountStateInstruction = exports.DefaultAccountStateInstruction || (exports.DefaultAccountStateInstruction = {}));\n/** TODO: docs */\nexports.defaultAccountStateInstructionData = (0, buffer_layout_1.struct)([(0, buffer_layout_1.u8)('instruction'), (0, buffer_layout_1.u8)('defaultAccountStateInstruction'), (0, buffer_layout_1.u8)('accountState')]);\n/**\n * Construct an InitializeDefaultAccountState instruction\n *\n * @param mint         Mint to initialize\n * @param accountState Default account state to set on all new accounts\n * @param programId    SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\nfunction createInitializeDefaultAccountStateInstruction(mint, accountState) {\n  var programId = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : constants_js_1.TOKEN_2022_PROGRAM_ID;\n  if (!(0, constants_js_1.programSupportsExtensions)(programId)) {\n    throw new errors_js_1.TokenUnsupportedInstructionError();\n  }\n  var keys = [{\n    pubkey: mint,\n    isSigner: false,\n    isWritable: true\n  }];\n  var data = Buffer.alloc(exports.defaultAccountStateInstructionData.span);\n  exports.defaultAccountStateInstructionData.encode({\n    instruction: types_js_1.TokenInstruction.DefaultAccountStateExtension,\n    defaultAccountStateInstruction: DefaultAccountStateInstruction.Initialize,\n    accountState: accountState\n  }, data);\n  return new web3_js_1.TransactionInstruction({\n    keys: keys,\n    programId: programId,\n    data: data\n  });\n}\nexports.createInitializeDefaultAccountStateInstruction = createInitializeDefaultAccountStateInstruction;\n/**\n * Construct an UpdateDefaultAccountState instruction\n *\n * @param mint         Mint to update\n * @param accountState    Default account state to set on all accounts\n * @param freezeAuthority       The mint's freeze authority\n * @param signers         The signer account(s) for a multisig\n * @param programId       SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\nfunction createUpdateDefaultAccountStateInstruction(mint, accountState, freezeAuthority) {\n  var multiSigners = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [];\n  var programId = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : constants_js_1.TOKEN_2022_PROGRAM_ID;\n  if (!(0, constants_js_1.programSupportsExtensions)(programId)) {\n    throw new errors_js_1.TokenUnsupportedInstructionError();\n  }\n  var keys = [{\n    pubkey: mint,\n    isSigner: false,\n    isWritable: true\n  }];\n  keys.push({\n    pubkey: freezeAuthority,\n    isSigner: !multiSigners.length,\n    isWritable: false\n  });\n  var _iterator = _createForOfIteratorHelper(multiSigners),\n    _step;\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var signer = _step.value;\n      keys.push({\n        pubkey: signer.publicKey,\n        isSigner: true,\n        isWritable: false\n      });\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n  var data = Buffer.alloc(exports.defaultAccountStateInstructionData.span);\n  exports.defaultAccountStateInstructionData.encode({\n    instruction: types_js_1.TokenInstruction.DefaultAccountStateExtension,\n    defaultAccountStateInstruction: DefaultAccountStateInstruction.Update,\n    accountState: accountState\n  }, data);\n  return new web3_js_1.TransactionInstruction({\n    keys: keys,\n    programId: programId,\n    data: data\n  });\n}\nexports.createUpdateDefaultAccountStateInstruction = createUpdateDefaultAccountStateInstruction;","map":{"version":3,"mappings":";;;;;;;AAAA;AAEA;AACA;AACA;AACA;AAGA,IAAYA,8BAGX;AAHD,WAAYA,8BAA8B;EACtCA,+FAAc;EACdA,uFAAU;AACd,CAAC,EAHWA,8BAA8B,GAA9BC,sCAA8B,KAA9BA,sCAA8B;AAY1C;AACaA,0CAAkC,GAAG,0BAAM,EAAqC,CACzF,sBAAE,EAAC,aAAa,CAAC,EACjB,sBAAE,EAAC,gCAAgC,CAAC,EACpC,sBAAE,EAAC,cAAc,CAAC,CACrB,CAAC;AAEF;;;;;;;;;AASA,SAAgBC,8CAA8C,CAC1DC,IAAe,EACfC,YAA0B,EACO;EAAA,IAAjCC,SAAS,uEAAGC,oCAAqB;EAEjC,IAAI,CAAC,4CAAyB,EAACD,SAAS,CAAC,EAAE;IACvC,MAAM,IAAIE,4CAAgC,EAAE;;EAEhD,IAAMC,IAAI,GAAG,CAAC;IAAEC,MAAM,EAAEN,IAAI;IAAEO,QAAQ,EAAE,KAAK;IAAEC,UAAU,EAAE;EAAI,CAAE,CAAC;EAClE,IAAMC,IAAI,GAAGC,MAAM,CAACC,KAAK,CAACb,0CAAkC,CAACc,IAAI,CAAC;EAClEd,0CAAkC,CAACe,MAAM,CACrC;IACIC,WAAW,EAAEC,2BAAgB,CAACC,4BAA4B;IAC1DC,8BAA8B,EAAEpB,8BAA8B,CAACqB,UAAU;IACzEjB,YAAY,EAAZA;GACH,EACDQ,IAAI,CACP;EAED,OAAO,IAAIU,gCAAsB,CAAC;IAAEd,IAAI,EAAJA,IAAI;IAAEH,SAAS,EAATA,SAAS;IAAEO,IAAI,EAAJA;EAAI,CAAE,CAAC;AAChE;AApBAX;AAsBA;;;;;;;;;;;AAWA,SAAgBsB,0CAA0C,CACtDpB,IAAe,EACfC,YAA0B,EAC1BoB,eAA0B,EAEO;EAAA,IADjCC,mFAAyB,EAAE;EAAA,IAC3BpB,SAAS,uEAAGC,oCAAqB;EAEjC,IAAI,CAAC,4CAAyB,EAACD,SAAS,CAAC,EAAE;IACvC,MAAM,IAAIE,4CAAgC,EAAE;;EAEhD,IAAMC,IAAI,GAAG,CAAC;IAAEC,MAAM,EAAEN,IAAI;IAAEO,QAAQ,EAAE,KAAK;IAAEC,UAAU,EAAE;EAAI,CAAE,CAAC;EAClEH,IAAI,CAACkB,IAAI,CAAC;IAAEjB,MAAM,EAAEe,eAAe;IAAEd,QAAQ,EAAE,CAACe,YAAY,CAACE,MAAM;IAAEhB,UAAU,EAAE;EAAK,CAAE,CAAC;EAAC,2CACrEc,YAAY;IAAA;EAAA;IAAjC,oDAAmC;MAAA,IAAxBG,MAAM;MACbpB,IAAI,CAACkB,IAAI,CAAC;QAAEjB,MAAM,EAAEmB,MAAM,CAACC,SAAS;QAAEnB,QAAQ,EAAE,IAAI;QAAEC,UAAU,EAAE;MAAK,CAAE,CAAC;;EAC7E;IAAA;EAAA;IAAA;EAAA;EAED,IAAMC,IAAI,GAAGC,MAAM,CAACC,KAAK,CAACb,0CAAkC,CAACc,IAAI,CAAC;EAClEd,0CAAkC,CAACe,MAAM,CACrC;IACIC,WAAW,EAAEC,2BAAgB,CAACC,4BAA4B;IAC1DC,8BAA8B,EAAEpB,8BAA8B,CAAC8B,MAAM;IACrE1B,YAAY,EAAZA;GACH,EACDQ,IAAI,CACP;EAED,OAAO,IAAIU,gCAAsB,CAAC;IAAEd,IAAI,EAAJA,IAAI;IAAEH,SAAS,EAATA,SAAS;IAAEO,IAAI,EAAJA;EAAI,CAAE,CAAC;AAChE;AA3BAX","names":["DefaultAccountStateInstruction","exports","createInitializeDefaultAccountStateInstruction","mint","accountState","programId","constants_js_1","errors_js_1","keys","pubkey","isSigner","isWritable","data","Buffer","alloc","span","encode","instruction","types_js_1","DefaultAccountStateExtension","defaultAccountStateInstruction","Initialize","web3_js_1","createUpdateDefaultAccountStateInstruction","freezeAuthority","multiSigners","push","length","signer","publicKey","Update"],"sources":["/Users/ivan/Metadata/node_modules/@solana/spl-token/src/extensions/defaultAccountState/instructions.ts"],"sourcesContent":["import { struct, u8 } from '@solana/buffer-layout';\nimport type { PublicKey, Signer } from '@solana/web3.js';\nimport { TransactionInstruction } from '@solana/web3.js';\nimport { programSupportsExtensions, TOKEN_2022_PROGRAM_ID } from '../../constants.js';\nimport { TokenUnsupportedInstructionError } from '../../errors.js';\nimport { TokenInstruction } from '../../instructions/types.js';\nimport type { AccountState } from '../../state/account.js';\n\nexport enum DefaultAccountStateInstruction {\n    Initialize = 0,\n    Update = 1,\n}\n\n/** TODO: docs */\nexport interface DefaultAccountStateInstructionData {\n    instruction: TokenInstruction.DefaultAccountStateExtension;\n    defaultAccountStateInstruction: DefaultAccountStateInstruction;\n    accountState: AccountState;\n}\n\n/** TODO: docs */\nexport const defaultAccountStateInstructionData = struct<DefaultAccountStateInstructionData>([\n    u8('instruction'),\n    u8('defaultAccountStateInstruction'),\n    u8('accountState'),\n]);\n\n/**\n * Construct an InitializeDefaultAccountState instruction\n *\n * @param mint         Mint to initialize\n * @param accountState Default account state to set on all new accounts\n * @param programId    SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\nexport function createInitializeDefaultAccountStateInstruction(\n    mint: PublicKey,\n    accountState: AccountState,\n    programId = TOKEN_2022_PROGRAM_ID\n): TransactionInstruction {\n    if (!programSupportsExtensions(programId)) {\n        throw new TokenUnsupportedInstructionError();\n    }\n    const keys = [{ pubkey: mint, isSigner: false, isWritable: true }];\n    const data = Buffer.alloc(defaultAccountStateInstructionData.span);\n    defaultAccountStateInstructionData.encode(\n        {\n            instruction: TokenInstruction.DefaultAccountStateExtension,\n            defaultAccountStateInstruction: DefaultAccountStateInstruction.Initialize,\n            accountState,\n        },\n        data\n    );\n\n    return new TransactionInstruction({ keys, programId, data });\n}\n\n/**\n * Construct an UpdateDefaultAccountState instruction\n *\n * @param mint         Mint to update\n * @param accountState    Default account state to set on all accounts\n * @param freezeAuthority       The mint's freeze authority\n * @param signers         The signer account(s) for a multisig\n * @param programId       SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\nexport function createUpdateDefaultAccountStateInstruction(\n    mint: PublicKey,\n    accountState: AccountState,\n    freezeAuthority: PublicKey,\n    multiSigners: Signer[] = [],\n    programId = TOKEN_2022_PROGRAM_ID\n): TransactionInstruction {\n    if (!programSupportsExtensions(programId)) {\n        throw new TokenUnsupportedInstructionError();\n    }\n    const keys = [{ pubkey: mint, isSigner: false, isWritable: true }];\n    keys.push({ pubkey: freezeAuthority, isSigner: !multiSigners.length, isWritable: false });\n    for (const signer of multiSigners) {\n        keys.push({ pubkey: signer.publicKey, isSigner: true, isWritable: false });\n    }\n\n    const data = Buffer.alloc(defaultAccountStateInstructionData.span);\n    defaultAccountStateInstructionData.encode(\n        {\n            instruction: TokenInstruction.DefaultAccountStateExtension,\n            defaultAccountStateInstruction: DefaultAccountStateInstruction.Update,\n            accountState,\n        },\n        data\n    );\n\n    return new TransactionInstruction({ keys, programId, data });\n}\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}