{"ast":null,"code":"import _toArray from \"/Users/ivan/Metadata/node_modules/@babel/runtime/helpers/esm/toArray.js\";\nimport { struct, u8 } from '@solana/buffer-layout';\nimport { u64 } from '@solana/buffer-layout-utils';\nimport { TransactionInstruction } from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID } from '../constants.js';\nimport { TokenInvalidInstructionDataError, TokenInvalidInstructionKeysError, TokenInvalidInstructionProgramError, TokenInvalidInstructionTypeError } from '../errors.js';\nimport { addSigners } from './internal.js';\nimport { TokenInstruction } from './types.js';\n/** TODO: docs */\nexport var burnInstructionData = struct([u8('instruction'), u64('amount')]);\n/**\n * Construct a Burn instruction\n *\n * @param account      Account to burn tokens from\n * @param mint         Mint for the account\n * @param owner        Owner of the account\n * @param amount       Number of tokens to burn\n * @param multiSigners Signing accounts if `owner` is a multisig\n * @param programId    SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\nexport function createBurnInstruction(account, mint, owner, amount) {\n  var multiSigners = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : [];\n  var programId = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : TOKEN_PROGRAM_ID;\n  var keys = addSigners([{\n    pubkey: account,\n    isSigner: false,\n    isWritable: true\n  }, {\n    pubkey: mint,\n    isSigner: false,\n    isWritable: true\n  }], owner, multiSigners);\n  var data = Buffer.alloc(burnInstructionData.span);\n  burnInstructionData.encode({\n    instruction: TokenInstruction.Burn,\n    amount: BigInt(amount)\n  }, data);\n  return new TransactionInstruction({\n    keys: keys,\n    programId: programId,\n    data: data\n  });\n}\n/**\n * Decode a Burn instruction and validate it\n *\n * @param instruction Transaction instruction to decode\n * @param programId   SPL Token program account\n *\n * @return Decoded, valid instruction\n */\nexport function decodeBurnInstruction(instruction) {\n  var programId = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : TOKEN_PROGRAM_ID;\n  if (!instruction.programId.equals(programId)) throw new TokenInvalidInstructionProgramError();\n  if (instruction.data.length !== burnInstructionData.span) throw new TokenInvalidInstructionDataError();\n  var _decodeBurnInstructio = decodeBurnInstructionUnchecked(instruction),\n    _decodeBurnInstructio2 = _decodeBurnInstructio.keys,\n    account = _decodeBurnInstructio2.account,\n    mint = _decodeBurnInstructio2.mint,\n    owner = _decodeBurnInstructio2.owner,\n    multiSigners = _decodeBurnInstructio2.multiSigners,\n    data = _decodeBurnInstructio.data;\n  if (data.instruction !== TokenInstruction.Burn) throw new TokenInvalidInstructionTypeError();\n  if (!account || !mint || !owner) throw new TokenInvalidInstructionKeysError();\n  // TODO: key checks?\n  return {\n    programId: programId,\n    keys: {\n      account: account,\n      mint: mint,\n      owner: owner,\n      multiSigners: multiSigners\n    },\n    data: data\n  };\n}\n/**\n * Decode a Burn instruction without validating it\n *\n * @param instruction Transaction instruction to decode\n *\n * @return Decoded, non-validated instruction\n */\nexport function decodeBurnInstructionUnchecked(_ref) {\n  var programId = _ref.programId,\n    _ref$keys = _toArray(_ref.keys),\n    account = _ref$keys[0],\n    mint = _ref$keys[1],\n    owner = _ref$keys[2],\n    multiSigners = _ref$keys.slice(3),\n    data = _ref.data;\n  return {\n    programId: programId,\n    keys: {\n      account: account,\n      mint: mint,\n      owner: owner,\n      multiSigners: multiSigners\n    },\n    data: burnInstructionData.decode(data)\n  };\n}","map":{"version":3,"mappings":"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","names":["struct","u8","u64","TransactionInstruction","TOKEN_PROGRAM_ID","TokenInvalidInstructionDataError","TokenInvalidInstructionKeysError","TokenInvalidInstructionProgramError","TokenInvalidInstructionTypeError","addSigners","TokenInstruction","burnInstructionData","createBurnInstruction","account","mint","owner","amount","multiSigners","programId","keys","pubkey","isSigner","isWritable","data","Buffer","alloc","span","encode","instruction","Burn","BigInt","decodeBurnInstruction","equals","length","decodeBurnInstructionUnchecked","decode"],"sources":["/Users/ivan/Metadata/node_modules/@solana/spl-token/src/instructions/burn.ts"],"sourcesContent":["import { struct, u8 } from '@solana/buffer-layout';\nimport { u64 } from '@solana/buffer-layout-utils';\nimport type { AccountMeta, PublicKey, Signer } from '@solana/web3.js';\nimport { TransactionInstruction } from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID } from '../constants.js';\nimport {\n    TokenInvalidInstructionDataError,\n    TokenInvalidInstructionKeysError,\n    TokenInvalidInstructionProgramError,\n    TokenInvalidInstructionTypeError,\n} from '../errors.js';\nimport { addSigners } from './internal.js';\nimport { TokenInstruction } from './types.js';\n\n/** TODO: docs */\nexport interface BurnInstructionData {\n    instruction: TokenInstruction.Burn;\n    amount: bigint;\n}\n\n/** TODO: docs */\nexport const burnInstructionData = struct<BurnInstructionData>([u8('instruction'), u64('amount')]);\n\n/**\n * Construct a Burn instruction\n *\n * @param account      Account to burn tokens from\n * @param mint         Mint for the account\n * @param owner        Owner of the account\n * @param amount       Number of tokens to burn\n * @param multiSigners Signing accounts if `owner` is a multisig\n * @param programId    SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\nexport function createBurnInstruction(\n    account: PublicKey,\n    mint: PublicKey,\n    owner: PublicKey,\n    amount: number | bigint,\n    multiSigners: Signer[] = [],\n    programId = TOKEN_PROGRAM_ID\n): TransactionInstruction {\n    const keys = addSigners(\n        [\n            { pubkey: account, isSigner: false, isWritable: true },\n            { pubkey: mint, isSigner: false, isWritable: true },\n        ],\n        owner,\n        multiSigners\n    );\n\n    const data = Buffer.alloc(burnInstructionData.span);\n    burnInstructionData.encode(\n        {\n            instruction: TokenInstruction.Burn,\n            amount: BigInt(amount),\n        },\n        data\n    );\n\n    return new TransactionInstruction({ keys, programId, data });\n}\n\n/** A decoded, valid Burn instruction */\nexport interface DecodedBurnInstruction {\n    programId: PublicKey;\n    keys: {\n        account: AccountMeta;\n        mint: AccountMeta;\n        owner: AccountMeta;\n        multiSigners: AccountMeta[];\n    };\n    data: {\n        instruction: TokenInstruction.Burn;\n        amount: bigint;\n    };\n}\n\n/**\n * Decode a Burn instruction and validate it\n *\n * @param instruction Transaction instruction to decode\n * @param programId   SPL Token program account\n *\n * @return Decoded, valid instruction\n */\nexport function decodeBurnInstruction(\n    instruction: TransactionInstruction,\n    programId = TOKEN_PROGRAM_ID\n): DecodedBurnInstruction {\n    if (!instruction.programId.equals(programId)) throw new TokenInvalidInstructionProgramError();\n    if (instruction.data.length !== burnInstructionData.span) throw new TokenInvalidInstructionDataError();\n\n    const {\n        keys: { account, mint, owner, multiSigners },\n        data,\n    } = decodeBurnInstructionUnchecked(instruction);\n    if (data.instruction !== TokenInstruction.Burn) throw new TokenInvalidInstructionTypeError();\n    if (!account || !mint || !owner) throw new TokenInvalidInstructionKeysError();\n\n    // TODO: key checks?\n\n    return {\n        programId,\n        keys: {\n            account,\n            mint,\n            owner,\n            multiSigners,\n        },\n        data,\n    };\n}\n\n/** A decoded, non-validated Burn instruction */\nexport interface DecodedBurnInstructionUnchecked {\n    programId: PublicKey;\n    keys: {\n        account: AccountMeta | undefined;\n        mint: AccountMeta | undefined;\n        owner: AccountMeta | undefined;\n        multiSigners: AccountMeta[];\n    };\n    data: {\n        instruction: number;\n        amount: bigint;\n    };\n}\n\n/**\n * Decode a Burn instruction without validating it\n *\n * @param instruction Transaction instruction to decode\n *\n * @return Decoded, non-validated instruction\n */\nexport function decodeBurnInstructionUnchecked({\n    programId,\n    keys: [account, mint, owner, ...multiSigners],\n    data,\n}: TransactionInstruction): DecodedBurnInstructionUnchecked {\n    return {\n        programId,\n        keys: {\n            account,\n            mint,\n            owner,\n            multiSigners,\n        },\n        data: burnInstructionData.decode(data),\n    };\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}