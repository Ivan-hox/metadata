{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"/Users/ivan/Metadata/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\").default;\nvar _toConsumableArray = require(\"/Users/ivan/Metadata/node_modules/@babel/runtime/helpers/toConsumableArray.js\").default;\nvar _slicedToArray = require(\"/Users/ivan/Metadata/node_modules/@babel/runtime/helpers/slicedToArray.js\").default;\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.disableRequiredMemoTransfers = exports.enableRequiredMemoTransfers = void 0;\nvar web3_js_1 = require(\"@solana/web3.js\");\nvar internal_js_1 = require(\"../../actions/internal.js\");\nvar constants_js_1 = require(\"../../constants.js\");\nvar instructions_js_1 = require(\"./instructions.js\");\n/**\n * Enable memo transfers on the given account\n *\n * @param connection     Connection to use\n * @param payer          Payer of the transaction fees\n * @param account        Account to modify\n * @param owner          Owner of the account\n * @param multiSigners   Signing accounts if `owner` is a multisig\n * @param confirmOptions Options for confirming the transaction\n * @param programId      SPL Token program account\n *\n * @return Signature of the confirmed transaction\n */\nfunction enableRequiredMemoTransfers(connection, payer, account, owner) {\n  var multiSigners = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : [];\n  var confirmOptions = arguments.length > 5 ? arguments[5] : undefined;\n  var programId = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : constants_js_1.TOKEN_2022_PROGRAM_ID;\n  return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n    var _ref, _ref2, ownerPublicKey, signers, transaction;\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _ref = (0, internal_js_1.getSigners)(owner, multiSigners), _ref2 = _slicedToArray(_ref, 2), ownerPublicKey = _ref2[0], signers = _ref2[1];\n            transaction = new web3_js_1.Transaction().add((0, instructions_js_1.createEnableRequiredMemoTransfersInstruction)(account, ownerPublicKey, signers, programId));\n            _context.next = 4;\n            return (0, web3_js_1.sendAndConfirmTransaction)(connection, transaction, [payer].concat(_toConsumableArray(signers)), confirmOptions);\n          case 4:\n            return _context.abrupt(\"return\", _context.sent);\n          case 5:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n}\nexports.enableRequiredMemoTransfers = enableRequiredMemoTransfers;\n/**\n * Disable memo transfers on the given account\n *\n * @param connection     Connection to use\n * @param payer          Payer of the transaction fees\n * @param account        Account to modify\n * @param owner          Owner of the account\n * @param multiSigners   Signing accounts if `owner` is a multisig\n * @param confirmOptions Options for confirming the transaction\n * @param programId      SPL Token program account\n *\n * @return Signature of the confirmed transaction\n */\nfunction disableRequiredMemoTransfers(connection, payer, account, owner) {\n  var multiSigners = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : [];\n  var confirmOptions = arguments.length > 5 ? arguments[5] : undefined;\n  var programId = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : constants_js_1.TOKEN_2022_PROGRAM_ID;\n  return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n    var _ref3, _ref4, ownerPublicKey, signers, transaction;\n    return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _ref3 = (0, internal_js_1.getSigners)(owner, multiSigners), _ref4 = _slicedToArray(_ref3, 2), ownerPublicKey = _ref4[0], signers = _ref4[1];\n            transaction = new web3_js_1.Transaction().add((0, instructions_js_1.createDisableRequiredMemoTransfersInstruction)(account, ownerPublicKey, signers, programId));\n            _context2.next = 4;\n            return (0, web3_js_1.sendAndConfirmTransaction)(connection, transaction, [payer].concat(_toConsumableArray(signers)), confirmOptions);\n          case 4:\n            return _context2.abrupt(\"return\", _context2.sent);\n          case 5:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n}\nexports.disableRequiredMemoTransfers = disableRequiredMemoTransfers;","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA;AACA;AACA;AACA;AAKA;;;;;;;;;;;;;AAaA,SAAsBA,2BAA2B,CAC7CC,UAAsB,EACtBC,KAAa,EACbC,OAAkB,EAClBC,KAAyB,EAGQ;EAAA,IAFjCC,mFAAyB,EAAE;EAAA,IAC3BC,cAA+B;EAAA,IAC/BC,SAAS,uEAAGC,oCAAqB;;;;;;;mBAEC,4BAAU,EAACJ,KAAK,EAAEC,YAAY,CAAC,mCAA1DI,cAAc,aAAEC,OAAO;YAExBC,WAAW,GAAG,IAAIC,qBAAW,EAAE,CAACC,GAAG,CACrC,kEAA4C,EAACV,OAAO,EAAEM,cAAc,EAAEC,OAAO,EAAEH,SAAS,CAAC,CAC5F;YAAA;YAEM,OAAM,uCAAyB,EAACN,UAAU,EAAEU,WAAW,GAAGT,KAAK,4BAAKQ,OAAO,IAAGJ,cAAc,CAAC;UAAA;YAAA;UAAA;UAAA;YAAA;QAAA;MAAA;IAAA;EAAA,CACvG;;AAhBDQ;AAkBA;;;;;;;;;;;;;AAaA,SAAsBC,4BAA4B,CAC9Cd,UAAsB,EACtBC,KAAa,EACbC,OAAkB,EAClBC,KAAyB,EAGQ;EAAA,IAFjCC,mFAAyB,EAAE;EAAA,IAC3BC,cAA+B;EAAA,IAC/BC,SAAS,uEAAGC,oCAAqB;;;;;;;oBAEC,4BAAU,EAACJ,KAAK,EAAEC,YAAY,CAAC,oCAA1DI,cAAc,aAAEC,OAAO;YAExBC,WAAW,GAAG,IAAIC,qBAAW,EAAE,CAACC,GAAG,CACrC,mEAA6C,EAACV,OAAO,EAAEM,cAAc,EAAEC,OAAO,EAAEH,SAAS,CAAC,CAC7F;YAAA;YAEM,OAAM,uCAAyB,EAACN,UAAU,EAAEU,WAAW,GAAGT,KAAK,4BAAKQ,OAAO,IAAGJ,cAAc,CAAC;UAAA;YAAA;UAAA;UAAA;YAAA;QAAA;MAAA;IAAA;EAAA,CACvG;;AAhBDQ","names":["enableRequiredMemoTransfers","connection","payer","account","owner","multiSigners","confirmOptions","programId","constants_js_1","ownerPublicKey","signers","transaction","web3_js_1","add","exports","disableRequiredMemoTransfers"],"sources":["/Users/ivan/Metadata/node_modules/@solana/spl-token/src/extensions/memoTransfer/actions.ts"],"sourcesContent":["import type { ConfirmOptions, Connection, PublicKey, Signer, TransactionSignature } from '@solana/web3.js';\nimport { sendAndConfirmTransaction, Transaction } from '@solana/web3.js';\nimport { getSigners } from '../../actions/internal.js';\nimport { TOKEN_2022_PROGRAM_ID } from '../../constants.js';\nimport {\n    createDisableRequiredMemoTransfersInstruction,\n    createEnableRequiredMemoTransfersInstruction,\n} from './instructions.js';\n\n/**\n * Enable memo transfers on the given account\n *\n * @param connection     Connection to use\n * @param payer          Payer of the transaction fees\n * @param account        Account to modify\n * @param owner          Owner of the account\n * @param multiSigners   Signing accounts if `owner` is a multisig\n * @param confirmOptions Options for confirming the transaction\n * @param programId      SPL Token program account\n *\n * @return Signature of the confirmed transaction\n */\nexport async function enableRequiredMemoTransfers(\n    connection: Connection,\n    payer: Signer,\n    account: PublicKey,\n    owner: Signer | PublicKey,\n    multiSigners: Signer[] = [],\n    confirmOptions?: ConfirmOptions,\n    programId = TOKEN_2022_PROGRAM_ID\n): Promise<TransactionSignature> {\n    const [ownerPublicKey, signers] = getSigners(owner, multiSigners);\n\n    const transaction = new Transaction().add(\n        createEnableRequiredMemoTransfersInstruction(account, ownerPublicKey, signers, programId)\n    );\n\n    return await sendAndConfirmTransaction(connection, transaction, [payer, ...signers], confirmOptions);\n}\n\n/**\n * Disable memo transfers on the given account\n *\n * @param connection     Connection to use\n * @param payer          Payer of the transaction fees\n * @param account        Account to modify\n * @param owner          Owner of the account\n * @param multiSigners   Signing accounts if `owner` is a multisig\n * @param confirmOptions Options for confirming the transaction\n * @param programId      SPL Token program account\n *\n * @return Signature of the confirmed transaction\n */\nexport async function disableRequiredMemoTransfers(\n    connection: Connection,\n    payer: Signer,\n    account: PublicKey,\n    owner: Signer | PublicKey,\n    multiSigners: Signer[] = [],\n    confirmOptions?: ConfirmOptions,\n    programId = TOKEN_2022_PROGRAM_ID\n): Promise<TransactionSignature> {\n    const [ownerPublicKey, signers] = getSigners(owner, multiSigners);\n\n    const transaction = new Transaction().add(\n        createDisableRequiredMemoTransfersInstruction(account, ownerPublicKey, signers, programId)\n    );\n\n    return await sendAndConfirmTransaction(connection, transaction, [payer, ...signers], confirmOptions);\n}\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}