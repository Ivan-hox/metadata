{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"/Users/ivan/Metadata/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\").default;\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.uiAmountToAmount = void 0;\nvar buffer_layout_utils_1 = require(\"@solana/buffer-layout-utils\");\nvar web3_js_1 = require(\"@solana/web3.js\");\nvar constants_js_1 = require(\"../constants.js\");\nvar uiAmountToAmount_js_1 = require(\"../instructions/uiAmountToAmount.js\");\n/**\n * Amount as a string using mint-prescribed decimals\n *\n * @param connection     Connection to use\n * @param payer          Payer of the transaction fees\n * @param mint           Mint for the account\n * @param amount         Ui Amount of tokens to be converted to Amount\n * @param programId      SPL Token program account\n *\n * @return Ui Amount generated\n */\nfunction uiAmountToAmount(connection, payer, mint, amount) {\n  var programId = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : constants_js_1.TOKEN_PROGRAM_ID;\n  return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n    var transaction, _yield$connection$sim, returnData, err, data;\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            transaction = new web3_js_1.Transaction().add((0, uiAmountToAmount_js_1.createUiAmountToAmountInstruction)(mint, amount, programId));\n            _context.next = 3;\n            return connection.simulateTransaction(transaction, [payer], false);\n          case 3:\n            _yield$connection$sim = _context.sent.value;\n            returnData = _yield$connection$sim.returnData;\n            err = _yield$connection$sim.err;\n            if (!returnData) {\n              _context.next = 9;\n              break;\n            }\n            data = Buffer.from(returnData.data[0], returnData.data[1]);\n            return _context.abrupt(\"return\", (0, buffer_layout_utils_1.u64)().decode(data));\n          case 9:\n            return _context.abrupt(\"return\", err);\n          case 10:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n}\nexports.uiAmountToAmount = uiAmountToAmount;","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAEA;AACA;AACA;AAEA;;;;;;;;;;;AAWA,SAAsBA,gBAAgB,CAClCC,UAAsB,EACtBC,KAAa,EACbC,IAAe,EACfC,MAAc,EACc;EAAA,IAA5BC,SAAS,uEAAGC,+BAAgB;;;;;;;YAEtBC,WAAW,GAAG,IAAIC,qBAAW,EAAE,CAACC,GAAG,CAAC,2DAAiC,EAACN,IAAI,EAAEC,MAAM,EAAEC,SAAS,CAAC,CAAC;YAAA;YACxE,OAAMJ,UAAU,CAACS,mBAAmB,CAACH,WAAW,EAAE,CAACL,KAAK,CAAC,EAAE,KAAK,CAAC;UAAA;YAAA,sCAAES,KAAK;YAA7FC,UAAU,yBAAVA,UAAU;YAAEC,GAAG,yBAAHA,GAAG;YAAA,KACnBD,UAAU;cAAA;cAAA;YAAA;YACJE,IAAI,GAAGC,MAAM,CAACC,IAAI,CAACJ,UAAU,CAACE,IAAI,CAAC,CAAC,CAAC,EAAEF,UAAU,CAACE,IAAI,CAAC,CAAC,CAAC,CAAC;YAAA,iCACzD,6BAAG,GAAE,CAACG,MAAM,CAACH,IAAI,CAAC;UAAA;YAAA,iCAEtBD,GAAG;UAAA;UAAA;YAAA;QAAA;MAAA;IAAA;EAAA,CACb;;AAdDK","names":["uiAmountToAmount","connection","payer","mint","amount","programId","constants_js_1","transaction","web3_js_1","add","simulateTransaction","value","returnData","err","data","Buffer","from","decode","exports"],"sources":["/Users/ivan/Metadata/node_modules/@solana/spl-token/src/actions/uiAmountToAmount.ts"],"sourcesContent":["import { u64 } from '@solana/buffer-layout-utils';\nimport type { Connection, PublicKey, Signer, TransactionError } from '@solana/web3.js';\nimport { Transaction } from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID } from '../constants.js';\nimport { createUiAmountToAmountInstruction } from '../instructions/uiAmountToAmount.js';\n\n/**\n * Amount as a string using mint-prescribed decimals\n *\n * @param connection     Connection to use\n * @param payer          Payer of the transaction fees\n * @param mint           Mint for the account\n * @param amount         Ui Amount of tokens to be converted to Amount\n * @param programId      SPL Token program account\n *\n * @return Ui Amount generated\n */\nexport async function uiAmountToAmount(\n    connection: Connection,\n    payer: Signer,\n    mint: PublicKey,\n    amount: string,\n    programId = TOKEN_PROGRAM_ID\n): Promise<bigint | TransactionError | null> {\n    const transaction = new Transaction().add(createUiAmountToAmountInstruction(mint, amount, programId));\n    const { returnData, err } = (await connection.simulateTransaction(transaction, [payer], false)).value;\n    if (returnData) {\n        const data = Buffer.from(returnData.data[0], returnData.data[1]);\n        return u64().decode(data);\n    }\n    return err;\n}\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}