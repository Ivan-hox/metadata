{"ast":null,"code":"import _regeneratorRuntime from \"/Users/ivan/Metadata/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"/Users/ivan/Metadata/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { StatusCodes, TransportStatusError } from '@ledgerhq/hw-transport';\nimport { PublicKey } from '@solana/web3.js';\nimport './polyfills/index.js';\nexport function getDerivationPath(account, change) {\n  var length = account !== undefined ? change === undefined ? 3 : 4 : 2;\n  var derivationPath = Buffer.alloc(1 + length * 4);\n  var offset = derivationPath.writeUInt8(length, 0);\n  offset = derivationPath.writeUInt32BE(harden(44), offset); // Using BIP44\n  offset = derivationPath.writeUInt32BE(harden(501), offset); // Solana's BIP44 path\n  if (account !== undefined) {\n    offset = derivationPath.writeUInt32BE(harden(account), offset);\n    if (change !== undefined) {\n      derivationPath.writeUInt32BE(harden(change), offset);\n    }\n  }\n  return derivationPath;\n}\nvar BIP32_HARDENED_BIT = 1 << 31 >>> 0;\nfunction harden(n) {\n  return (n | BIP32_HARDENED_BIT) >>> 0;\n}\nvar INS_GET_PUBKEY = 0x05;\nvar INS_SIGN_MESSAGE = 0x06;\nvar P1_NON_CONFIRM = 0x00;\nvar P1_CONFIRM = 0x01;\nvar P2_EXTEND = 0x01;\nvar P2_MORE = 0x02;\nvar MAX_PAYLOAD = 255;\nvar LEDGER_CLA = 0xe0;\n/** @internal */\nexport function getPublicKey(_x, _x2) {\n  return _getPublicKey.apply(this, arguments);\n}\n/** @internal */\nfunction _getPublicKey() {\n  _getPublicKey = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(transport, derivationPath) {\n    var bytes;\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return send(transport, INS_GET_PUBKEY, P1_NON_CONFIRM, derivationPath);\n          case 2:\n            bytes = _context.sent;\n            return _context.abrupt(\"return\", new PublicKey(bytes));\n          case 4:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _getPublicKey.apply(this, arguments);\n}\nexport function signTransaction(_x3, _x4, _x5) {\n  return _signTransaction.apply(this, arguments);\n}\nfunction _signTransaction() {\n  _signTransaction = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(transport, transaction, derivationPath) {\n    var paths, message, data;\n    return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            paths = Buffer.alloc(1);\n            paths.writeUInt8(1, 0);\n            message = transaction.serializeMessage();\n            data = Buffer.concat([paths, derivationPath, message]);\n            _context2.next = 6;\n            return send(transport, INS_SIGN_MESSAGE, P1_CONFIRM, data);\n          case 6:\n            return _context2.abrupt(\"return\", _context2.sent);\n          case 7:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n  return _signTransaction.apply(this, arguments);\n}\nfunction send(_x6, _x7, _x8, _x9) {\n  return _send.apply(this, arguments);\n}\nfunction _send() {\n  _send = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(transport, instruction, p1, data) {\n    var p2, offset, _buffer, _response, buffer, response;\n    return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            p2 = 0;\n            offset = 0;\n            if (!(data.length > MAX_PAYLOAD)) {\n              _context3.next = 14;\n              break;\n            }\n          case 3:\n            if (!(data.length - offset > MAX_PAYLOAD)) {\n              _context3.next = 14;\n              break;\n            }\n            _buffer = data.slice(offset, offset + MAX_PAYLOAD);\n            _context3.next = 7;\n            return transport.send(LEDGER_CLA, instruction, p1, p2 | P2_MORE, _buffer);\n          case 7:\n            _response = _context3.sent;\n            if (!(_response.length !== 2)) {\n              _context3.next = 10;\n              break;\n            }\n            throw new TransportStatusError(StatusCodes.INCORRECT_DATA);\n          case 10:\n            p2 |= P2_EXTEND;\n            offset += MAX_PAYLOAD;\n            _context3.next = 3;\n            break;\n          case 14:\n            buffer = data.slice(offset);\n            _context3.next = 17;\n            return transport.send(LEDGER_CLA, instruction, p1, p2, buffer);\n          case 17:\n            response = _context3.sent;\n            return _context3.abrupt(\"return\", response.slice(0, response.length - 2));\n          case 19:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3);\n  }));\n  return _send.apply(this, arguments);\n}","map":{"version":3,"mappings":"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","names":["StatusCodes","TransportStatusError","PublicKey","getDerivationPath","account","change","length","undefined","derivationPath","Buffer","alloc","offset","writeUInt8","writeUInt32BE","harden","BIP32_HARDENED_BIT","n","INS_GET_PUBKEY","INS_SIGN_MESSAGE","P1_NON_CONFIRM","P1_CONFIRM","P2_EXTEND","P2_MORE","MAX_PAYLOAD","LEDGER_CLA","getPublicKey","transport","send","bytes","signTransaction","transaction","paths","message","serializeMessage","data","concat","instruction","p1","p2","buffer","slice","response","INCORRECT_DATA"],"sources":["/Users/ivan/Metadata/node_modules/@solana/wallet-adapter-ledger/src/util.ts"],"sourcesContent":["import type { default as Transport } from '@ledgerhq/hw-transport';\nimport { StatusCodes, TransportStatusError } from '@ledgerhq/hw-transport';\nimport type { Transaction } from '@solana/web3.js';\nimport { PublicKey } from '@solana/web3.js';\nimport './polyfills/index.js';\n\nexport function getDerivationPath(account?: number, change?: number): Buffer {\n    const length = account !== undefined ? (change === undefined ? 3 : 4) : 2;\n    const derivationPath = Buffer.alloc(1 + length * 4);\n\n    let offset = derivationPath.writeUInt8(length, 0);\n    offset = derivationPath.writeUInt32BE(harden(44), offset); // Using BIP44\n    offset = derivationPath.writeUInt32BE(harden(501), offset); // Solana's BIP44 path\n\n    if (account !== undefined) {\n        offset = derivationPath.writeUInt32BE(harden(account), offset);\n        if (change !== undefined) {\n            derivationPath.writeUInt32BE(harden(change), offset);\n        }\n    }\n\n    return derivationPath;\n}\n\nconst BIP32_HARDENED_BIT = (1 << 31) >>> 0;\n\nfunction harden(n: number): number {\n    return (n | BIP32_HARDENED_BIT) >>> 0;\n}\n\nconst INS_GET_PUBKEY = 0x05;\nconst INS_SIGN_MESSAGE = 0x06;\n\nconst P1_NON_CONFIRM = 0x00;\nconst P1_CONFIRM = 0x01;\n\nconst P2_EXTEND = 0x01;\nconst P2_MORE = 0x02;\n\nconst MAX_PAYLOAD = 255;\n\nconst LEDGER_CLA = 0xe0;\n\n/** @internal */\nexport async function getPublicKey(transport: Transport, derivationPath: Buffer): Promise<PublicKey> {\n    const bytes = await send(transport, INS_GET_PUBKEY, P1_NON_CONFIRM, derivationPath);\n    return new PublicKey(bytes);\n}\n\n/** @internal */\nexport async function signTransaction(\n    transport: Transport,\n    transaction: Transaction,\n    derivationPath: Buffer\n): Promise<Buffer> {\n    const paths = Buffer.alloc(1);\n    paths.writeUInt8(1, 0);\n\n    const message = transaction.serializeMessage();\n    const data = Buffer.concat([paths, derivationPath, message]);\n\n    return await send(transport, INS_SIGN_MESSAGE, P1_CONFIRM, data);\n}\n\nasync function send(transport: Transport, instruction: number, p1: number, data: Buffer): Promise<Buffer> {\n    let p2 = 0;\n    let offset = 0;\n\n    if (data.length > MAX_PAYLOAD) {\n        while (data.length - offset > MAX_PAYLOAD) {\n            const buffer = data.slice(offset, offset + MAX_PAYLOAD);\n            const response = await transport.send(LEDGER_CLA, instruction, p1, p2 | P2_MORE, buffer);\n            // @ts-ignore -- TransportStatusError is a constructor Function, not a Class\n            if (response.length !== 2) throw new TransportStatusError(StatusCodes.INCORRECT_DATA);\n\n            p2 |= P2_EXTEND;\n            offset += MAX_PAYLOAD;\n        }\n    }\n\n    const buffer = data.slice(offset);\n    const response = await transport.send(LEDGER_CLA, instruction, p1, p2, buffer);\n\n    return response.slice(0, response.length - 2);\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}