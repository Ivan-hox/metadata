{"ast":null,"code":"\"use strict\";\n\nvar _toArray = require(\"/Users/ivan/Metadata/node_modules/@babel/runtime/helpers/toArray.js\").default;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.decodeSetAuthorityInstructionUnchecked = exports.decodeSetAuthorityInstruction = exports.createSetAuthorityInstruction = exports.setAuthorityInstructionData = exports.AuthorityType = void 0;\nvar buffer_layout_1 = require(\"@solana/buffer-layout\");\nvar buffer_layout_utils_1 = require(\"@solana/buffer-layout-utils\");\nvar web3_js_1 = require(\"@solana/web3.js\");\nvar constants_js_1 = require(\"../constants.js\");\nvar errors_js_1 = require(\"../errors.js\");\nvar internal_js_1 = require(\"./internal.js\");\nvar types_js_1 = require(\"./types.js\");\n/** Authority types defined by the program */\nvar AuthorityType;\n(function (AuthorityType) {\n  AuthorityType[AuthorityType[\"MintTokens\"] = 0] = \"MintTokens\";\n  AuthorityType[AuthorityType[\"FreezeAccount\"] = 1] = \"FreezeAccount\";\n  AuthorityType[AuthorityType[\"AccountOwner\"] = 2] = \"AccountOwner\";\n  AuthorityType[AuthorityType[\"CloseAccount\"] = 3] = \"CloseAccount\";\n})(AuthorityType = exports.AuthorityType || (exports.AuthorityType = {}));\n/** TODO: docs */\nexports.setAuthorityInstructionData = (0, buffer_layout_1.struct)([(0, buffer_layout_1.u8)('instruction'), (0, buffer_layout_1.u8)('authorityType'), (0, buffer_layout_1.u8)('newAuthorityOption'), (0, buffer_layout_utils_1.publicKey)('newAuthority')]);\n/**\n * Construct a SetAuthority instruction\n *\n * @param account          Address of the token account\n * @param currentAuthority Current authority of the specified type\n * @param authorityType    Type of authority to set\n * @param newAuthority     New authority of the account\n * @param multiSigners     Signing accounts if `currentAuthority` is a multisig\n * @param programId        SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\nfunction createSetAuthorityInstruction(account, currentAuthority, authorityType, newAuthority) {\n  var multiSigners = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : [];\n  var programId = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : constants_js_1.TOKEN_PROGRAM_ID;\n  var keys = (0, internal_js_1.addSigners)([{\n    pubkey: account,\n    isSigner: false,\n    isWritable: true\n  }], currentAuthority, multiSigners);\n  var data = Buffer.alloc(exports.setAuthorityInstructionData.span);\n  exports.setAuthorityInstructionData.encode({\n    instruction: types_js_1.TokenInstruction.SetAuthority,\n    authorityType: authorityType,\n    newAuthorityOption: newAuthority ? 1 : 0,\n    newAuthority: newAuthority || new web3_js_1.PublicKey(0)\n  }, data);\n  return new web3_js_1.TransactionInstruction({\n    keys: keys,\n    programId: programId,\n    data: data\n  });\n}\nexports.createSetAuthorityInstruction = createSetAuthorityInstruction;\n/**\n * Decode a SetAuthority instruction and validate it\n *\n * @param instruction Transaction instruction to decode\n * @param programId   SPL Token program account\n *\n * @return Decoded, valid instruction\n */\nfunction decodeSetAuthorityInstruction(instruction) {\n  var programId = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : constants_js_1.TOKEN_PROGRAM_ID;\n  if (!instruction.programId.equals(programId)) throw new errors_js_1.TokenInvalidInstructionProgramError();\n  if (instruction.data.length !== exports.setAuthorityInstructionData.span) throw new errors_js_1.TokenInvalidInstructionDataError();\n  var _decodeSetAuthorityIn = decodeSetAuthorityInstructionUnchecked(instruction),\n    _decodeSetAuthorityIn2 = _decodeSetAuthorityIn.keys,\n    account = _decodeSetAuthorityIn2.account,\n    currentAuthority = _decodeSetAuthorityIn2.currentAuthority,\n    multiSigners = _decodeSetAuthorityIn2.multiSigners,\n    data = _decodeSetAuthorityIn.data;\n  if (data.instruction !== types_js_1.TokenInstruction.SetAuthority) throw new errors_js_1.TokenInvalidInstructionTypeError();\n  if (!account || !currentAuthority) throw new errors_js_1.TokenInvalidInstructionKeysError();\n  // TODO: key checks?\n  return {\n    programId: programId,\n    keys: {\n      account: account,\n      currentAuthority: currentAuthority,\n      multiSigners: multiSigners\n    },\n    data: data\n  };\n}\nexports.decodeSetAuthorityInstruction = decodeSetAuthorityInstruction;\n/**\n * Decode a SetAuthority instruction without validating it\n *\n * @param instruction Transaction instruction to decode\n *\n * @return Decoded, non-validated instruction\n */\nfunction decodeSetAuthorityInstructionUnchecked(_ref) {\n  var programId = _ref.programId,\n    _ref$keys = _toArray(_ref.keys),\n    account = _ref$keys[0],\n    currentAuthority = _ref$keys[1],\n    multiSigners = _ref$keys.slice(2),\n    data = _ref.data;\n  var _exports$setAuthority = exports.setAuthorityInstructionData.decode(data),\n    instruction = _exports$setAuthority.instruction,\n    authorityType = _exports$setAuthority.authorityType,\n    newAuthorityOption = _exports$setAuthority.newAuthorityOption,\n    newAuthority = _exports$setAuthority.newAuthority;\n  return {\n    programId: programId,\n    keys: {\n      account: account,\n      currentAuthority: currentAuthority,\n      multiSigners: multiSigners\n    },\n    data: {\n      instruction: instruction,\n      authorityType: authorityType,\n      newAuthority: newAuthorityOption ? newAuthority : null\n    }\n  };\n}\nexports.decodeSetAuthorityInstructionUnchecked = decodeSetAuthorityInstructionUnchecked;","map":{"version":3,"mappings":"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","names":["AuthorityType","exports","createSetAuthorityInstruction","account","currentAuthority","authorityType","newAuthority","multiSigners","programId","constants_js_1","keys","pubkey","isSigner","isWritable","data","Buffer","alloc","span","encode","instruction","types_js_1","SetAuthority","newAuthorityOption","web3_js_1","decodeSetAuthorityInstruction","equals","errors_js_1","length","decodeSetAuthorityInstructionUnchecked","decode"],"sources":["/Users/ivan/Metadata/node_modules/@solana/spl-token/src/instructions/setAuthority.ts"],"sourcesContent":["import { struct, u8 } from '@solana/buffer-layout';\nimport { publicKey } from '@solana/buffer-layout-utils';\nimport type { AccountMeta, Signer } from '@solana/web3.js';\nimport { PublicKey, TransactionInstruction } from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID } from '../constants.js';\nimport {\n    TokenInvalidInstructionDataError,\n    TokenInvalidInstructionKeysError,\n    TokenInvalidInstructionProgramError,\n    TokenInvalidInstructionTypeError,\n} from '../errors.js';\nimport { addSigners } from './internal.js';\nimport { TokenInstruction } from './types.js';\n\n/** Authority types defined by the program */\nexport enum AuthorityType {\n    MintTokens = 0,\n    FreezeAccount = 1,\n    AccountOwner = 2,\n    CloseAccount = 3,\n}\n\n/** TODO: docs */\nexport interface SetAuthorityInstructionData {\n    instruction: TokenInstruction.SetAuthority;\n    authorityType: AuthorityType;\n    newAuthorityOption: 1 | 0;\n    newAuthority: PublicKey;\n}\n\n/** TODO: docs */\nexport const setAuthorityInstructionData = struct<SetAuthorityInstructionData>([\n    u8('instruction'),\n    u8('authorityType'),\n    u8('newAuthorityOption'),\n    publicKey('newAuthority'),\n]);\n\n/**\n * Construct a SetAuthority instruction\n *\n * @param account          Address of the token account\n * @param currentAuthority Current authority of the specified type\n * @param authorityType    Type of authority to set\n * @param newAuthority     New authority of the account\n * @param multiSigners     Signing accounts if `currentAuthority` is a multisig\n * @param programId        SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\nexport function createSetAuthorityInstruction(\n    account: PublicKey,\n    currentAuthority: PublicKey,\n    authorityType: AuthorityType,\n    newAuthority: PublicKey | null,\n    multiSigners: Signer[] = [],\n    programId = TOKEN_PROGRAM_ID\n): TransactionInstruction {\n    const keys = addSigners([{ pubkey: account, isSigner: false, isWritable: true }], currentAuthority, multiSigners);\n\n    const data = Buffer.alloc(setAuthorityInstructionData.span);\n    setAuthorityInstructionData.encode(\n        {\n            instruction: TokenInstruction.SetAuthority,\n            authorityType,\n            newAuthorityOption: newAuthority ? 1 : 0,\n            newAuthority: newAuthority || new PublicKey(0),\n        },\n        data\n    );\n\n    return new TransactionInstruction({ keys, programId, data });\n}\n\n/** A decoded, valid SetAuthority instruction */\nexport interface DecodedSetAuthorityInstruction {\n    programId: PublicKey;\n    keys: {\n        account: AccountMeta;\n        currentAuthority: AccountMeta;\n        multiSigners: AccountMeta[];\n    };\n    data: {\n        instruction: TokenInstruction.SetAuthority;\n        authorityType: AuthorityType;\n        newAuthority: PublicKey | null;\n    };\n}\n\n/**\n * Decode a SetAuthority instruction and validate it\n *\n * @param instruction Transaction instruction to decode\n * @param programId   SPL Token program account\n *\n * @return Decoded, valid instruction\n */\nexport function decodeSetAuthorityInstruction(\n    instruction: TransactionInstruction,\n    programId = TOKEN_PROGRAM_ID\n): DecodedSetAuthorityInstruction {\n    if (!instruction.programId.equals(programId)) throw new TokenInvalidInstructionProgramError();\n    if (instruction.data.length !== setAuthorityInstructionData.span) throw new TokenInvalidInstructionDataError();\n\n    const {\n        keys: { account, currentAuthority, multiSigners },\n        data,\n    } = decodeSetAuthorityInstructionUnchecked(instruction);\n    if (data.instruction !== TokenInstruction.SetAuthority) throw new TokenInvalidInstructionTypeError();\n    if (!account || !currentAuthority) throw new TokenInvalidInstructionKeysError();\n\n    // TODO: key checks?\n\n    return {\n        programId,\n        keys: {\n            account,\n            currentAuthority,\n            multiSigners,\n        },\n        data,\n    };\n}\n\n/** A decoded, non-validated SetAuthority instruction */\nexport interface DecodedSetAuthorityInstructionUnchecked {\n    programId: PublicKey;\n    keys: {\n        account: AccountMeta | undefined;\n        currentAuthority: AccountMeta | undefined;\n        multiSigners: AccountMeta[];\n    };\n    data: {\n        instruction: number;\n        authorityType: AuthorityType;\n        newAuthority: PublicKey | null;\n    };\n}\n\n/**\n * Decode a SetAuthority instruction without validating it\n *\n * @param instruction Transaction instruction to decode\n *\n * @return Decoded, non-validated instruction\n */\nexport function decodeSetAuthorityInstructionUnchecked({\n    programId,\n    keys: [account, currentAuthority, ...multiSigners],\n    data,\n}: TransactionInstruction): DecodedSetAuthorityInstructionUnchecked {\n    const { instruction, authorityType, newAuthorityOption, newAuthority } = setAuthorityInstructionData.decode(data);\n\n    return {\n        programId,\n        keys: {\n            account,\n            currentAuthority,\n            multiSigners,\n        },\n        data: {\n            instruction,\n            authorityType,\n            newAuthority: newAuthorityOption ? newAuthority : null,\n        },\n    };\n}\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}