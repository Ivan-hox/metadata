{"ast":null,"code":"import _toArray from \"/Users/ivan/Metadata/node_modules/@babel/runtime/helpers/esm/toArray.js\";\nimport { struct, u8 } from '@solana/buffer-layout';\nimport { u64 } from '@solana/buffer-layout-utils';\nimport { TransactionInstruction } from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID } from '../constants.js';\nimport { TokenInvalidInstructionDataError, TokenInvalidInstructionKeysError, TokenInvalidInstructionProgramError, TokenInvalidInstructionTypeError } from '../errors.js';\nimport { addSigners } from './internal.js';\nimport { TokenInstruction } from './types.js';\n/** TODO: docs */\nexport var transferCheckedInstructionData = struct([u8('instruction'), u64('amount'), u8('decimals')]);\n/**\n * Construct a TransferChecked instruction\n *\n * @param source       Source account\n * @param mint         Mint account\n * @param destination  Destination account\n * @param owner        Owner of the source account\n * @param amount       Number of tokens to transfer\n * @param decimals     Number of decimals in transfer amount\n * @param multiSigners Signing accounts if `owner` is a multisig\n * @param programId    SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\nexport function createTransferCheckedInstruction(source, mint, destination, owner, amount, decimals) {\n  var multiSigners = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : [];\n  var programId = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : TOKEN_PROGRAM_ID;\n  var keys = addSigners([{\n    pubkey: source,\n    isSigner: false,\n    isWritable: true\n  }, {\n    pubkey: mint,\n    isSigner: false,\n    isWritable: false\n  }, {\n    pubkey: destination,\n    isSigner: false,\n    isWritable: true\n  }], owner, multiSigners);\n  var data = Buffer.alloc(transferCheckedInstructionData.span);\n  transferCheckedInstructionData.encode({\n    instruction: TokenInstruction.TransferChecked,\n    amount: BigInt(amount),\n    decimals: decimals\n  }, data);\n  return new TransactionInstruction({\n    keys: keys,\n    programId: programId,\n    data: data\n  });\n}\n/**\n * Decode a TransferChecked instruction and validate it\n *\n * @param instruction Transaction instruction to decode\n * @param programId   SPL Token program account\n *\n * @return Decoded, valid instruction\n */\nexport function decodeTransferCheckedInstruction(instruction) {\n  var programId = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : TOKEN_PROGRAM_ID;\n  if (!instruction.programId.equals(programId)) throw new TokenInvalidInstructionProgramError();\n  if (instruction.data.length !== transferCheckedInstructionData.span) throw new TokenInvalidInstructionDataError();\n  var _decodeTransferChecke = decodeTransferCheckedInstructionUnchecked(instruction),\n    _decodeTransferChecke2 = _decodeTransferChecke.keys,\n    source = _decodeTransferChecke2.source,\n    mint = _decodeTransferChecke2.mint,\n    destination = _decodeTransferChecke2.destination,\n    owner = _decodeTransferChecke2.owner,\n    multiSigners = _decodeTransferChecke2.multiSigners,\n    data = _decodeTransferChecke.data;\n  if (data.instruction !== TokenInstruction.TransferChecked) throw new TokenInvalidInstructionTypeError();\n  if (!source || !mint || !destination || !owner) throw new TokenInvalidInstructionKeysError();\n  // TODO: key checks?\n  return {\n    programId: programId,\n    keys: {\n      source: source,\n      mint: mint,\n      destination: destination,\n      owner: owner,\n      multiSigners: multiSigners\n    },\n    data: data\n  };\n}\n/**\n * Decode a TransferChecked instruction without validating it\n *\n * @param instruction Transaction instruction to decode\n *\n * @return Decoded, non-validated instruction\n */\nexport function decodeTransferCheckedInstructionUnchecked(_ref) {\n  var programId = _ref.programId,\n    _ref$keys = _toArray(_ref.keys),\n    source = _ref$keys[0],\n    mint = _ref$keys[1],\n    destination = _ref$keys[2],\n    owner = _ref$keys[3],\n    multiSigners = _ref$keys.slice(4),\n    data = _ref.data;\n  return {\n    programId: programId,\n    keys: {\n      source: source,\n      mint: mint,\n      destination: destination,\n      owner: owner,\n      multiSigners: multiSigners\n    },\n    data: transferCheckedInstructionData.decode(data)\n  };\n}","map":{"version":3,"mappings":";AAAA,SAASA,MAAM,EAAEC,EAAE,QAAQ,uBAAuB;AAClD,SAASC,GAAG,QAAQ,6BAA6B;AAEjD,SAASC,sBAAsB,QAAQ,iBAAiB;AACxD,SAASC,gBAAgB,QAAQ,iBAAiB;AAClD,SACIC,gCAAgC,EAChCC,gCAAgC,EAChCC,mCAAmC,EACnCC,gCAAgC,QAC7B,cAAc;AACrB,SAASC,UAAU,QAAQ,eAAe;AAC1C,SAASC,gBAAgB,QAAQ,YAAY;AAS7C;AACA,OAAO,IAAMC,8BAA8B,GAAGX,MAAM,CAAiC,CACjFC,EAAE,CAAC,aAAa,CAAC,EACjBC,GAAG,CAAC,QAAQ,CAAC,EACbD,EAAE,CAAC,UAAU,CAAC,CACjB,CAAC;AAEF;;;;;;;;;;;;;;AAcA,OAAM,SAAUW,gCAAgC,CAC5CC,MAAiB,EACjBC,IAAe,EACfC,WAAsB,EACtBC,KAAgB,EAChBC,MAAuB,EACvBC,QAAgB,EAEY;EAAA,IAD5BC,mFAAyB,EAAE;EAAA,IAC3BC,SAAS,uEAAGhB,gBAAgB;EAE5B,IAAMiB,IAAI,GAAGZ,UAAU,CACnB,CACI;IAAEa,MAAM,EAAET,MAAM;IAAEU,QAAQ,EAAE,KAAK;IAAEC,UAAU,EAAE;EAAI,CAAE,EACrD;IAAEF,MAAM,EAAER,IAAI;IAAES,QAAQ,EAAE,KAAK;IAAEC,UAAU,EAAE;EAAK,CAAE,EACpD;IAAEF,MAAM,EAAEP,WAAW;IAAEQ,QAAQ,EAAE,KAAK;IAAEC,UAAU,EAAE;EAAI,CAAE,CAC7D,EACDR,KAAK,EACLG,YAAY,CACf;EAED,IAAMM,IAAI,GAAGC,MAAM,CAACC,KAAK,CAAChB,8BAA8B,CAACiB,IAAI,CAAC;EAC9DjB,8BAA8B,CAACkB,MAAM,CACjC;IACIC,WAAW,EAAEpB,gBAAgB,CAACqB,eAAe;IAC7Cd,MAAM,EAAEe,MAAM,CAACf,MAAM,CAAC;IACtBC,QAAQ,EAARA;GACH,EACDO,IAAI,CACP;EAED,OAAO,IAAItB,sBAAsB,CAAC;IAAEkB,IAAI,EAAJA,IAAI;IAAED,SAAS,EAATA,SAAS;IAAEK,IAAI,EAAJA;EAAI,CAAE,CAAC;AAChE;AAmBA;;;;;;;;AAQA,OAAM,SAAUQ,gCAAgC,CAC5CH,WAAmC,EACP;EAAA,IAA5BV,SAAS,uEAAGhB,gBAAgB;EAE5B,IAAI,CAAC0B,WAAW,CAACV,SAAS,CAACc,MAAM,CAACd,SAAS,CAAC,EAAE,MAAM,IAAIb,mCAAmC,EAAE;EAC7F,IAAIuB,WAAW,CAACL,IAAI,CAACU,MAAM,KAAKxB,8BAA8B,CAACiB,IAAI,EAAE,MAAM,IAAIvB,gCAAgC,EAAE;EAEjH,4BAGI+B,yCAAyC,CAACN,WAAW,CAAC;IAAA,+CAFtDT,IAAI;IAAIR,MAAM,0BAANA,MAAM;IAAEC,IAAI,0BAAJA,IAAI;IAAEC,WAAW,0BAAXA,WAAW;IAAEC,KAAK,0BAALA,KAAK;IAAEG,YAAY,0BAAZA,YAAY;IACtDM,IAAI,yBAAJA,IAAI;EAER,IAAIA,IAAI,CAACK,WAAW,KAAKpB,gBAAgB,CAACqB,eAAe,EAAE,MAAM,IAAIvB,gCAAgC,EAAE;EACvG,IAAI,CAACK,MAAM,IAAI,CAACC,IAAI,IAAI,CAACC,WAAW,IAAI,CAACC,KAAK,EAAE,MAAM,IAAIV,gCAAgC,EAAE;EAE5F;EAEA,OAAO;IACHc,SAAS,EAATA,SAAS;IACTC,IAAI,EAAE;MACFR,MAAM,EAANA,MAAM;MACNC,IAAI,EAAJA,IAAI;MACJC,WAAW,EAAXA,WAAW;MACXC,KAAK,EAALA,KAAK;MACLG,YAAY,EAAZA;KACH;IACDM,IAAI,EAAJA;GACH;AACL;AAmBA;;;;;;;AAOA,OAAM,SAAUW,yCAAyC,OAIhC;EAAA,IAHrBhB,SAAS,QAATA,SAAS;IAAA,0BACTC,IAAI;IAAGR,MAAM;IAAEC,IAAI;IAAEC,WAAW;IAAEC,KAAK;IAAKG,YAAY;IACxDM,IAAI,QAAJA,IAAI;EAEJ,OAAO;IACHL,SAAS,EAATA,SAAS;IACTC,IAAI,EAAE;MACFR,MAAM,EAANA,MAAM;MACNC,IAAI,EAAJA,IAAI;MACJC,WAAW,EAAXA,WAAW;MACXC,KAAK,EAALA,KAAK;MACLG,YAAY,EAAZA;KACH;IACDM,IAAI,EAAEd,8BAA8B,CAAC0B,MAAM,CAACZ,IAAI;GACnD;AACL","names":["struct","u8","u64","TransactionInstruction","TOKEN_PROGRAM_ID","TokenInvalidInstructionDataError","TokenInvalidInstructionKeysError","TokenInvalidInstructionProgramError","TokenInvalidInstructionTypeError","addSigners","TokenInstruction","transferCheckedInstructionData","createTransferCheckedInstruction","source","mint","destination","owner","amount","decimals","multiSigners","programId","keys","pubkey","isSigner","isWritable","data","Buffer","alloc","span","encode","instruction","TransferChecked","BigInt","decodeTransferCheckedInstruction","equals","length","decodeTransferCheckedInstructionUnchecked","decode"],"sources":["/Users/ivan/Metadata/node_modules/@solana/spl-token/src/instructions/transferChecked.ts"],"sourcesContent":["import { struct, u8 } from '@solana/buffer-layout';\nimport { u64 } from '@solana/buffer-layout-utils';\nimport type { AccountMeta, PublicKey, Signer } from '@solana/web3.js';\nimport { TransactionInstruction } from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID } from '../constants.js';\nimport {\n    TokenInvalidInstructionDataError,\n    TokenInvalidInstructionKeysError,\n    TokenInvalidInstructionProgramError,\n    TokenInvalidInstructionTypeError,\n} from '../errors.js';\nimport { addSigners } from './internal.js';\nimport { TokenInstruction } from './types.js';\n\n/** TODO: docs */\nexport interface TransferCheckedInstructionData {\n    instruction: TokenInstruction.TransferChecked;\n    amount: bigint;\n    decimals: number;\n}\n\n/** TODO: docs */\nexport const transferCheckedInstructionData = struct<TransferCheckedInstructionData>([\n    u8('instruction'),\n    u64('amount'),\n    u8('decimals'),\n]);\n\n/**\n * Construct a TransferChecked instruction\n *\n * @param source       Source account\n * @param mint         Mint account\n * @param destination  Destination account\n * @param owner        Owner of the source account\n * @param amount       Number of tokens to transfer\n * @param decimals     Number of decimals in transfer amount\n * @param multiSigners Signing accounts if `owner` is a multisig\n * @param programId    SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\nexport function createTransferCheckedInstruction(\n    source: PublicKey,\n    mint: PublicKey,\n    destination: PublicKey,\n    owner: PublicKey,\n    amount: number | bigint,\n    decimals: number,\n    multiSigners: Signer[] = [],\n    programId = TOKEN_PROGRAM_ID\n): TransactionInstruction {\n    const keys = addSigners(\n        [\n            { pubkey: source, isSigner: false, isWritable: true },\n            { pubkey: mint, isSigner: false, isWritable: false },\n            { pubkey: destination, isSigner: false, isWritable: true },\n        ],\n        owner,\n        multiSigners\n    );\n\n    const data = Buffer.alloc(transferCheckedInstructionData.span);\n    transferCheckedInstructionData.encode(\n        {\n            instruction: TokenInstruction.TransferChecked,\n            amount: BigInt(amount),\n            decimals,\n        },\n        data\n    );\n\n    return new TransactionInstruction({ keys, programId, data });\n}\n\n/** A decoded, valid TransferChecked instruction */\nexport interface DecodedTransferCheckedInstruction {\n    programId: PublicKey;\n    keys: {\n        source: AccountMeta;\n        mint: AccountMeta;\n        destination: AccountMeta;\n        owner: AccountMeta;\n        multiSigners: AccountMeta[];\n    };\n    data: {\n        instruction: TokenInstruction.TransferChecked;\n        amount: bigint;\n        decimals: number;\n    };\n}\n\n/**\n * Decode a TransferChecked instruction and validate it\n *\n * @param instruction Transaction instruction to decode\n * @param programId   SPL Token program account\n *\n * @return Decoded, valid instruction\n */\nexport function decodeTransferCheckedInstruction(\n    instruction: TransactionInstruction,\n    programId = TOKEN_PROGRAM_ID\n): DecodedTransferCheckedInstruction {\n    if (!instruction.programId.equals(programId)) throw new TokenInvalidInstructionProgramError();\n    if (instruction.data.length !== transferCheckedInstructionData.span) throw new TokenInvalidInstructionDataError();\n\n    const {\n        keys: { source, mint, destination, owner, multiSigners },\n        data,\n    } = decodeTransferCheckedInstructionUnchecked(instruction);\n    if (data.instruction !== TokenInstruction.TransferChecked) throw new TokenInvalidInstructionTypeError();\n    if (!source || !mint || !destination || !owner) throw new TokenInvalidInstructionKeysError();\n\n    // TODO: key checks?\n\n    return {\n        programId,\n        keys: {\n            source,\n            mint,\n            destination,\n            owner,\n            multiSigners,\n        },\n        data,\n    };\n}\n\n/** A decoded, non-validated TransferChecked instruction */\nexport interface DecodedTransferCheckedInstructionUnchecked {\n    programId: PublicKey;\n    keys: {\n        source: AccountMeta | undefined;\n        mint: AccountMeta | undefined;\n        destination: AccountMeta | undefined;\n        owner: AccountMeta | undefined;\n        multiSigners: AccountMeta[];\n    };\n    data: {\n        instruction: number;\n        amount: bigint;\n        decimals: number;\n    };\n}\n\n/**\n * Decode a TransferChecked instruction without validating it\n *\n * @param instruction Transaction instruction to decode\n *\n * @return Decoded, non-validated instruction\n */\nexport function decodeTransferCheckedInstructionUnchecked({\n    programId,\n    keys: [source, mint, destination, owner, ...multiSigners],\n    data,\n}: TransactionInstruction): DecodedTransferCheckedInstructionUnchecked {\n    return {\n        programId,\n        keys: {\n            source,\n            mint,\n            destination,\n            owner,\n            multiSigners,\n        },\n        data: transferCheckedInstructionData.decode(data),\n    };\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}