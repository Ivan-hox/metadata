{"ast":null,"code":"\"use strict\";\n\nvar _slicedToArray = require(\"/Users/ivan/Metadata/node_modules/@babel/runtime/helpers/slicedToArray.js\").default;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.decodeInitializeMint2InstructionUnchecked = exports.decodeInitializeMint2Instruction = exports.createInitializeMint2Instruction = exports.initializeMint2InstructionData = void 0;\nvar buffer_layout_1 = require(\"@solana/buffer-layout\");\nvar buffer_layout_utils_1 = require(\"@solana/buffer-layout-utils\");\nvar web3_js_1 = require(\"@solana/web3.js\");\nvar constants_js_1 = require(\"../constants.js\");\nvar errors_js_1 = require(\"../errors.js\");\nvar types_js_1 = require(\"./types.js\");\n/** TODO: docs */\nexports.initializeMint2InstructionData = (0, buffer_layout_1.struct)([(0, buffer_layout_1.u8)('instruction'), (0, buffer_layout_1.u8)('decimals'), (0, buffer_layout_utils_1.publicKey)('mintAuthority'), (0, buffer_layout_1.u8)('freezeAuthorityOption'), (0, buffer_layout_utils_1.publicKey)('freezeAuthority')]);\n/**\n * Construct an InitializeMint2 instruction\n *\n * @param mint            Token mint account\n * @param decimals        Number of decimals in token account amounts\n * @param mintAuthority   Minting authority\n * @param freezeAuthority Optional authority that can freeze token accounts\n * @param programId       SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\nfunction createInitializeMint2Instruction(mint, decimals, mintAuthority, freezeAuthority) {\n  var programId = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : constants_js_1.TOKEN_PROGRAM_ID;\n  var keys = [{\n    pubkey: mint,\n    isSigner: false,\n    isWritable: true\n  }];\n  var data = Buffer.alloc(exports.initializeMint2InstructionData.span);\n  exports.initializeMint2InstructionData.encode({\n    instruction: types_js_1.TokenInstruction.InitializeMint2,\n    decimals: decimals,\n    mintAuthority: mintAuthority,\n    freezeAuthorityOption: freezeAuthority ? 1 : 0,\n    freezeAuthority: freezeAuthority || new web3_js_1.PublicKey(0)\n  }, data);\n  return new web3_js_1.TransactionInstruction({\n    keys: keys,\n    programId: programId,\n    data: data\n  });\n}\nexports.createInitializeMint2Instruction = createInitializeMint2Instruction;\n/**\n * Decode an InitializeMint2 instruction and validate it\n *\n * @param instruction Transaction instruction to decode\n * @param programId   SPL Token program account\n *\n * @return Decoded, valid instruction\n */\nfunction decodeInitializeMint2Instruction(instruction) {\n  var programId = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : constants_js_1.TOKEN_PROGRAM_ID;\n  if (!instruction.programId.equals(programId)) throw new errors_js_1.TokenInvalidInstructionProgramError();\n  if (instruction.data.length !== exports.initializeMint2InstructionData.span) throw new errors_js_1.TokenInvalidInstructionDataError();\n  var _decodeInitializeMint = decodeInitializeMint2InstructionUnchecked(instruction),\n    mint = _decodeInitializeMint.keys.mint,\n    data = _decodeInitializeMint.data;\n  if (data.instruction !== types_js_1.TokenInstruction.InitializeMint2) throw new errors_js_1.TokenInvalidInstructionTypeError();\n  if (!mint) throw new errors_js_1.TokenInvalidInstructionKeysError();\n  return {\n    programId: programId,\n    keys: {\n      mint: mint\n    },\n    data: data\n  };\n}\nexports.decodeInitializeMint2Instruction = decodeInitializeMint2Instruction;\n/**\n * Decode an InitializeMint2 instruction without validating it\n *\n * @param instruction Transaction instruction to decode\n *\n * @return Decoded, non-validated instruction\n */\nfunction decodeInitializeMint2InstructionUnchecked(_ref) {\n  var programId = _ref.programId,\n    _ref$keys = _slicedToArray(_ref.keys, 1),\n    mint = _ref$keys[0],\n    data = _ref.data;\n  var _exports$initializeMi = exports.initializeMint2InstructionData.decode(data),\n    instruction = _exports$initializeMi.instruction,\n    decimals = _exports$initializeMi.decimals,\n    mintAuthority = _exports$initializeMi.mintAuthority,\n    freezeAuthorityOption = _exports$initializeMi.freezeAuthorityOption,\n    freezeAuthority = _exports$initializeMi.freezeAuthority;\n  return {\n    programId: programId,\n    keys: {\n      mint: mint\n    },\n    data: {\n      instruction: instruction,\n      decimals: decimals,\n      mintAuthority: mintAuthority,\n      freezeAuthority: freezeAuthorityOption ? freezeAuthority : null\n    }\n  };\n}\nexports.decodeInitializeMint2InstructionUnchecked = decodeInitializeMint2InstructionUnchecked;","map":{"version":3,"mappings":";;;;;;;AAAA;AACA;AAEA;AACA;AACA;AAMA;AAWA;AACaA,sCAA8B,GAAG,0BAAM,EAAiC,CACjF,sBAAE,EAAC,aAAa,CAAC,EACjB,sBAAE,EAAC,UAAU,CAAC,EACd,mCAAS,EAAC,eAAe,CAAC,EAC1B,sBAAE,EAAC,uBAAuB,CAAC,EAC3B,mCAAS,EAAC,iBAAiB,CAAC,CAC/B,CAAC;AAEF;;;;;;;;;;;AAWA,SAAgBC,gCAAgC,CAC5CC,IAAe,EACfC,QAAgB,EAChBC,aAAwB,EACxBC,eAAiC,EACL;EAAA,IAA5BC,SAAS,uEAAGC,+BAAgB;EAE5B,IAAMC,IAAI,GAAG,CAAC;IAAEC,MAAM,EAAEP,IAAI;IAAEQ,QAAQ,EAAE,KAAK;IAAEC,UAAU,EAAE;EAAI,CAAE,CAAC;EAElE,IAAMC,IAAI,GAAGC,MAAM,CAACC,KAAK,CAACd,sCAA8B,CAACe,IAAI,CAAC;EAC9Df,sCAA8B,CAACgB,MAAM,CACjC;IACIC,WAAW,EAAEC,2BAAgB,CAACC,eAAe;IAC7ChB,QAAQ,EAARA,QAAQ;IACRC,aAAa,EAAbA,aAAa;IACbgB,qBAAqB,EAAEf,eAAe,GAAG,CAAC,GAAG,CAAC;IAC9CA,eAAe,EAAEA,eAAe,IAAI,IAAIgB,mBAAS,CAAC,CAAC;GACtD,EACDT,IAAI,CACP;EAED,OAAO,IAAIS,gCAAsB,CAAC;IAAEb,IAAI,EAAJA,IAAI;IAAEF,SAAS,EAATA,SAAS;IAAEM,IAAI,EAAJA;EAAI,CAAE,CAAC;AAChE;AAtBAZ;AAsCA;;;;;;;;AAQA,SAAgBsB,gCAAgC,CAC5CL,WAAmC,EACP;EAAA,IAA5BX,SAAS,uEAAGC,+BAAgB;EAE5B,IAAI,CAACU,WAAW,CAACX,SAAS,CAACiB,MAAM,CAACjB,SAAS,CAAC,EAAE,MAAM,IAAIkB,+CAAmC,EAAE;EAC7F,IAAIP,WAAW,CAACL,IAAI,CAACa,MAAM,KAAKzB,sCAA8B,CAACe,IAAI,EAAE,MAAM,IAAIS,4CAAgC,EAAE;EAEjH,4BAGIE,yCAAyC,CAACT,WAAW,CAAC;IAF9Cf,IAAI,yBAAZM,IAAI,CAAIN,IAAI;IACZU,IAAI,yBAAJA,IAAI;EAER,IAAIA,IAAI,CAACK,WAAW,KAAKC,2BAAgB,CAACC,eAAe,EAAE,MAAM,IAAIK,4CAAgC,EAAE;EACvG,IAAI,CAACtB,IAAI,EAAE,MAAM,IAAIsB,4CAAgC,EAAE;EAEvD,OAAO;IACHlB,SAAS,EAATA,SAAS;IACTE,IAAI,EAAE;MACFN,IAAI,EAAJA;KACH;IACDU,IAAI,EAAJA;GACH;AACL;AArBAZ;AAqCA;;;;;;;AAOA,SAAgB0B,yCAAyC,OAIhC;EAAA,IAHrBpB,SAAS,QAATA,SAAS;IAAA,gCACTE,IAAI;IAAGN,IAAI;IACXU,IAAI,QAAJA,IAAI;EAEJ,4BACIZ,sCAA8B,CAAC2B,MAAM,CAACf,IAAI,CAAC;IADvCK,WAAW,yBAAXA,WAAW;IAAEd,QAAQ,yBAARA,QAAQ;IAAEC,aAAa,yBAAbA,aAAa;IAAEgB,qBAAqB,yBAArBA,qBAAqB;IAAEf,eAAe,yBAAfA,eAAe;EAGpF,OAAO;IACHC,SAAS,EAATA,SAAS;IACTE,IAAI,EAAE;MACFN,IAAI,EAAJA;KACH;IACDU,IAAI,EAAE;MACFK,WAAW,EAAXA,WAAW;MACXd,QAAQ,EAARA,QAAQ;MACRC,aAAa,EAAbA,aAAa;MACbC,eAAe,EAAEe,qBAAqB,GAAGf,eAAe,GAAG;;GAElE;AACL;AApBAL","names":["exports","createInitializeMint2Instruction","mint","decimals","mintAuthority","freezeAuthority","programId","constants_js_1","keys","pubkey","isSigner","isWritable","data","Buffer","alloc","span","encode","instruction","types_js_1","InitializeMint2","freezeAuthorityOption","web3_js_1","decodeInitializeMint2Instruction","equals","errors_js_1","length","decodeInitializeMint2InstructionUnchecked","decode"],"sources":["/Users/ivan/Metadata/node_modules/@solana/spl-token/src/instructions/initializeMint2.ts"],"sourcesContent":["import { struct, u8 } from '@solana/buffer-layout';\nimport { publicKey } from '@solana/buffer-layout-utils';\nimport type { AccountMeta } from '@solana/web3.js';\nimport { PublicKey, TransactionInstruction } from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID } from '../constants.js';\nimport {\n    TokenInvalidInstructionDataError,\n    TokenInvalidInstructionKeysError,\n    TokenInvalidInstructionProgramError,\n    TokenInvalidInstructionTypeError,\n} from '../errors.js';\nimport { TokenInstruction } from './types.js';\n\n/** TODO: docs */\nexport interface InitializeMint2InstructionData {\n    instruction: TokenInstruction.InitializeMint2;\n    decimals: number;\n    mintAuthority: PublicKey;\n    freezeAuthorityOption: 1 | 0;\n    freezeAuthority: PublicKey;\n}\n\n/** TODO: docs */\nexport const initializeMint2InstructionData = struct<InitializeMint2InstructionData>([\n    u8('instruction'),\n    u8('decimals'),\n    publicKey('mintAuthority'),\n    u8('freezeAuthorityOption'),\n    publicKey('freezeAuthority'),\n]);\n\n/**\n * Construct an InitializeMint2 instruction\n *\n * @param mint            Token mint account\n * @param decimals        Number of decimals in token account amounts\n * @param mintAuthority   Minting authority\n * @param freezeAuthority Optional authority that can freeze token accounts\n * @param programId       SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\nexport function createInitializeMint2Instruction(\n    mint: PublicKey,\n    decimals: number,\n    mintAuthority: PublicKey,\n    freezeAuthority: PublicKey | null,\n    programId = TOKEN_PROGRAM_ID\n): TransactionInstruction {\n    const keys = [{ pubkey: mint, isSigner: false, isWritable: true }];\n\n    const data = Buffer.alloc(initializeMint2InstructionData.span);\n    initializeMint2InstructionData.encode(\n        {\n            instruction: TokenInstruction.InitializeMint2,\n            decimals,\n            mintAuthority,\n            freezeAuthorityOption: freezeAuthority ? 1 : 0,\n            freezeAuthority: freezeAuthority || new PublicKey(0),\n        },\n        data\n    );\n\n    return new TransactionInstruction({ keys, programId, data });\n}\n\n/** A decoded, valid InitializeMint2 instruction */\nexport interface DecodedInitializeMint2Instruction {\n    programId: PublicKey;\n    keys: {\n        mint: AccountMeta;\n    };\n    data: {\n        instruction: TokenInstruction.InitializeMint2;\n        decimals: number;\n        mintAuthority: PublicKey;\n        freezeAuthority: PublicKey | null;\n    };\n}\n\n/**\n * Decode an InitializeMint2 instruction and validate it\n *\n * @param instruction Transaction instruction to decode\n * @param programId   SPL Token program account\n *\n * @return Decoded, valid instruction\n */\nexport function decodeInitializeMint2Instruction(\n    instruction: TransactionInstruction,\n    programId = TOKEN_PROGRAM_ID\n): DecodedInitializeMint2Instruction {\n    if (!instruction.programId.equals(programId)) throw new TokenInvalidInstructionProgramError();\n    if (instruction.data.length !== initializeMint2InstructionData.span) throw new TokenInvalidInstructionDataError();\n\n    const {\n        keys: { mint },\n        data,\n    } = decodeInitializeMint2InstructionUnchecked(instruction);\n    if (data.instruction !== TokenInstruction.InitializeMint2) throw new TokenInvalidInstructionTypeError();\n    if (!mint) throw new TokenInvalidInstructionKeysError();\n\n    return {\n        programId,\n        keys: {\n            mint,\n        },\n        data,\n    };\n}\n\n/** A decoded, non-validated InitializeMint2 instruction */\nexport interface DecodedInitializeMint2InstructionUnchecked {\n    programId: PublicKey;\n    keys: {\n        mint: AccountMeta | undefined;\n    };\n    data: {\n        instruction: number;\n        decimals: number;\n        mintAuthority: PublicKey;\n        freezeAuthority: PublicKey | null;\n    };\n}\n\n/**\n * Decode an InitializeMint2 instruction without validating it\n *\n * @param instruction Transaction instruction to decode\n *\n * @return Decoded, non-validated instruction\n */\nexport function decodeInitializeMint2InstructionUnchecked({\n    programId,\n    keys: [mint],\n    data,\n}: TransactionInstruction): DecodedInitializeMint2InstructionUnchecked {\n    const { instruction, decimals, mintAuthority, freezeAuthorityOption, freezeAuthority } =\n        initializeMint2InstructionData.decode(data);\n\n    return {\n        programId,\n        keys: {\n            mint,\n        },\n        data: {\n            instruction,\n            decimals,\n            mintAuthority,\n            freezeAuthority: freezeAuthorityOption ? freezeAuthority : null,\n        },\n    };\n}\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}