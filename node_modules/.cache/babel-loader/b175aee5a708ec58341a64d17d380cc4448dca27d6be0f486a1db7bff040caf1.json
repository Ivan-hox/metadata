{"ast":null,"code":"\"use strict\";\n\nvar _toConsumableArray = require(\"/Users/ivan/Metadata/node_modules/@babel/runtime/helpers/toConsumableArray.js\").default;\nvar _slicedToArray = require(\"/Users/ivan/Metadata/node_modules/@babel/runtime/helpers/slicedToArray.js\").default;\nvar _regeneratorRuntime = require(\"/Users/ivan/Metadata/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\").default;\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.updateRateInterestBearingMint = exports.createInterestBearingMint = void 0;\nvar web3_js_1 = require(\"@solana/web3.js\");\nvar internal_js_1 = require(\"../../actions/internal.js\");\nvar constants_js_1 = require(\"../../constants.js\");\nvar initializeMint_js_1 = require(\"../../instructions/initializeMint.js\");\nvar extensionType_js_1 = require(\"../extensionType.js\");\nvar instructions_js_1 = require(\"./instructions.js\");\n/**\n * Initialize an interest bearing account on a mint\n *\n * @param connection      Connection to use\n * @param payer           Payer of the transaction fees\n * @param mintAuthority   Account or multisig that will control minting\n * @param freezeAuthority Optional account or multisig that can freeze token accounts\n * @param rateAuthority   The public key for the account that can update the rate\n * @param rate            The initial interest rate\n * @param decimals        Location of the decimal place\n * @param keypair         Optional keypair, defaulting to a new random one\n * @param confirmOptions  Options for confirming the transaction\n * @param programId       SPL Token program account\n *\n * @return Public key of the mint\n */\nfunction createInterestBearingMint(connection, payer, mintAuthority, freezeAuthority, rateAuthority, rate, decimals) {\n  var keypair = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : web3_js_1.Keypair.generate();\n  var confirmOptions = arguments.length > 8 ? arguments[8] : undefined;\n  var programId = arguments.length > 9 && arguments[9] !== undefined ? arguments[9] : constants_js_1.TOKEN_2022_PROGRAM_ID;\n  return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n    var mintLen, lamports, transaction;\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            mintLen = (0, extensionType_js_1.getMintLen)([extensionType_js_1.ExtensionType.InterestBearingMint]);\n            _context.next = 3;\n            return connection.getMinimumBalanceForRentExemption(mintLen);\n          case 3:\n            lamports = _context.sent;\n            transaction = new web3_js_1.Transaction().add(web3_js_1.SystemProgram.createAccount({\n              fromPubkey: payer.publicKey,\n              newAccountPubkey: keypair.publicKey,\n              space: mintLen,\n              lamports: lamports,\n              programId: programId\n            }), (0, instructions_js_1.createInitializeInterestBearingMintInstruction)(keypair.publicKey, rateAuthority, rate, programId), (0, initializeMint_js_1.createInitializeMintInstruction)(keypair.publicKey, decimals, mintAuthority, freezeAuthority, programId));\n            _context.next = 7;\n            return (0, web3_js_1.sendAndConfirmTransaction)(connection, transaction, [payer, keypair], confirmOptions);\n          case 7:\n            return _context.abrupt(\"return\", keypair.publicKey);\n          case 8:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n}\nexports.createInterestBearingMint = createInterestBearingMint;\n/**\n * Update the interest rate of an interest bearing account\n *\n * @param connection      Connection to use\n * @param payer           Payer of the transaction fees\n * @param mint            Public key of the mint\n * @param rateAuthority   The public key for the account that can update the rate\n * @param rate            The initial interest rate\n * @param multiSigners    Signing accounts if `owner` is a multisig\n * @param confirmOptions  Options for confirming the transaction\n * @param programId       SPL Token program account\n *\n * @return Signature of the confirmed transaction\n */\nfunction updateRateInterestBearingMint(connection, payer, mint, rateAuthority, rate) {\n  var multiSigners = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : [];\n  var confirmOptions = arguments.length > 6 ? arguments[6] : undefined;\n  var programId = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : constants_js_1.TOKEN_2022_PROGRAM_ID;\n  return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n    var _ref, _ref2, rateAuthorityPublicKey, signers, transaction;\n    return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _ref = (0, internal_js_1.getSigners)(rateAuthority, multiSigners), _ref2 = _slicedToArray(_ref, 2), rateAuthorityPublicKey = _ref2[0], signers = _ref2[1];\n            transaction = new web3_js_1.Transaction().add((0, instructions_js_1.createUpdateRateInterestBearingMintInstruction)(mint, rateAuthorityPublicKey, rate, signers, programId));\n            _context2.next = 4;\n            return (0, web3_js_1.sendAndConfirmTransaction)(connection, transaction, [payer, rateAuthority].concat(_toConsumableArray(signers)), confirmOptions);\n          case 4:\n            return _context2.abrupt(\"return\", _context2.sent);\n          case 5:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n}\nexports.updateRateInterestBearingMint = updateRateInterestBearingMint;","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;;;;;;;;;;;;;;;;AAgBA,SAAsBA,yBAAyB,CAC3CC,UAAsB,EACtBC,KAAa,EACbC,aAAwB,EACxBC,eAA0B,EAC1BC,aAAwB,EACxBC,IAAY,EACZC,QAAgB,EAGiB;EAAA,IAFjCC,OAAO,uEAAGC,iBAAO,CAACC,QAAQ,EAAE;EAAA,IAC5BC,cAA+B;EAAA,IAC/BC,SAAS,uEAAGC,oCAAqB;;;;;;;YAE3BC,OAAO,GAAG,iCAAU,EAAC,CAACC,gCAAa,CAACC,mBAAmB,CAAC,CAAC;YAAA;YAC9C,OAAMf,UAAU,CAACgB,iCAAiC,CAACH,OAAO,CAAC;UAAA;YAAtEI,QAAQ;YACRC,WAAW,GAAG,IAAIV,qBAAW,EAAE,CAACW,GAAG,CACrCX,uBAAa,CAACY,aAAa,CAAC;cACxBC,UAAU,EAAEpB,KAAK,CAACqB,SAAS;cAC3BC,gBAAgB,EAAEhB,OAAO,CAACe,SAAS;cACnCE,KAAK,EAAEX,OAAO;cACdI,QAAQ,EAARA,QAAQ;cACRN,SAAS,EAATA;aACH,CAAC,EACF,oEAA8C,EAACJ,OAAO,CAACe,SAAS,EAAElB,aAAa,EAAEC,IAAI,EAAEM,SAAS,CAAC,EACjG,uDAA+B,EAACJ,OAAO,CAACe,SAAS,EAAEhB,QAAQ,EAAEJ,aAAa,EAAEC,eAAe,EAAEQ,SAAS,CAAC,CAC1G;YAAA;YACD,OAAM,uCAAyB,EAACX,UAAU,EAAEkB,WAAW,EAAE,CAACjB,KAAK,EAAEM,OAAO,CAAC,EAAEG,cAAc,CAAC;UAAA;YAAA,iCACnFH,OAAO,CAACe,SAAS;UAAA;UAAA;YAAA;QAAA;MAAA;IAAA;EAAA,CAC3B;;AA3BDG;AA6BA;;;;;;;;;;;;;;AAcA,SAAsBC,6BAA6B,CAC/C1B,UAAsB,EACtBC,KAAa,EACb0B,IAAe,EACfvB,aAAqB,EACrBC,IAAY,EAGqB;EAAA,IAFjCuB,mFAAyB,EAAE;EAAA,IAC3BlB,cAA+B;EAAA,IAC/BC,SAAS,uEAAGC,oCAAqB;;;;;;;mBAES,4BAAU,EAACR,aAAa,EAAEwB,YAAY,CAAC,mCAA1EC,sBAAsB,aAAEC,OAAO;YAChCZ,WAAW,GAAG,IAAIV,qBAAW,EAAE,CAACW,GAAG,CACrC,oEAA8C,EAACQ,IAAI,EAAEE,sBAAsB,EAAExB,IAAI,EAAEyB,OAAO,EAAEnB,SAAS,CAAC,CACzG;YAAA;YAEM,OAAM,uCAAyB,EAACX,UAAU,EAAEkB,WAAW,GAAGjB,KAAK,EAAEG,aAAa,4BAAK0B,OAAO,IAAGpB,cAAc,CAAC;UAAA;YAAA;UAAA;UAAA;YAAA;QAAA;MAAA;IAAA;EAAA,CACtH;;AAhBDe","names":["createInterestBearingMint","connection","payer","mintAuthority","freezeAuthority","rateAuthority","rate","decimals","keypair","web3_js_1","generate","confirmOptions","programId","constants_js_1","mintLen","extensionType_js_1","InterestBearingMint","getMinimumBalanceForRentExemption","lamports","transaction","add","createAccount","fromPubkey","publicKey","newAccountPubkey","space","exports","updateRateInterestBearingMint","mint","multiSigners","rateAuthorityPublicKey","signers"],"sources":["/Users/ivan/Metadata/node_modules/@solana/spl-token/src/extensions/interestBearingMint/actions.ts"],"sourcesContent":["import type { ConfirmOptions, Connection, PublicKey, Signer } from '@solana/web3.js';\nimport { Keypair, sendAndConfirmTransaction, SystemProgram, Transaction } from '@solana/web3.js';\nimport { getSigners } from '../../actions/internal.js';\nimport { TOKEN_2022_PROGRAM_ID } from '../../constants.js';\nimport { createInitializeMintInstruction } from '../../instructions/initializeMint.js';\nimport { ExtensionType, getMintLen } from '../extensionType.js';\nimport {\n    createInitializeInterestBearingMintInstruction,\n    createUpdateRateInterestBearingMintInstruction,\n} from './instructions.js';\n\n/**\n * Initialize an interest bearing account on a mint\n *\n * @param connection      Connection to use\n * @param payer           Payer of the transaction fees\n * @param mintAuthority   Account or multisig that will control minting\n * @param freezeAuthority Optional account or multisig that can freeze token accounts\n * @param rateAuthority   The public key for the account that can update the rate\n * @param rate            The initial interest rate\n * @param decimals        Location of the decimal place\n * @param keypair         Optional keypair, defaulting to a new random one\n * @param confirmOptions  Options for confirming the transaction\n * @param programId       SPL Token program account\n *\n * @return Public key of the mint\n */\nexport async function createInterestBearingMint(\n    connection: Connection,\n    payer: Signer,\n    mintAuthority: PublicKey,\n    freezeAuthority: PublicKey,\n    rateAuthority: PublicKey,\n    rate: number,\n    decimals: number,\n    keypair = Keypair.generate(),\n    confirmOptions?: ConfirmOptions,\n    programId = TOKEN_2022_PROGRAM_ID\n): Promise<PublicKey> {\n    const mintLen = getMintLen([ExtensionType.InterestBearingMint]);\n    const lamports = await connection.getMinimumBalanceForRentExemption(mintLen);\n    const transaction = new Transaction().add(\n        SystemProgram.createAccount({\n            fromPubkey: payer.publicKey,\n            newAccountPubkey: keypair.publicKey,\n            space: mintLen,\n            lamports,\n            programId,\n        }),\n        createInitializeInterestBearingMintInstruction(keypair.publicKey, rateAuthority, rate, programId),\n        createInitializeMintInstruction(keypair.publicKey, decimals, mintAuthority, freezeAuthority, programId)\n    );\n    await sendAndConfirmTransaction(connection, transaction, [payer, keypair], confirmOptions);\n    return keypair.publicKey;\n}\n\n/**\n * Update the interest rate of an interest bearing account\n *\n * @param connection      Connection to use\n * @param payer           Payer of the transaction fees\n * @param mint            Public key of the mint\n * @param rateAuthority   The public key for the account that can update the rate\n * @param rate            The initial interest rate\n * @param multiSigners    Signing accounts if `owner` is a multisig\n * @param confirmOptions  Options for confirming the transaction\n * @param programId       SPL Token program account\n *\n * @return Signature of the confirmed transaction\n */\nexport async function updateRateInterestBearingMint(\n    connection: Connection,\n    payer: Signer,\n    mint: PublicKey,\n    rateAuthority: Signer,\n    rate: number,\n    multiSigners: Signer[] = [],\n    confirmOptions?: ConfirmOptions,\n    programId = TOKEN_2022_PROGRAM_ID\n): Promise<string> {\n    const [rateAuthorityPublicKey, signers] = getSigners(rateAuthority, multiSigners);\n    const transaction = new Transaction().add(\n        createUpdateRateInterestBearingMintInstruction(mint, rateAuthorityPublicKey, rate, signers, programId)\n    );\n\n    return await sendAndConfirmTransaction(connection, transaction, [payer, rateAuthority, ...signers], confirmOptions);\n}\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}