{"ast":null,"code":"import _regeneratorRuntime from \"/Users/ivan/Metadata/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"/Users/ivan/Metadata/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { Keypair, sendAndConfirmTransaction, SystemProgram, Transaction } from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID } from '../constants.js';\nimport { createInitializeMultisigInstruction } from '../instructions/initializeMultisig.js';\nimport { getMinimumBalanceForRentExemptMultisig, MULTISIG_SIZE } from '../state/multisig.js';\n/**\n * Create and initialize a new multisig\n *\n * @param connection     Connection to use\n * @param payer          Payer of the transaction and initialization fees\n * @param signers        Full set of signers\n * @param m              Number of required signatures\n * @param keypair        Optional keypair, defaulting to a new random one\n * @param confirmOptions Options for confirming the transaction\n * @param programId      SPL Token program account\n *\n * @return Address of the new multisig\n */\nexport function createMultisig(_x, _x2, _x3, _x4) {\n  return _createMultisig.apply(this, arguments);\n}\nfunction _createMultisig() {\n  _createMultisig = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(connection, payer, signers, m) {\n    var keypair,\n      confirmOptions,\n      programId,\n      lamports,\n      transaction,\n      _args = arguments;\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            keypair = _args.length > 4 && _args[4] !== undefined ? _args[4] : Keypair.generate();\n            confirmOptions = _args.length > 5 ? _args[5] : undefined;\n            programId = _args.length > 6 && _args[6] !== undefined ? _args[6] : TOKEN_PROGRAM_ID;\n            _context.next = 5;\n            return getMinimumBalanceForRentExemptMultisig(connection);\n          case 5:\n            lamports = _context.sent;\n            transaction = new Transaction().add(SystemProgram.createAccount({\n              fromPubkey: payer.publicKey,\n              newAccountPubkey: keypair.publicKey,\n              space: MULTISIG_SIZE,\n              lamports: lamports,\n              programId: programId\n            }), createInitializeMultisigInstruction(keypair.publicKey, signers, m, programId));\n            _context.next = 9;\n            return sendAndConfirmTransaction(connection, transaction, [payer, keypair], confirmOptions);\n          case 9:\n            return _context.abrupt(\"return\", keypair.publicKey);\n          case 10:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _createMultisig.apply(this, arguments);\n}","map":{"version":3,"mappings":";;AACA,SAASA,OAAO,EAAEC,yBAAyB,EAAEC,aAAa,EAAEC,WAAW,QAAQ,iBAAiB;AAChG,SAASC,gBAAgB,QAAQ,iBAAiB;AAClD,SAASC,mCAAmC,QAAQ,uCAAuC;AAC3F,SAASC,sCAAsC,EAAEC,aAAa,QAAQ,sBAAsB;AAE5F;;;;;;;;;;;;;AAaA,gBAAsBC,cAAc;EAAA;AAAA;AAyBnC;EAAA,6EAzBM,iBACHC,UAAsB,EACtBC,KAAa,EACbC,OAAoB,EACpBC,CAAS;IAAA;MAAA;MAAA;MAAA;MAAA;MAAA;IAAA;MAAA;QAAA;UAAA;YACTC,OAAO,2DAAGb,OAAO,CAACc,QAAQ,EAAE;YAC5BC,cAA+B;YAC/BC,SAAS,2DAAGZ,gBAAgB;YAAA;YAAA,OAELE,sCAAsC,CAACG,UAAU,CAAC;UAAA;YAAnEQ,QAAQ;YAERC,WAAW,GAAG,IAAIf,WAAW,EAAE,CAACgB,GAAG,CACrCjB,aAAa,CAACkB,aAAa,CAAC;cACxBC,UAAU,EAAEX,KAAK,CAACY,SAAS;cAC3BC,gBAAgB,EAAEV,OAAO,CAACS,SAAS;cACnCE,KAAK,EAAEjB,aAAa;cACpBU,QAAQ,EAARA,QAAQ;cACRD,SAAS,EAATA;aACH,CAAC,EACFX,mCAAmC,CAACQ,OAAO,CAACS,SAAS,EAAEX,OAAO,EAAEC,CAAC,EAAEI,SAAS,CAAC,CAChF;YAAA;YAAA,OAEKf,yBAAyB,CAACQ,UAAU,EAAES,WAAW,EAAE,CAACR,KAAK,EAAEG,OAAO,CAAC,EAAEE,cAAc,CAAC;UAAA;YAAA,iCAEnFF,OAAO,CAACS,SAAS;UAAA;UAAA;YAAA;QAAA;MAAA;IAAA;EAAA,CAC3B;EAAA;AAAA","names":["Keypair","sendAndConfirmTransaction","SystemProgram","Transaction","TOKEN_PROGRAM_ID","createInitializeMultisigInstruction","getMinimumBalanceForRentExemptMultisig","MULTISIG_SIZE","createMultisig","connection","payer","signers","m","keypair","generate","confirmOptions","programId","lamports","transaction","add","createAccount","fromPubkey","publicKey","newAccountPubkey","space"],"sources":["/Users/ivan/Metadata/node_modules/@solana/spl-token/src/actions/createMultisig.ts"],"sourcesContent":["import type { ConfirmOptions, Connection, PublicKey, Signer } from '@solana/web3.js';\nimport { Keypair, sendAndConfirmTransaction, SystemProgram, Transaction } from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID } from '../constants.js';\nimport { createInitializeMultisigInstruction } from '../instructions/initializeMultisig.js';\nimport { getMinimumBalanceForRentExemptMultisig, MULTISIG_SIZE } from '../state/multisig.js';\n\n/**\n * Create and initialize a new multisig\n *\n * @param connection     Connection to use\n * @param payer          Payer of the transaction and initialization fees\n * @param signers        Full set of signers\n * @param m              Number of required signatures\n * @param keypair        Optional keypair, defaulting to a new random one\n * @param confirmOptions Options for confirming the transaction\n * @param programId      SPL Token program account\n *\n * @return Address of the new multisig\n */\nexport async function createMultisig(\n    connection: Connection,\n    payer: Signer,\n    signers: PublicKey[],\n    m: number,\n    keypair = Keypair.generate(),\n    confirmOptions?: ConfirmOptions,\n    programId = TOKEN_PROGRAM_ID\n): Promise<PublicKey> {\n    const lamports = await getMinimumBalanceForRentExemptMultisig(connection);\n\n    const transaction = new Transaction().add(\n        SystemProgram.createAccount({\n            fromPubkey: payer.publicKey,\n            newAccountPubkey: keypair.publicKey,\n            space: MULTISIG_SIZE,\n            lamports,\n            programId,\n        }),\n        createInitializeMultisigInstruction(keypair.publicKey, signers, m, programId)\n    );\n\n    await sendAndConfirmTransaction(connection, transaction, [payer, keypair], confirmOptions);\n\n    return keypair.publicKey;\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}