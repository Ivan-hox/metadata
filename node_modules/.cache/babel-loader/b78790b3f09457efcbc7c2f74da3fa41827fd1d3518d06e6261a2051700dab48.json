{"ast":null,"code":"\"use strict\";\n\nvar _slicedToArray = require(\"/Users/ivan/Metadata/node_modules/@babel/runtime/helpers/slicedToArray.js\").default;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.decodeInitializeAccount3InstructionUnchecked = exports.decodeInitializeAccount3Instruction = exports.createInitializeAccount3Instruction = exports.initializeAccount3InstructionData = void 0;\nvar buffer_layout_1 = require(\"@solana/buffer-layout\");\nvar buffer_layout_utils_1 = require(\"@solana/buffer-layout-utils\");\nvar web3_js_1 = require(\"@solana/web3.js\");\nvar constants_js_1 = require(\"../constants.js\");\nvar errors_js_1 = require(\"../errors.js\");\nvar types_js_1 = require(\"./types.js\");\nexports.initializeAccount3InstructionData = (0, buffer_layout_1.struct)([(0, buffer_layout_1.u8)('instruction'), (0, buffer_layout_utils_1.publicKey)('owner')]);\n/**\n * Construct an InitializeAccount3 instruction\n *\n * @param account   New token account\n * @param mint      Mint account\n * @param owner     New account's owner/multisignature\n * @param programId SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\nfunction createInitializeAccount3Instruction(account, mint, owner) {\n  var programId = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : constants_js_1.TOKEN_PROGRAM_ID;\n  var keys = [{\n    pubkey: account,\n    isSigner: false,\n    isWritable: true\n  }, {\n    pubkey: mint,\n    isSigner: false,\n    isWritable: false\n  }];\n  var data = Buffer.alloc(exports.initializeAccount3InstructionData.span);\n  exports.initializeAccount3InstructionData.encode({\n    instruction: types_js_1.TokenInstruction.InitializeAccount3,\n    owner: owner\n  }, data);\n  return new web3_js_1.TransactionInstruction({\n    keys: keys,\n    programId: programId,\n    data: data\n  });\n}\nexports.createInitializeAccount3Instruction = createInitializeAccount3Instruction;\n/**\n * Decode an InitializeAccount3 instruction and validate it\n *\n * @param instruction Transaction instruction to decode\n * @param programId   SPL Token program account\n *\n * @return Decoded, valid instruction\n */\nfunction decodeInitializeAccount3Instruction(instruction) {\n  var programId = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : constants_js_1.TOKEN_PROGRAM_ID;\n  if (!instruction.programId.equals(programId)) throw new errors_js_1.TokenInvalidInstructionProgramError();\n  if (instruction.data.length !== exports.initializeAccount3InstructionData.span) throw new errors_js_1.TokenInvalidInstructionDataError();\n  var _decodeInitializeAcco = decodeInitializeAccount3InstructionUnchecked(instruction),\n    _decodeInitializeAcco2 = _decodeInitializeAcco.keys,\n    account = _decodeInitializeAcco2.account,\n    mint = _decodeInitializeAcco2.mint,\n    data = _decodeInitializeAcco.data;\n  if (data.instruction !== types_js_1.TokenInstruction.InitializeAccount3) throw new errors_js_1.TokenInvalidInstructionTypeError();\n  if (!account || !mint) throw new errors_js_1.TokenInvalidInstructionKeysError();\n  // TODO: key checks?\n  return {\n    programId: programId,\n    keys: {\n      account: account,\n      mint: mint\n    },\n    data: data\n  };\n}\nexports.decodeInitializeAccount3Instruction = decodeInitializeAccount3Instruction;\n/**\n * Decode an InitializeAccount3 instruction without validating it\n *\n * @param instruction Transaction instruction to decode\n *\n * @return Decoded, non-validated instruction\n */\nfunction decodeInitializeAccount3InstructionUnchecked(_ref) {\n  var programId = _ref.programId,\n    _ref$keys = _slicedToArray(_ref.keys, 2),\n    account = _ref$keys[0],\n    mint = _ref$keys[1],\n    data = _ref.data;\n  return {\n    programId: programId,\n    keys: {\n      account: account,\n      mint: mint\n    },\n    data: exports.initializeAccount3InstructionData.decode(data)\n  };\n}\nexports.decodeInitializeAccount3InstructionUnchecked = decodeInitializeAccount3InstructionUnchecked;","map":{"version":3,"mappings":";;;;;;;AAAA;AACA;AAEA;AACA;AACA;AAMA;AAOaA,yCAAiC,GAAG,0BAAM,EAAoC,CACvF,sBAAE,EAAC,aAAa,CAAC,EACjB,mCAAS,EAAC,OAAO,CAAC,CACrB,CAAC;AAEF;;;;;;;;;;AAUA,SAAgBC,mCAAmC,CAC/CC,OAAkB,EAClBC,IAAe,EACfC,KAAgB,EACY;EAAA,IAA5BC,SAAS,uEAAGC,+BAAgB;EAE5B,IAAMC,IAAI,GAAG,CACT;IAAEC,MAAM,EAAEN,OAAO;IAAEO,QAAQ,EAAE,KAAK;IAAEC,UAAU,EAAE;EAAI,CAAE,EACtD;IAAEF,MAAM,EAAEL,IAAI;IAAEM,QAAQ,EAAE,KAAK;IAAEC,UAAU,EAAE;EAAK,CAAE,CACvD;EACD,IAAMC,IAAI,GAAGC,MAAM,CAACC,KAAK,CAACb,yCAAiC,CAACc,IAAI,CAAC;EACjEd,yCAAiC,CAACe,MAAM,CAAC;IAAEC,WAAW,EAAEC,2BAAgB,CAACC,kBAAkB;IAAEd,KAAK,EAALA;EAAK,CAAE,EAAEO,IAAI,CAAC;EAC3G,OAAO,IAAIQ,gCAAsB,CAAC;IAAEZ,IAAI,EAAJA,IAAI;IAAEF,SAAS,EAATA,SAAS;IAAEM,IAAI,EAAJA;EAAI,CAAE,CAAC;AAChE;AAbAX;AA4BA;;;;;;;;AAQA,SAAgBoB,mCAAmC,CAC/CJ,WAAmC,EACP;EAAA,IAA5BX,SAAS,uEAAGC,+BAAgB;EAE5B,IAAI,CAACU,WAAW,CAACX,SAAS,CAACgB,MAAM,CAAChB,SAAS,CAAC,EAAE,MAAM,IAAIiB,+CAAmC,EAAE;EAC7F,IAAIN,WAAW,CAACL,IAAI,CAACY,MAAM,KAAKvB,yCAAiC,CAACc,IAAI,EAClE,MAAM,IAAIQ,4CAAgC,EAAE;EAEhD,4BAGIE,4CAA4C,CAACR,WAAW,CAAC;IAAA,+CAFzDT,IAAI;IAAIL,OAAO,0BAAPA,OAAO;IAAEC,IAAI,0BAAJA,IAAI;IACrBQ,IAAI,yBAAJA,IAAI;EAER,IAAIA,IAAI,CAACK,WAAW,KAAKC,2BAAgB,CAACC,kBAAkB,EAAE,MAAM,IAAII,4CAAgC,EAAE;EAC1G,IAAI,CAACpB,OAAO,IAAI,CAACC,IAAI,EAAE,MAAM,IAAImB,4CAAgC,EAAE;EAEnE;EAEA,OAAO;IACHjB,SAAS,EAATA,SAAS;IACTE,IAAI,EAAE;MACFL,OAAO,EAAPA,OAAO;MACPC,IAAI,EAAJA;KACH;IACDQ,IAAI,EAAJA;GACH;AACL;AAzBAX;AAwCA;;;;;;;AAOA,SAAgBwB,4CAA4C,OAInC;EAAA,IAHrBnB,SAAS,QAATA,SAAS;IAAA,gCACTE,IAAI;IAAGL,OAAO;IAAEC,IAAI;IACpBQ,IAAI,QAAJA,IAAI;EAEJ,OAAO;IACHN,SAAS,EAATA,SAAS;IACTE,IAAI,EAAE;MACFL,OAAO,EAAPA,OAAO;MACPC,IAAI,EAAJA;KACH;IACDQ,IAAI,EAAEX,yCAAiC,CAACyB,MAAM,CAACd,IAAI;GACtD;AACL;AAbAX","names":["exports","createInitializeAccount3Instruction","account","mint","owner","programId","constants_js_1","keys","pubkey","isSigner","isWritable","data","Buffer","alloc","span","encode","instruction","types_js_1","InitializeAccount3","web3_js_1","decodeInitializeAccount3Instruction","equals","errors_js_1","length","decodeInitializeAccount3InstructionUnchecked","decode"],"sources":["/Users/ivan/Metadata/node_modules/@solana/spl-token/src/instructions/initializeAccount3.ts"],"sourcesContent":["import { struct, u8 } from '@solana/buffer-layout';\nimport { publicKey } from '@solana/buffer-layout-utils';\nimport type { AccountMeta, PublicKey } from '@solana/web3.js';\nimport { TransactionInstruction } from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID } from '../constants.js';\nimport {\n    TokenInvalidInstructionDataError,\n    TokenInvalidInstructionKeysError,\n    TokenInvalidInstructionProgramError,\n    TokenInvalidInstructionTypeError,\n} from '../errors.js';\nimport { TokenInstruction } from './types.js';\n\nexport interface InitializeAccount3InstructionData {\n    instruction: TokenInstruction.InitializeAccount3;\n    owner: PublicKey;\n}\n\nexport const initializeAccount3InstructionData = struct<InitializeAccount3InstructionData>([\n    u8('instruction'),\n    publicKey('owner'),\n]);\n\n/**\n * Construct an InitializeAccount3 instruction\n *\n * @param account   New token account\n * @param mint      Mint account\n * @param owner     New account's owner/multisignature\n * @param programId SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\nexport function createInitializeAccount3Instruction(\n    account: PublicKey,\n    mint: PublicKey,\n    owner: PublicKey,\n    programId = TOKEN_PROGRAM_ID\n): TransactionInstruction {\n    const keys = [\n        { pubkey: account, isSigner: false, isWritable: true },\n        { pubkey: mint, isSigner: false, isWritable: false },\n    ];\n    const data = Buffer.alloc(initializeAccount3InstructionData.span);\n    initializeAccount3InstructionData.encode({ instruction: TokenInstruction.InitializeAccount3, owner }, data);\n    return new TransactionInstruction({ keys, programId, data });\n}\n\n/** A decoded, valid InitializeAccount3 instruction */\nexport interface DecodedInitializeAccount3Instruction {\n    programId: PublicKey;\n    keys: {\n        account: AccountMeta;\n        mint: AccountMeta;\n    };\n    data: {\n        instruction: TokenInstruction.InitializeAccount3;\n        owner: PublicKey;\n    };\n}\n\n/**\n * Decode an InitializeAccount3 instruction and validate it\n *\n * @param instruction Transaction instruction to decode\n * @param programId   SPL Token program account\n *\n * @return Decoded, valid instruction\n */\nexport function decodeInitializeAccount3Instruction(\n    instruction: TransactionInstruction,\n    programId = TOKEN_PROGRAM_ID\n): DecodedInitializeAccount3Instruction {\n    if (!instruction.programId.equals(programId)) throw new TokenInvalidInstructionProgramError();\n    if (instruction.data.length !== initializeAccount3InstructionData.span)\n        throw new TokenInvalidInstructionDataError();\n\n    const {\n        keys: { account, mint },\n        data,\n    } = decodeInitializeAccount3InstructionUnchecked(instruction);\n    if (data.instruction !== TokenInstruction.InitializeAccount3) throw new TokenInvalidInstructionTypeError();\n    if (!account || !mint) throw new TokenInvalidInstructionKeysError();\n\n    // TODO: key checks?\n\n    return {\n        programId,\n        keys: {\n            account,\n            mint,\n        },\n        data,\n    };\n}\n\n/** A decoded, non-validated InitializeAccount3 instruction */\nexport interface DecodedInitializeAccount3InstructionUnchecked {\n    programId: PublicKey;\n    keys: {\n        account: AccountMeta | undefined;\n        mint: AccountMeta | undefined;\n    };\n    data: {\n        instruction: number;\n        owner: PublicKey;\n    };\n}\n\n/**\n * Decode an InitializeAccount3 instruction without validating it\n *\n * @param instruction Transaction instruction to decode\n *\n * @return Decoded, non-validated instruction\n */\nexport function decodeInitializeAccount3InstructionUnchecked({\n    programId,\n    keys: [account, mint],\n    data,\n}: TransactionInstruction): DecodedInitializeAccount3InstructionUnchecked {\n    return {\n        programId,\n        keys: {\n            account,\n            mint,\n        },\n        data: initializeAccount3InstructionData.decode(data),\n    };\n}\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}