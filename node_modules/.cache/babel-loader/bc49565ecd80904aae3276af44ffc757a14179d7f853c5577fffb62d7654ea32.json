{"ast":null,"code":"import _toConsumableArray from \"/Users/ivan/Metadata/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _slicedToArray from \"/Users/ivan/Metadata/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _regeneratorRuntime from \"/Users/ivan/Metadata/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"/Users/ivan/Metadata/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { sendAndConfirmTransaction, Transaction } from '@solana/web3.js';\nimport { getSigners } from '../../actions/internal.js';\nimport { TOKEN_2022_PROGRAM_ID } from '../../constants.js';\nimport { createInitializeDefaultAccountStateInstruction, createUpdateDefaultAccountStateInstruction } from './instructions.js';\n/**\n * Initialize a default account state on a mint\n *\n * @param connection     Connection to use\n * @param payer          Payer of the transaction fees\n * @param mint        Mint to initialize with extension\n * @param state        Account state with which to initialize new accounts\n * @param confirmOptions Options for confirming the transaction\n * @param programId      SPL Token program account\n *\n * @return Signature of the confirmed transaction\n */\nexport function initializeDefaultAccountState(_x, _x2, _x3, _x4, _x5) {\n  return _initializeDefaultAccountState.apply(this, arguments);\n}\n/**\n * Update the default account state on a mint\n *\n * @param connection     Connection to use\n * @param payer          Payer of the transaction fees\n * @param mint        Mint to modify\n * @param state        New account state to set on created accounts\n * @param freezeAuthority          Freeze authority of the mint\n * @param multiSigners   Signing accounts if `freezeAuthority` is a multisig\n * @param confirmOptions Options for confirming the transaction\n * @param programId      SPL Token program account\n *\n * @return Signature of the confirmed transaction\n */\nfunction _initializeDefaultAccountState() {\n  _initializeDefaultAccountState = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(connection, payer, mint, state, confirmOptions) {\n    var programId,\n      transaction,\n      _args = arguments;\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            programId = _args.length > 5 && _args[5] !== undefined ? _args[5] : TOKEN_2022_PROGRAM_ID;\n            transaction = new Transaction().add(createInitializeDefaultAccountStateInstruction(mint, state, programId));\n            _context.next = 4;\n            return sendAndConfirmTransaction(connection, transaction, [payer], confirmOptions);\n          case 4:\n            return _context.abrupt(\"return\", _context.sent);\n          case 5:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _initializeDefaultAccountState.apply(this, arguments);\n}\nexport function updateDefaultAccountState(_x6, _x7, _x8, _x9, _x10) {\n  return _updateDefaultAccountState.apply(this, arguments);\n}\nfunction _updateDefaultAccountState() {\n  _updateDefaultAccountState = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(connection, payer, mint, state, freezeAuthority) {\n    var multiSigners,\n      confirmOptions,\n      programId,\n      _getSigners,\n      _getSigners2,\n      freezeAuthorityPublicKey,\n      signers,\n      transaction,\n      _args2 = arguments;\n    return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            multiSigners = _args2.length > 5 && _args2[5] !== undefined ? _args2[5] : [];\n            confirmOptions = _args2.length > 6 ? _args2[6] : undefined;\n            programId = _args2.length > 7 && _args2[7] !== undefined ? _args2[7] : TOKEN_2022_PROGRAM_ID;\n            _getSigners = getSigners(freezeAuthority, multiSigners), _getSigners2 = _slicedToArray(_getSigners, 2), freezeAuthorityPublicKey = _getSigners2[0], signers = _getSigners2[1];\n            transaction = new Transaction().add(createUpdateDefaultAccountStateInstruction(mint, state, freezeAuthorityPublicKey, signers, programId));\n            _context2.next = 7;\n            return sendAndConfirmTransaction(connection, transaction, [payer].concat(_toConsumableArray(signers)), confirmOptions);\n          case 7:\n            return _context2.abrupt(\"return\", _context2.sent);\n          case 8:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n  return _updateDefaultAccountState.apply(this, arguments);\n}","map":{"version":3,"mappings":";;;;AACA,SAASA,yBAAyB,EAAEC,WAAW,QAAQ,iBAAiB;AACxE,SAASC,UAAU,QAAQ,2BAA2B;AACtD,SAASC,qBAAqB,QAAQ,oBAAoB;AAE1D,SACIC,8CAA8C,EAC9CC,0CAA0C,QACvC,mBAAmB;AAE1B;;;;;;;;;;;;AAYA,gBAAsBC,6BAA6B;EAAA;AAAA;AAanD;;;;;;;;;;;;;;AAAA;EAAA,4FAbO,iBACHC,UAAsB,EACtBC,KAAa,EACbC,IAAe,EACfC,KAAmB,EACnBC,cAA+B;IAAA;MAAA;MAAA;IAAA;MAAA;QAAA;UAAA;YAC/BC,SAAS,2DAAGT,qBAAqB;YAE3BU,WAAW,GAAG,IAAIZ,WAAW,EAAE,CAACa,GAAG,CAACV,8CAA8C,CAACK,IAAI,EAAEC,KAAK,EAAEE,SAAS,CAAC,CAAC;YAAA;YAAA,OAEpGZ,yBAAyB,CAACO,UAAU,EAAEM,WAAW,EAAE,CAACL,KAAK,CAAC,EAAEG,cAAc,CAAC;UAAA;YAAA;UAAA;UAAA;YAAA;QAAA;MAAA;IAAA;EAAA,CAC3F;EAAA;AAAA;AAgBD,gBAAsBI,yBAAyB;EAAA;AAAA;AAiB9C;EAAA,wFAjBM,kBACHR,UAAsB,EACtBC,KAAa,EACbC,IAAe,EACfC,KAAmB,EACnBM,eAAmC;IAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;IAAA;MAAA;QAAA;UAAA;YACnCC,0EAAyB,EAAE;YAC3BN,cAA+B;YAC/BC,SAAS,8DAAGT,qBAAqB;YAAA,cAEWD,UAAU,CAACc,eAAe,EAAEC,YAAY,CAAC,iDAA9EC,wBAAwB,oBAAEC,OAAO;YAElCN,WAAW,GAAG,IAAIZ,WAAW,EAAE,CAACa,GAAG,CACrCT,0CAA0C,CAACI,IAAI,EAAEC,KAAK,EAAEQ,wBAAwB,EAAEC,OAAO,EAAEP,SAAS,CAAC,CACxG;YAAA;YAAA,OAEYZ,yBAAyB,CAACO,UAAU,EAAEM,WAAW,GAAGL,KAAK,4BAAKW,OAAO,IAAGR,cAAc,CAAC;UAAA;YAAA;UAAA;UAAA;YAAA;QAAA;MAAA;IAAA;EAAA,CACvG;EAAA;AAAA","names":["sendAndConfirmTransaction","Transaction","getSigners","TOKEN_2022_PROGRAM_ID","createInitializeDefaultAccountStateInstruction","createUpdateDefaultAccountStateInstruction","initializeDefaultAccountState","connection","payer","mint","state","confirmOptions","programId","transaction","add","updateDefaultAccountState","freezeAuthority","multiSigners","freezeAuthorityPublicKey","signers"],"sources":["/Users/ivan/Metadata/node_modules/@solana/spl-token/src/extensions/defaultAccountState/actions.ts"],"sourcesContent":["import type { ConfirmOptions, Connection, PublicKey, Signer, TransactionSignature } from '@solana/web3.js';\nimport { sendAndConfirmTransaction, Transaction } from '@solana/web3.js';\nimport { getSigners } from '../../actions/internal.js';\nimport { TOKEN_2022_PROGRAM_ID } from '../../constants.js';\nimport type { AccountState } from '../../state/account.js';\nimport {\n    createInitializeDefaultAccountStateInstruction,\n    createUpdateDefaultAccountStateInstruction,\n} from './instructions.js';\n\n/**\n * Initialize a default account state on a mint\n *\n * @param connection     Connection to use\n * @param payer          Payer of the transaction fees\n * @param mint        Mint to initialize with extension\n * @param state        Account state with which to initialize new accounts\n * @param confirmOptions Options for confirming the transaction\n * @param programId      SPL Token program account\n *\n * @return Signature of the confirmed transaction\n */\nexport async function initializeDefaultAccountState(\n    connection: Connection,\n    payer: Signer,\n    mint: PublicKey,\n    state: AccountState,\n    confirmOptions?: ConfirmOptions,\n    programId = TOKEN_2022_PROGRAM_ID\n): Promise<TransactionSignature> {\n    const transaction = new Transaction().add(createInitializeDefaultAccountStateInstruction(mint, state, programId));\n\n    return await sendAndConfirmTransaction(connection, transaction, [payer], confirmOptions);\n}\n\n/**\n * Update the default account state on a mint\n *\n * @param connection     Connection to use\n * @param payer          Payer of the transaction fees\n * @param mint        Mint to modify\n * @param state        New account state to set on created accounts\n * @param freezeAuthority          Freeze authority of the mint\n * @param multiSigners   Signing accounts if `freezeAuthority` is a multisig\n * @param confirmOptions Options for confirming the transaction\n * @param programId      SPL Token program account\n *\n * @return Signature of the confirmed transaction\n */\nexport async function updateDefaultAccountState(\n    connection: Connection,\n    payer: Signer,\n    mint: PublicKey,\n    state: AccountState,\n    freezeAuthority: Signer | PublicKey,\n    multiSigners: Signer[] = [],\n    confirmOptions?: ConfirmOptions,\n    programId = TOKEN_2022_PROGRAM_ID\n): Promise<TransactionSignature> {\n    const [freezeAuthorityPublicKey, signers] = getSigners(freezeAuthority, multiSigners);\n\n    const transaction = new Transaction().add(\n        createUpdateDefaultAccountStateInstruction(mint, state, freezeAuthorityPublicKey, signers, programId)\n    );\n\n    return await sendAndConfirmTransaction(connection, transaction, [payer, ...signers], confirmOptions);\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}