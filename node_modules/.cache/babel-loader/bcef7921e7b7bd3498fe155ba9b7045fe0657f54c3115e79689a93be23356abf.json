{"ast":null,"code":"import _slicedToArray from \"/Users/ivan/Metadata/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport { struct, u8 } from '@solana/buffer-layout';\nimport { publicKey } from '@solana/buffer-layout-utils';\nimport { PublicKey, TransactionInstruction } from '@solana/web3.js';\nimport { programSupportsExtensions } from '../constants.js';\nimport { TokenInvalidInstructionDataError, TokenInvalidInstructionKeysError, TokenInvalidInstructionProgramError, TokenInvalidInstructionTypeError, TokenUnsupportedInstructionError } from '../errors.js';\nimport { TokenInstruction } from './types.js';\n/** TODO: docs */\nexport var initializeMintCloseAuthorityInstructionData = struct([u8('instruction'), u8('closeAuthorityOption'), publicKey('closeAuthority')]);\n/**\n * Construct an InitializeMintCloseAuthority instruction\n *\n * @param mint            Token mint account\n * @param closeAuthority  Optional authority that can close the mint\n * @param programId       SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\nexport function createInitializeMintCloseAuthorityInstruction(mint, closeAuthority, programId) {\n  if (!programSupportsExtensions(programId)) {\n    throw new TokenUnsupportedInstructionError();\n  }\n  var keys = [{\n    pubkey: mint,\n    isSigner: false,\n    isWritable: true\n  }];\n  var data = Buffer.alloc(initializeMintCloseAuthorityInstructionData.span);\n  initializeMintCloseAuthorityInstructionData.encode({\n    instruction: TokenInstruction.InitializeMintCloseAuthority,\n    closeAuthorityOption: closeAuthority ? 1 : 0,\n    closeAuthority: closeAuthority || new PublicKey(0)\n  }, data);\n  return new TransactionInstruction({\n    keys: keys,\n    programId: programId,\n    data: data\n  });\n}\n/**\n * Decode an InitializeMintCloseAuthority instruction and validate it\n *\n * @param instruction Transaction instruction to decode\n * @param programId   SPL Token program account\n *\n * @return Decoded, valid instruction\n */\nexport function decodeInitializeMintCloseAuthorityInstruction(instruction, programId) {\n  if (!instruction.programId.equals(programId)) throw new TokenInvalidInstructionProgramError();\n  if (instruction.data.length !== initializeMintCloseAuthorityInstructionData.span) throw new TokenInvalidInstructionDataError();\n  var _decodeInitializeMint = decodeInitializeMintCloseAuthorityInstructionUnchecked(instruction),\n    mint = _decodeInitializeMint.keys.mint,\n    data = _decodeInitializeMint.data;\n  if (data.instruction !== TokenInstruction.InitializeMintCloseAuthority) throw new TokenInvalidInstructionTypeError();\n  if (!mint) throw new TokenInvalidInstructionKeysError();\n  return {\n    programId: programId,\n    keys: {\n      mint: mint\n    },\n    data: data\n  };\n}\n/**\n * Decode an InitializeMintCloseAuthority instruction without validating it\n *\n * @param instruction Transaction instruction to decode\n *\n * @return Decoded, non-validated instruction\n */\nexport function decodeInitializeMintCloseAuthorityInstructionUnchecked(_ref) {\n  var programId = _ref.programId,\n    _ref$keys = _slicedToArray(_ref.keys, 1),\n    mint = _ref$keys[0],\n    data = _ref.data;\n  var _initializeMintCloseA = initializeMintCloseAuthorityInstructionData.decode(data),\n    instruction = _initializeMintCloseA.instruction,\n    closeAuthorityOption = _initializeMintCloseA.closeAuthorityOption,\n    closeAuthority = _initializeMintCloseA.closeAuthority;\n  return {\n    programId: programId,\n    keys: {\n      mint: mint\n    },\n    data: {\n      instruction: instruction,\n      closeAuthority: closeAuthorityOption ? closeAuthority : null\n    }\n  };\n}","map":{"version":3,"mappings":";AAAA,SAASA,MAAM,EAAEC,EAAE,QAAQ,uBAAuB;AAClD,SAASC,SAAS,QAAQ,6BAA6B;AAEvD,SAASC,SAAS,EAAEC,sBAAsB,QAAQ,iBAAiB;AACnE,SAASC,yBAAyB,QAAQ,iBAAiB;AAC3D,SACIC,gCAAgC,EAChCC,gCAAgC,EAChCC,mCAAmC,EACnCC,gCAAgC,EAChCC,gCAAgC,QAC7B,cAAc;AACrB,SAASC,gBAAgB,QAAQ,YAAY;AAS7C;AACA,OAAO,IAAMC,2CAA2C,GAAGZ,MAAM,CAA8C,CAC3GC,EAAE,CAAC,aAAa,CAAC,EACjBA,EAAE,CAAC,sBAAsB,CAAC,EAC1BC,SAAS,CAAC,gBAAgB,CAAC,CAC9B,CAAC;AAEF;;;;;;;;;AASA,OAAM,SAAUW,6CAA6C,CACzDC,IAAe,EACfC,cAAgC,EAChCC,SAAoB;EAEpB,IAAI,CAACX,yBAAyB,CAACW,SAAS,CAAC,EAAE;IACvC,MAAM,IAAIN,gCAAgC,EAAE;;EAEhD,IAAMO,IAAI,GAAG,CAAC;IAAEC,MAAM,EAAEJ,IAAI;IAAEK,QAAQ,EAAE,KAAK;IAAEC,UAAU,EAAE;EAAI,CAAE,CAAC;EAElE,IAAMC,IAAI,GAAGC,MAAM,CAACC,KAAK,CAACX,2CAA2C,CAACY,IAAI,CAAC;EAC3EZ,2CAA2C,CAACa,MAAM,CAC9C;IACIC,WAAW,EAAEf,gBAAgB,CAACgB,4BAA4B;IAC1DC,oBAAoB,EAAEb,cAAc,GAAG,CAAC,GAAG,CAAC;IAC5CA,cAAc,EAAEA,cAAc,IAAI,IAAIZ,SAAS,CAAC,CAAC;GACpD,EACDkB,IAAI,CACP;EAED,OAAO,IAAIjB,sBAAsB,CAAC;IAAEa,IAAI,EAAJA,IAAI;IAAED,SAAS,EAATA,SAAS;IAAEK,IAAI,EAAJA;EAAI,CAAE,CAAC;AAChE;AAcA;;;;;;;;AAQA,OAAM,SAAUQ,6CAA6C,CACzDH,WAAmC,EACnCV,SAAoB;EAEpB,IAAI,CAACU,WAAW,CAACV,SAAS,CAACc,MAAM,CAACd,SAAS,CAAC,EAAE,MAAM,IAAIR,mCAAmC,EAAE;EAC7F,IAAIkB,WAAW,CAACL,IAAI,CAACU,MAAM,KAAKnB,2CAA2C,CAACY,IAAI,EAC5E,MAAM,IAAIlB,gCAAgC,EAAE;EAEhD,4BAGI0B,sDAAsD,CAACN,WAAW,CAAC;IAF3DZ,IAAI,yBAAZG,IAAI,CAAIH,IAAI;IACZO,IAAI,yBAAJA,IAAI;EAER,IAAIA,IAAI,CAACK,WAAW,KAAKf,gBAAgB,CAACgB,4BAA4B,EAClE,MAAM,IAAIlB,gCAAgC,EAAE;EAChD,IAAI,CAACK,IAAI,EAAE,MAAM,IAAIP,gCAAgC,EAAE;EAEvD,OAAO;IACHS,SAAS,EAATA,SAAS;IACTC,IAAI,EAAE;MACFH,IAAI,EAAJA;KACH;IACDO,IAAI,EAAJA;GACH;AACL;AAcA;;;;;;;AAOA,OAAM,SAAUW,sDAAsD,OAI7C;EAAA,IAHrBhB,SAAS,QAATA,SAAS;IAAA,gCACTC,IAAI;IAAGH,IAAI;IACXO,IAAI,QAAJA,IAAI;EAEJ,4BACIT,2CAA2C,CAACqB,MAAM,CAACZ,IAAI,CAAC;IADpDK,WAAW,yBAAXA,WAAW;IAAEE,oBAAoB,yBAApBA,oBAAoB;IAAEb,cAAc,yBAAdA,cAAc;EAGzD,OAAO;IACHC,SAAS,EAATA,SAAS;IACTC,IAAI,EAAE;MACFH,IAAI,EAAJA;KACH;IACDO,IAAI,EAAE;MACFK,WAAW,EAAXA,WAAW;MACXX,cAAc,EAAEa,oBAAoB,GAAGb,cAAc,GAAG;;GAE/D;AACL","names":["struct","u8","publicKey","PublicKey","TransactionInstruction","programSupportsExtensions","TokenInvalidInstructionDataError","TokenInvalidInstructionKeysError","TokenInvalidInstructionProgramError","TokenInvalidInstructionTypeError","TokenUnsupportedInstructionError","TokenInstruction","initializeMintCloseAuthorityInstructionData","createInitializeMintCloseAuthorityInstruction","mint","closeAuthority","programId","keys","pubkey","isSigner","isWritable","data","Buffer","alloc","span","encode","instruction","InitializeMintCloseAuthority","closeAuthorityOption","decodeInitializeMintCloseAuthorityInstruction","equals","length","decodeInitializeMintCloseAuthorityInstructionUnchecked","decode"],"sources":["/Users/ivan/Metadata/node_modules/@solana/spl-token/src/instructions/initializeMintCloseAuthority.ts"],"sourcesContent":["import { struct, u8 } from '@solana/buffer-layout';\nimport { publicKey } from '@solana/buffer-layout-utils';\nimport type { AccountMeta } from '@solana/web3.js';\nimport { PublicKey, TransactionInstruction } from '@solana/web3.js';\nimport { programSupportsExtensions } from '../constants.js';\nimport {\n    TokenInvalidInstructionDataError,\n    TokenInvalidInstructionKeysError,\n    TokenInvalidInstructionProgramError,\n    TokenInvalidInstructionTypeError,\n    TokenUnsupportedInstructionError,\n} from '../errors.js';\nimport { TokenInstruction } from './types.js';\n\n/** TODO: docs */\nexport interface InitializeMintCloseAuthorityInstructionData {\n    instruction: TokenInstruction.InitializeMintCloseAuthority;\n    closeAuthorityOption: 1 | 0;\n    closeAuthority: PublicKey;\n}\n\n/** TODO: docs */\nexport const initializeMintCloseAuthorityInstructionData = struct<InitializeMintCloseAuthorityInstructionData>([\n    u8('instruction'),\n    u8('closeAuthorityOption'),\n    publicKey('closeAuthority'),\n]);\n\n/**\n * Construct an InitializeMintCloseAuthority instruction\n *\n * @param mint            Token mint account\n * @param closeAuthority  Optional authority that can close the mint\n * @param programId       SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\nexport function createInitializeMintCloseAuthorityInstruction(\n    mint: PublicKey,\n    closeAuthority: PublicKey | null,\n    programId: PublicKey\n): TransactionInstruction {\n    if (!programSupportsExtensions(programId)) {\n        throw new TokenUnsupportedInstructionError();\n    }\n    const keys = [{ pubkey: mint, isSigner: false, isWritable: true }];\n\n    const data = Buffer.alloc(initializeMintCloseAuthorityInstructionData.span);\n    initializeMintCloseAuthorityInstructionData.encode(\n        {\n            instruction: TokenInstruction.InitializeMintCloseAuthority,\n            closeAuthorityOption: closeAuthority ? 1 : 0,\n            closeAuthority: closeAuthority || new PublicKey(0),\n        },\n        data\n    );\n\n    return new TransactionInstruction({ keys, programId, data });\n}\n\n/** A decoded, valid InitializeMintCloseAuthority instruction */\nexport interface DecodedInitializeMintCloseAuthorityInstruction {\n    programId: PublicKey;\n    keys: {\n        mint: AccountMeta;\n    };\n    data: {\n        instruction: TokenInstruction.InitializeMintCloseAuthority;\n        closeAuthority: PublicKey | null;\n    };\n}\n\n/**\n * Decode an InitializeMintCloseAuthority instruction and validate it\n *\n * @param instruction Transaction instruction to decode\n * @param programId   SPL Token program account\n *\n * @return Decoded, valid instruction\n */\nexport function decodeInitializeMintCloseAuthorityInstruction(\n    instruction: TransactionInstruction,\n    programId: PublicKey\n): DecodedInitializeMintCloseAuthorityInstruction {\n    if (!instruction.programId.equals(programId)) throw new TokenInvalidInstructionProgramError();\n    if (instruction.data.length !== initializeMintCloseAuthorityInstructionData.span)\n        throw new TokenInvalidInstructionDataError();\n\n    const {\n        keys: { mint },\n        data,\n    } = decodeInitializeMintCloseAuthorityInstructionUnchecked(instruction);\n    if (data.instruction !== TokenInstruction.InitializeMintCloseAuthority)\n        throw new TokenInvalidInstructionTypeError();\n    if (!mint) throw new TokenInvalidInstructionKeysError();\n\n    return {\n        programId,\n        keys: {\n            mint,\n        },\n        data,\n    };\n}\n\n/** A decoded, non-validated InitializeMintCloseAuthority instruction */\nexport interface DecodedInitializeMintCloseAuthorityInstructionUnchecked {\n    programId: PublicKey;\n    keys: {\n        mint: AccountMeta | undefined;\n    };\n    data: {\n        instruction: number;\n        closeAuthority: PublicKey | null;\n    };\n}\n\n/**\n * Decode an InitializeMintCloseAuthority instruction without validating it\n *\n * @param instruction Transaction instruction to decode\n *\n * @return Decoded, non-validated instruction\n */\nexport function decodeInitializeMintCloseAuthorityInstructionUnchecked({\n    programId,\n    keys: [mint],\n    data,\n}: TransactionInstruction): DecodedInitializeMintCloseAuthorityInstructionUnchecked {\n    const { instruction, closeAuthorityOption, closeAuthority } =\n        initializeMintCloseAuthorityInstructionData.decode(data);\n\n    return {\n        programId,\n        keys: {\n            mint,\n        },\n        data: {\n            instruction,\n            closeAuthority: closeAuthorityOption ? closeAuthority : null,\n        },\n    };\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}