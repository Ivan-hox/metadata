{"ast":null,"code":"\"use strict\";\n\nvar _toArray = require(\"/Users/ivan/Metadata/node_modules/@babel/runtime/helpers/toArray.js\").default;\nvar _createForOfIteratorHelper = require(\"/Users/ivan/Metadata/node_modules/@babel/runtime/helpers/createForOfIteratorHelper.js\").default;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.decodeInitializeMultisigInstructionUnchecked = exports.decodeInitializeMultisigInstruction = exports.createInitializeMultisigInstruction = exports.initializeMultisigInstructionData = void 0;\nvar buffer_layout_1 = require(\"@solana/buffer-layout\");\nvar web3_js_1 = require(\"@solana/web3.js\");\nvar constants_js_1 = require(\"../constants.js\");\nvar errors_js_1 = require(\"../errors.js\");\nvar types_js_1 = require(\"./types.js\");\n/** TODO: docs */\nexports.initializeMultisigInstructionData = (0, buffer_layout_1.struct)([(0, buffer_layout_1.u8)('instruction'), (0, buffer_layout_1.u8)('m')]);\n/**\n * Construct an InitializeMultisig instruction\n *\n * @param account   Multisig account\n * @param signers   Full set of signers\n * @param m         Number of required signatures\n * @param programId SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\nfunction createInitializeMultisigInstruction(account, signers, m) {\n  var programId = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : constants_js_1.TOKEN_PROGRAM_ID;\n  var keys = [{\n    pubkey: account,\n    isSigner: false,\n    isWritable: true\n  }, {\n    pubkey: web3_js_1.SYSVAR_RENT_PUBKEY,\n    isSigner: false,\n    isWritable: false\n  }];\n  var _iterator = _createForOfIteratorHelper(signers),\n    _step;\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var signer = _step.value;\n      keys.push({\n        pubkey: signer,\n        isSigner: false,\n        isWritable: false\n      });\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n  var data = Buffer.alloc(exports.initializeMultisigInstructionData.span);\n  exports.initializeMultisigInstructionData.encode({\n    instruction: types_js_1.TokenInstruction.InitializeMultisig,\n    m: m\n  }, data);\n  return new web3_js_1.TransactionInstruction({\n    keys: keys,\n    programId: programId,\n    data: data\n  });\n}\nexports.createInitializeMultisigInstruction = createInitializeMultisigInstruction;\n/**\n * Decode an InitializeMultisig instruction and validate it\n *\n * @param instruction Transaction instruction to decode\n * @param programId   SPL Token program account\n *\n * @return Decoded, valid instruction\n */\nfunction decodeInitializeMultisigInstruction(instruction) {\n  var programId = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : constants_js_1.TOKEN_PROGRAM_ID;\n  if (!instruction.programId.equals(programId)) throw new errors_js_1.TokenInvalidInstructionProgramError();\n  if (instruction.data.length !== exports.initializeMultisigInstructionData.span) throw new errors_js_1.TokenInvalidInstructionDataError();\n  var _decodeInitializeMult = decodeInitializeMultisigInstructionUnchecked(instruction),\n    _decodeInitializeMult2 = _decodeInitializeMult.keys,\n    account = _decodeInitializeMult2.account,\n    rent = _decodeInitializeMult2.rent,\n    signers = _decodeInitializeMult2.signers,\n    data = _decodeInitializeMult.data;\n  if (data.instruction !== types_js_1.TokenInstruction.InitializeMultisig) throw new errors_js_1.TokenInvalidInstructionTypeError();\n  if (!account || !rent || !signers.length) throw new errors_js_1.TokenInvalidInstructionKeysError();\n  // TODO: key checks?\n  return {\n    programId: programId,\n    keys: {\n      account: account,\n      rent: rent,\n      signers: signers\n    },\n    data: data\n  };\n}\nexports.decodeInitializeMultisigInstruction = decodeInitializeMultisigInstruction;\n/**\n * Decode an InitializeMultisig instruction without validating it\n *\n * @param instruction Transaction instruction to decode\n *\n * @return Decoded, non-validated instruction\n */\nfunction decodeInitializeMultisigInstructionUnchecked(_ref) {\n  var programId = _ref.programId,\n    _ref$keys = _toArray(_ref.keys),\n    account = _ref$keys[0],\n    rent = _ref$keys[1],\n    signers = _ref$keys.slice(2),\n    data = _ref.data;\n  return {\n    programId: programId,\n    keys: {\n      account: account,\n      rent: rent,\n      signers: signers\n    },\n    data: exports.initializeMultisigInstructionData.decode(data)\n  };\n}\nexports.decodeInitializeMultisigInstructionUnchecked = decodeInitializeMultisigInstructionUnchecked;","map":{"version":3,"mappings":";;;;;;;;AAAA;AAEA;AACA;AACA;AAMA;AAQA;AACaA,yCAAiC,GAAG,0BAAM,EAAoC,CACvF,sBAAE,EAAC,aAAa,CAAC,EACjB,sBAAE,EAAC,GAAG,CAAC,CACV,CAAC;AAEF;;;;;;;;;;AAUA,SAAgBC,mCAAmC,CAC/CC,OAAkB,EAClBC,OAAoB,EACpBC,CAAS,EACmB;EAAA,IAA5BC,SAAS,uEAAGC,+BAAgB;EAE5B,IAAMC,IAAI,GAAG,CACT;IAAEC,MAAM,EAAEN,OAAO;IAAEO,QAAQ,EAAE,KAAK;IAAEC,UAAU,EAAE;EAAI,CAAE,EACtD;IAAEF,MAAM,EAAEG,4BAAkB;IAAEF,QAAQ,EAAE,KAAK;IAAEC,UAAU,EAAE;EAAK,CAAE,CACrE;EAAC,2CACmBP,OAAO;IAAA;EAAA;IAA5B,oDAA8B;MAAA,IAAnBS,MAAM;MACbL,IAAI,CAACM,IAAI,CAAC;QAAEL,MAAM,EAAEI,MAAM;QAAEH,QAAQ,EAAE,KAAK;QAAEC,UAAU,EAAE;MAAK,CAAE,CAAC;;EACpE;IAAA;EAAA;IAAA;EAAA;EAED,IAAMI,IAAI,GAAGC,MAAM,CAACC,KAAK,CAAChB,yCAAiC,CAACiB,IAAI,CAAC;EACjEjB,yCAAiC,CAACkB,MAAM,CACpC;IACIC,WAAW,EAAEC,2BAAgB,CAACC,kBAAkB;IAChDjB,CAAC,EAADA;GACH,EACDU,IAAI,CACP;EAED,OAAO,IAAIH,gCAAsB,CAAC;IAAEJ,IAAI,EAAJA,IAAI;IAAEF,SAAS,EAATA,SAAS;IAAES,IAAI,EAAJA;EAAI,CAAE,CAAC;AAChE;AAxBAd;AAwCA;;;;;;;;AAQA,SAAgBsB,mCAAmC,CAC/CH,WAAmC,EACP;EAAA,IAA5Bd,SAAS,uEAAGC,+BAAgB;EAE5B,IAAI,CAACa,WAAW,CAACd,SAAS,CAACkB,MAAM,CAAClB,SAAS,CAAC,EAAE,MAAM,IAAImB,+CAAmC,EAAE;EAC7F,IAAIL,WAAW,CAACL,IAAI,CAACW,MAAM,KAAKzB,yCAAiC,CAACiB,IAAI,EAClE,MAAM,IAAIO,4CAAgC,EAAE;EAEhD,4BAGIE,4CAA4C,CAACP,WAAW,CAAC;IAAA,+CAFzDZ,IAAI;IAAIL,OAAO,0BAAPA,OAAO;IAAEyB,IAAI,0BAAJA,IAAI;IAAExB,OAAO,0BAAPA,OAAO;IAC9BW,IAAI,yBAAJA,IAAI;EAER,IAAIA,IAAI,CAACK,WAAW,KAAKC,2BAAgB,CAACC,kBAAkB,EAAE,MAAM,IAAIG,4CAAgC,EAAE;EAC1G,IAAI,CAACtB,OAAO,IAAI,CAACyB,IAAI,IAAI,CAACxB,OAAO,CAACsB,MAAM,EAAE,MAAM,IAAID,4CAAgC,EAAE;EAEtF;EAEA,OAAO;IACHnB,SAAS,EAATA,SAAS;IACTE,IAAI,EAAE;MACFL,OAAO,EAAPA,OAAO;MACPyB,IAAI,EAAJA,IAAI;MACJxB,OAAO,EAAPA;KACH;IACDW,IAAI,EAAJA;GACH;AACL;AA1BAd;AA0CA;;;;;;;AAOA,SAAgB0B,4CAA4C,OAInC;EAAA,IAHrBrB,SAAS,QAATA,SAAS;IAAA,0BACTE,IAAI;IAAGL,OAAO;IAAEyB,IAAI;IAAKxB,OAAO;IAChCW,IAAI,QAAJA,IAAI;EAEJ,OAAO;IACHT,SAAS,EAATA,SAAS;IACTE,IAAI,EAAE;MACFL,OAAO,EAAPA,OAAO;MACPyB,IAAI,EAAJA,IAAI;MACJxB,OAAO,EAAPA;KACH;IACDW,IAAI,EAAEd,yCAAiC,CAAC4B,MAAM,CAACd,IAAI;GACtD;AACL;AAdAd","names":["exports","createInitializeMultisigInstruction","account","signers","m","programId","constants_js_1","keys","pubkey","isSigner","isWritable","web3_js_1","signer","push","data","Buffer","alloc","span","encode","instruction","types_js_1","InitializeMultisig","decodeInitializeMultisigInstruction","equals","errors_js_1","length","decodeInitializeMultisigInstructionUnchecked","rent","decode"],"sources":["/Users/ivan/Metadata/node_modules/@solana/spl-token/src/instructions/initializeMultisig.ts"],"sourcesContent":["import { struct, u8 } from '@solana/buffer-layout';\nimport type { AccountMeta, PublicKey } from '@solana/web3.js';\nimport { SYSVAR_RENT_PUBKEY, TransactionInstruction } from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID } from '../constants.js';\nimport {\n    TokenInvalidInstructionDataError,\n    TokenInvalidInstructionKeysError,\n    TokenInvalidInstructionProgramError,\n    TokenInvalidInstructionTypeError,\n} from '../errors.js';\nimport { TokenInstruction } from './types.js';\n\n/** TODO: docs */\nexport interface InitializeMultisigInstructionData {\n    instruction: TokenInstruction.InitializeMultisig;\n    m: number;\n}\n\n/** TODO: docs */\nexport const initializeMultisigInstructionData = struct<InitializeMultisigInstructionData>([\n    u8('instruction'),\n    u8('m'),\n]);\n\n/**\n * Construct an InitializeMultisig instruction\n *\n * @param account   Multisig account\n * @param signers   Full set of signers\n * @param m         Number of required signatures\n * @param programId SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\nexport function createInitializeMultisigInstruction(\n    account: PublicKey,\n    signers: PublicKey[],\n    m: number,\n    programId = TOKEN_PROGRAM_ID\n): TransactionInstruction {\n    const keys = [\n        { pubkey: account, isSigner: false, isWritable: true },\n        { pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false },\n    ];\n    for (const signer of signers) {\n        keys.push({ pubkey: signer, isSigner: false, isWritable: false });\n    }\n\n    const data = Buffer.alloc(initializeMultisigInstructionData.span);\n    initializeMultisigInstructionData.encode(\n        {\n            instruction: TokenInstruction.InitializeMultisig,\n            m,\n        },\n        data\n    );\n\n    return new TransactionInstruction({ keys, programId, data });\n}\n\n/** A decoded, valid InitializeMultisig instruction */\nexport interface DecodedInitializeMultisigInstruction {\n    programId: PublicKey;\n    keys: {\n        account: AccountMeta;\n        rent: AccountMeta;\n        signers: AccountMeta[];\n    };\n    data: {\n        instruction: TokenInstruction.InitializeMultisig;\n        m: number;\n    };\n}\n\n/**\n * Decode an InitializeMultisig instruction and validate it\n *\n * @param instruction Transaction instruction to decode\n * @param programId   SPL Token program account\n *\n * @return Decoded, valid instruction\n */\nexport function decodeInitializeMultisigInstruction(\n    instruction: TransactionInstruction,\n    programId = TOKEN_PROGRAM_ID\n): DecodedInitializeMultisigInstruction {\n    if (!instruction.programId.equals(programId)) throw new TokenInvalidInstructionProgramError();\n    if (instruction.data.length !== initializeMultisigInstructionData.span)\n        throw new TokenInvalidInstructionDataError();\n\n    const {\n        keys: { account, rent, signers },\n        data,\n    } = decodeInitializeMultisigInstructionUnchecked(instruction);\n    if (data.instruction !== TokenInstruction.InitializeMultisig) throw new TokenInvalidInstructionTypeError();\n    if (!account || !rent || !signers.length) throw new TokenInvalidInstructionKeysError();\n\n    // TODO: key checks?\n\n    return {\n        programId,\n        keys: {\n            account,\n            rent,\n            signers,\n        },\n        data,\n    };\n}\n\n/** A decoded, non-validated InitializeMultisig instruction */\nexport interface DecodedInitializeMultisigInstructionUnchecked {\n    programId: PublicKey;\n    keys: {\n        account: AccountMeta | undefined;\n        rent: AccountMeta | undefined;\n        signers: AccountMeta[];\n    };\n    data: {\n        instruction: number;\n        m: number;\n    };\n}\n\n/**\n * Decode an InitializeMultisig instruction without validating it\n *\n * @param instruction Transaction instruction to decode\n *\n * @return Decoded, non-validated instruction\n */\nexport function decodeInitializeMultisigInstructionUnchecked({\n    programId,\n    keys: [account, rent, ...signers],\n    data,\n}: TransactionInstruction): DecodedInitializeMultisigInstructionUnchecked {\n    return {\n        programId,\n        keys: {\n            account,\n            rent,\n            signers,\n        },\n        data: initializeMultisigInstructionData.decode(data),\n    };\n}\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}