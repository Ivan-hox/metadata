{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"/Users/ivan/Metadata/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\").default;\nvar _toConsumableArray = require(\"/Users/ivan/Metadata/node_modules/@babel/runtime/helpers/toConsumableArray.js\").default;\nvar _slicedToArray = require(\"/Users/ivan/Metadata/node_modules/@babel/runtime/helpers/slicedToArray.js\").default;\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.transfer = void 0;\nvar web3_js_1 = require(\"@solana/web3.js\");\nvar constants_js_1 = require(\"../constants.js\");\nvar transfer_js_1 = require(\"../instructions/transfer.js\");\nvar internal_js_1 = require(\"./internal.js\");\n/**\n * Transfer tokens from one account to another\n *\n * @param connection     Connection to use\n * @param payer          Payer of the transaction fees\n * @param source         Source account\n * @param destination    Destination account\n * @param owner          Owner of the source account\n * @param amount         Number of tokens to transfer\n * @param multiSigners   Signing accounts if `owner` is a multisig\n * @param confirmOptions Options for confirming the transaction\n * @param programId      SPL Token program account\n *\n * @return Signature of the confirmed transaction\n */\nfunction transfer(connection, payer, source, destination, owner, amount) {\n  var multiSigners = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : [];\n  var confirmOptions = arguments.length > 7 ? arguments[7] : undefined;\n  var programId = arguments.length > 8 && arguments[8] !== undefined ? arguments[8] : constants_js_1.TOKEN_PROGRAM_ID;\n  return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n    var _ref, _ref2, ownerPublicKey, signers, transaction;\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _ref = (0, internal_js_1.getSigners)(owner, multiSigners), _ref2 = _slicedToArray(_ref, 2), ownerPublicKey = _ref2[0], signers = _ref2[1];\n            transaction = new web3_js_1.Transaction().add((0, transfer_js_1.createTransferInstruction)(source, destination, ownerPublicKey, amount, multiSigners, programId));\n            _context.next = 4;\n            return (0, web3_js_1.sendAndConfirmTransaction)(connection, transaction, [payer].concat(_toConsumableArray(signers)), confirmOptions);\n          case 4:\n            return _context.abrupt(\"return\", _context.sent);\n          case 5:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n}\nexports.transfer = transfer;","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;;;;;;;AAeA,SAAsBA,QAAQ,CAC1BC,UAAsB,EACtBC,KAAa,EACbC,MAAiB,EACjBC,WAAsB,EACtBC,KAAyB,EACzBC,MAAuB,EAGK;EAAA,IAF5BC,mFAAyB,EAAE;EAAA,IAC3BC,cAA+B;EAAA,IAC/BC,SAAS,uEAAGC,+BAAgB;;;;;;;mBAEM,4BAAU,EAACL,KAAK,EAAEE,YAAY,CAAC,mCAA1DI,cAAc,aAAEC,OAAO;YAExBC,WAAW,GAAG,IAAIC,qBAAW,EAAE,CAACC,GAAG,CACrC,2CAAyB,EAACZ,MAAM,EAAEC,WAAW,EAAEO,cAAc,EAAEL,MAAM,EAAEC,YAAY,EAAEE,SAAS,CAAC,CAClG;YAAA;YAEM,OAAM,uCAAyB,EAACR,UAAU,EAAEY,WAAW,GAAGX,KAAK,4BAAKU,OAAO,IAAGJ,cAAc,CAAC;UAAA;YAAA;UAAA;UAAA;YAAA;QAAA;MAAA;IAAA;EAAA,CACvG;;AAlBDQ","names":["transfer","connection","payer","source","destination","owner","amount","multiSigners","confirmOptions","programId","constants_js_1","ownerPublicKey","signers","transaction","web3_js_1","add","exports"],"sources":["/Users/ivan/Metadata/node_modules/@solana/spl-token/src/actions/transfer.ts"],"sourcesContent":["import type { ConfirmOptions, Connection, PublicKey, Signer, TransactionSignature } from '@solana/web3.js';\nimport { sendAndConfirmTransaction, Transaction } from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID } from '../constants.js';\nimport { createTransferInstruction } from '../instructions/transfer.js';\nimport { getSigners } from './internal.js';\n\n/**\n * Transfer tokens from one account to another\n *\n * @param connection     Connection to use\n * @param payer          Payer of the transaction fees\n * @param source         Source account\n * @param destination    Destination account\n * @param owner          Owner of the source account\n * @param amount         Number of tokens to transfer\n * @param multiSigners   Signing accounts if `owner` is a multisig\n * @param confirmOptions Options for confirming the transaction\n * @param programId      SPL Token program account\n *\n * @return Signature of the confirmed transaction\n */\nexport async function transfer(\n    connection: Connection,\n    payer: Signer,\n    source: PublicKey,\n    destination: PublicKey,\n    owner: Signer | PublicKey,\n    amount: number | bigint,\n    multiSigners: Signer[] = [],\n    confirmOptions?: ConfirmOptions,\n    programId = TOKEN_PROGRAM_ID\n): Promise<TransactionSignature> {\n    const [ownerPublicKey, signers] = getSigners(owner, multiSigners);\n\n    const transaction = new Transaction().add(\n        createTransferInstruction(source, destination, ownerPublicKey, amount, multiSigners, programId)\n    );\n\n    return await sendAndConfirmTransaction(connection, transaction, [payer, ...signers], confirmOptions);\n}\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}