{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.collectionsTypeMap = exports.uint8Array = exports.fixedSizeUint8Array = exports.fixedSizeBuffer = exports.array = exports.fixedSizeArray = exports.uniformFixedSizeArray = void 0;\nvar types_1 = require(\"../types\");\nvar assert_1 = require(\"assert\");\nvar numbers_1 = require(\"./numbers\");\nvar types_2 = require(\"../types\");\nvar utils_1 = require(\"../utils\");\nvar beet_fixable_1 = require(\"../beet.fixable\");\n/**\n * De/Serializes an array with a specific number of elements of type {@link T}\n * which all have the same size.\n *\n * @template T type of elements held in the array\n *\n * @param element the De/Serializer for the element type\n * @param len the number of elements in the array\n * @param lenPrefix if `true` a 4 byte number indicating the size of the array\n * will be included before serialized array data\n *\n * @category beet/collection\n */\nfunction uniformFixedSizeArray(element, len) {\n  var lenPrefix = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  var arraySize = element.byteSize * len;\n  var byteSize = lenPrefix ? 4 + arraySize : arraySize;\n  return {\n    write: function write(buf, offset, value) {\n      assert_1.strict.equal(value.length, len, \"array length \".concat(value.length, \" should match len \").concat(len));\n      if (lenPrefix) {\n        numbers_1.u32.write(buf, offset, len);\n        offset += 4;\n      }\n      for (var i = 0; i < len; i++) {\n        element.write(buf, offset + i * element.byteSize, value[i]);\n      }\n    },\n    read: function read(buf, offset) {\n      if (lenPrefix) {\n        var size = numbers_1.u32.read(buf, offset);\n        assert_1.strict.equal(size, len, 'invalid byte size');\n        offset += 4;\n      }\n      var arr = new Array(len);\n      for (var i = 0; i < len; i++) {\n        arr[i] = element.read(buf, offset + i * element.byteSize);\n      }\n      return arr;\n    },\n    byteSize: byteSize,\n    length: len,\n    elementByteSize: element.byteSize,\n    lenPrefixByteSize: 4,\n    description: \"Array<\".concat(element.description, \">(\").concat(len, \")\")\n  };\n}\nexports.uniformFixedSizeArray = uniformFixedSizeArray;\n/**\n * De/Serializes an array with a specific number of elements of type {@link T}\n * which do not all have the same size.\n *\n * @template T type of elements held in the array\n *\n * @param elements the De/Serializers for the element types\n * @param elementsByteSize size of all elements in the array combined\n *\n * @category beet/collection\n */\nfunction fixedSizeArray(elements, elementsByteSize) {\n  var len = elements.length;\n  var firstElement = len === 0 ? '<EMPTY>' : elements[0].description;\n  return {\n    write: function write(buf, offset, value) {\n      assert_1.strict.equal(value.length, len, \"array length \".concat(value.length, \" should match len \").concat(len));\n      numbers_1.u32.write(buf, offset, len);\n      var cursor = offset + 4;\n      for (var i = 0; i < len; i++) {\n        var element = elements[i];\n        element.write(buf, cursor, value[i]);\n        cursor += element.byteSize;\n      }\n    },\n    read: function read(buf, offset) {\n      var size = numbers_1.u32.read(buf, offset);\n      assert_1.strict.equal(size, len, 'invalid byte size');\n      var cursor = offset + 4;\n      var arr = new Array(len);\n      for (var i = 0; i < len; i++) {\n        var element = elements[i];\n        arr[i] = element.read(buf, cursor);\n        cursor += element.byteSize;\n      }\n      return arr;\n    },\n    byteSize: 4 + elementsByteSize,\n    length: len,\n    description: \"Array<\".concat(firstElement, \">(\").concat(len, \")[ 4 + \").concat(elementsByteSize, \" ]\")\n  };\n}\nexports.fixedSizeArray = fixedSizeArray;\n/**\n * Wraps an array De/Serializer with with elements of type {@link T} which do\n * not all have the same size.\n *\n * @template T type of elements held in the array\n *\n * @param element the De/Serializer for the element types\n *\n * @category beet/collection\n */\nfunction array(element) {\n  return {\n    toFixedFromData: function toFixedFromData(buf, offset) {\n      var len = numbers_1.u32.read(buf, offset);\n      (0, utils_1.logTrace)(\"\".concat(this.description, \"[\").concat(len, \"]\"));\n      var cursorStart = offset + 4;\n      var cursor = cursorStart;\n      var fixedElements = new Array(len);\n      for (var i = 0; i < len; i++) {\n        var fixedElement = (0, beet_fixable_1.fixBeetFromData)(element, buf, cursor);\n        fixedElements[i] = fixedElement;\n        cursor += fixedElement.byteSize;\n      }\n      return fixedSizeArray(fixedElements, cursor - cursorStart);\n    },\n    toFixedFromValue: function toFixedFromValue(vals) {\n      (0, assert_1.strict)(Array.isArray(vals), \"\".concat(vals, \" should be an array\"));\n      var elementsSize = 0;\n      var fixedElements = new Array(vals.length);\n      for (var i = 0; i < vals.length; i++) {\n        var fixedElement = (0, beet_fixable_1.fixBeetFromValue)(element, vals[i]);\n        fixedElements[i] = fixedElement;\n        elementsSize += fixedElement.byteSize;\n      }\n      return fixedSizeArray(fixedElements, elementsSize);\n    },\n    description: \"array\"\n  };\n}\nexports.array = array;\n/**\n * A De/Serializer for raw {@link Buffer}s that just copies/reads the buffer bytes\n * to/from the provided buffer.\n *\n * @param bytes the byte size of the buffer to de/serialize\n * @category beet/collection\n */\nfunction fixedSizeBuffer(bytes) {\n  return {\n    write: function write(buf, offset, value) {\n      value.copy(buf, offset, 0, bytes);\n    },\n    read: function read(buf, offset) {\n      return buf.slice(offset, offset + bytes);\n    },\n    byteSize: bytes,\n    description: \"Buffer(\".concat(bytes, \")\")\n  };\n}\nexports.fixedSizeBuffer = fixedSizeBuffer;\n/**\n * A De/Serializer for {@link Uint8Array}s of known size that just copies/reads\n * the array bytes to/from the provided buffer.\n *\n * @category beet/collection\n */\nfunction fixedSizeUint8Array(len) {\n  var lenPrefix = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  var arrayBufferBeet = fixedSizeBuffer(len);\n  var byteSize = lenPrefix ? len + 4 : len;\n  return {\n    write: function write(buf, offset, value) {\n      assert_1.strict.equal(value.byteLength, len, \"Uint8Array length \".concat(value.byteLength, \" should match len \").concat(len));\n      if (lenPrefix) {\n        numbers_1.u32.write(buf, offset, len);\n        offset += 4;\n      }\n      var valueBuf = Buffer.from(value);\n      arrayBufferBeet.write(buf, offset, valueBuf);\n    },\n    read: function read(buf, offset) {\n      if (lenPrefix) {\n        var size = numbers_1.u32.read(buf, offset);\n        assert_1.strict.equal(size, len, 'invalid byte size');\n        offset += 4;\n      }\n      var arrayBuffer = arrayBufferBeet.read(buf, offset);\n      return Uint8Array.from(arrayBuffer);\n    },\n    byteSize: byteSize,\n    description: \"Uint8Array(\".concat(len, \")\")\n  };\n}\nexports.fixedSizeUint8Array = fixedSizeUint8Array;\n/**\n * A De/Serializer for {@link Uint8Array}s that just copies/reads the array bytes\n * to/from the provided buffer.\n *\n * @category beet/collection\n */\nexports.uint8Array = {\n  toFixedFromData: function toFixedFromData(buf, offset) {\n    var len = numbers_1.u32.read(buf, offset);\n    (0, utils_1.logTrace)(\"\".concat(this.description, \"[\").concat(len, \"]\"));\n    return fixedSizeUint8Array(len, true);\n  },\n  toFixedFromValue: function toFixedFromValue(val) {\n    var len = val.byteLength;\n    return fixedSizeUint8Array(len, true);\n  },\n  description: \"Uint8Array\"\n};\n/**\n * Maps collections beet exports to metadata which describes in which package it\n * is defined as well as which TypeScript type is used to represent the\n * deserialized value in JavaScript.\n *\n * @category TypeDefinition\n */\nexports.collectionsTypeMap = {\n  Array: {\n    beet: 'array',\n    isFixable: true,\n    sourcePack: types_2.BEET_PACKAGE,\n    ts: 'Array',\n    arg: types_1.BEET_TYPE_ARG_LEN\n  },\n  FixedSizeArray: {\n    beet: 'fixedSizeArray',\n    isFixable: false,\n    sourcePack: types_2.BEET_PACKAGE,\n    ts: 'Array',\n    arg: types_1.BEET_TYPE_ARG_LEN\n  },\n  UniformFixedSizeArray: {\n    beet: 'uniformFixedSizeArray',\n    isFixable: false,\n    sourcePack: types_2.BEET_PACKAGE,\n    ts: 'Array',\n    arg: types_1.BEET_TYPE_ARG_LEN\n  },\n  Buffer: {\n    beet: 'fixedSizeBuffer',\n    isFixable: false,\n    sourcePack: types_2.BEET_PACKAGE,\n    ts: 'Buffer',\n    arg: types_1.BEET_TYPE_ARG_LEN\n  },\n  FixedSizeUint8Array: {\n    beet: 'fixedSizeUint8Array',\n    isFixable: false,\n    sourcePack: types_2.BEET_PACKAGE,\n    ts: 'Uint8Array',\n    arg: types_1.BEET_TYPE_ARG_LEN\n  },\n  Uint8Array: {\n    beet: 'uint8Array',\n    isFixable: true,\n    sourcePack: types_2.BEET_PACKAGE,\n    ts: 'Uint8Array',\n    arg: types_1.BEET_TYPE_ARG_LEN\n  }\n};","map":{"version":3,"mappings":"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","names":["uniformFixedSizeArray","element","len","lenPrefix","arraySize","byteSize","write","buf","offset","value","assert_1","equal","length","numbers_1","i","read","size","arr","Array","elementByteSize","lenPrefixByteSize","description","exports","fixedSizeArray","elements","elementsByteSize","firstElement","cursor","array","toFixedFromData","cursorStart","fixedElements","fixedElement","toFixedFromValue","vals","isArray","elementsSize","fixedSizeBuffer","bytes","copy","slice","fixedSizeUint8Array","arrayBufferBeet","byteLength","valueBuf","Buffer","from","arrayBuffer","Uint8Array","val","beet","isFixable","sourcePack","types_2","ts","arg","types_1","FixedSizeArray","UniformFixedSizeArray","FixedSizeUint8Array"],"sources":["../../../../src/beets/collections.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script","externalDependencies":[]}