{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"/Users/ivan/Metadata/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\").default;\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createAssociatedTokenAccountIdempotent = void 0;\nvar web3_js_1 = require(\"@solana/web3.js\");\nvar constants_js_1 = require(\"../constants.js\");\nvar associatedTokenAccount_js_1 = require(\"../instructions/associatedTokenAccount.js\");\nvar mint_js_1 = require(\"../state/mint.js\");\n/**\n * Create and initialize a new associated token account\n * The instruction will succeed even if the associated token account already exists\n *\n * @param connection               Connection to use\n * @param payer                    Payer of the transaction and initialization fees\n * @param mint                     Mint for the account\n * @param owner                    Owner of the new account\n * @param confirmOptions           Options for confirming the transaction\n * @param programId                SPL Token program account\n * @param associatedTokenProgramId SPL Associated Token program account\n *\n * @return Address of the new or existing associated token account\n */\nfunction createAssociatedTokenAccountIdempotent(connection, payer, mint, owner, confirmOptions) {\n  var programId = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : constants_js_1.TOKEN_PROGRAM_ID;\n  var associatedTokenProgramId = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : constants_js_1.ASSOCIATED_TOKEN_PROGRAM_ID;\n  return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n    var associatedToken, transaction;\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return (0, mint_js_1.getAssociatedTokenAddress)(mint, owner, false, programId, associatedTokenProgramId);\n          case 2:\n            associatedToken = _context.sent;\n            transaction = new web3_js_1.Transaction().add((0, associatedTokenAccount_js_1.createAssociatedTokenAccountIdempotentInstruction)(payer.publicKey, associatedToken, owner, mint, programId, associatedTokenProgramId));\n            _context.next = 6;\n            return (0, web3_js_1.sendAndConfirmTransaction)(connection, transaction, [payer], confirmOptions);\n          case 6:\n            return _context.abrupt(\"return\", associatedToken);\n          case 7:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n}\nexports.createAssociatedTokenAccountIdempotent = createAssociatedTokenAccountIdempotent;","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;;;;;;AAcA,SAAsBA,sCAAsC,CACxDC,UAAsB,EACtBC,KAAa,EACbC,IAAe,EACfC,KAAgB,EAChBC,cAA+B,EAEuB;EAAA,IADtDC,SAAS,uEAAGC,+BAAgB;EAAA,IAC5BC,wBAAwB,uEAAGD,0CAA2B;;;;;;;;YAE9B,OAAM,uCAAyB,EAACJ,IAAI,EAAEC,KAAK,EAAE,KAAK,EAAEE,SAAS,EAAEE,wBAAwB,CAAC;UAAA;YAA1GC,eAAe;YAEfC,WAAW,GAAG,IAAIC,qBAAW,EAAE,CAACC,GAAG,CACrC,iFAAiD,EAC7CV,KAAK,CAACW,SAAS,EACfJ,eAAe,EACfL,KAAK,EACLD,IAAI,EACJG,SAAS,EACTE,wBAAwB,CAC3B,CACJ;YAAA;YAED,OAAM,uCAAyB,EAACP,UAAU,EAAES,WAAW,EAAE,CAACR,KAAK,CAAC,EAAEG,cAAc,CAAC;UAAA;YAAA,iCAE1EI,eAAe;UAAA;UAAA;YAAA;QAAA;MAAA;IAAA;EAAA,CACzB;;AAzBDK","names":["createAssociatedTokenAccountIdempotent","connection","payer","mint","owner","confirmOptions","programId","constants_js_1","associatedTokenProgramId","associatedToken","transaction","web3_js_1","add","publicKey","exports"],"sources":["/Users/ivan/Metadata/node_modules/@solana/spl-token/src/actions/createAssociatedTokenAccountIdempotent.ts"],"sourcesContent":["import type { ConfirmOptions, Connection, PublicKey, Signer } from '@solana/web3.js';\nimport { sendAndConfirmTransaction, Transaction } from '@solana/web3.js';\nimport { ASSOCIATED_TOKEN_PROGRAM_ID, TOKEN_PROGRAM_ID } from '../constants.js';\nimport { createAssociatedTokenAccountIdempotentInstruction } from '../instructions/associatedTokenAccount.js';\nimport { getAssociatedTokenAddress } from '../state/mint.js';\n\n/**\n * Create and initialize a new associated token account\n * The instruction will succeed even if the associated token account already exists\n *\n * @param connection               Connection to use\n * @param payer                    Payer of the transaction and initialization fees\n * @param mint                     Mint for the account\n * @param owner                    Owner of the new account\n * @param confirmOptions           Options for confirming the transaction\n * @param programId                SPL Token program account\n * @param associatedTokenProgramId SPL Associated Token program account\n *\n * @return Address of the new or existing associated token account\n */\nexport async function createAssociatedTokenAccountIdempotent(\n    connection: Connection,\n    payer: Signer,\n    mint: PublicKey,\n    owner: PublicKey,\n    confirmOptions?: ConfirmOptions,\n    programId = TOKEN_PROGRAM_ID,\n    associatedTokenProgramId = ASSOCIATED_TOKEN_PROGRAM_ID\n): Promise<PublicKey> {\n    const associatedToken = await getAssociatedTokenAddress(mint, owner, false, programId, associatedTokenProgramId);\n\n    const transaction = new Transaction().add(\n        createAssociatedTokenAccountIdempotentInstruction(\n            payer.publicKey,\n            associatedToken,\n            owner,\n            mint,\n            programId,\n            associatedTokenProgramId\n        )\n    );\n\n    await sendAndConfirmTransaction(connection, transaction, [payer], confirmOptions);\n\n    return associatedToken;\n}\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}