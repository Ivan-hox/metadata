{"ast":null,"code":"import _classCallCheck from \"/Users/ivan/Metadata/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/ivan/Metadata/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/Users/ivan/Metadata/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/ivan/Metadata/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport assert from './_assert.js';\nimport { Hash, toBytes } from './utils.js';\n// HMAC (RFC 2104)\nvar HMAC = /*#__PURE__*/function (_Hash) {\n  _inherits(HMAC, _Hash);\n  var _super = _createSuper(HMAC);\n  function HMAC(hash, _key) {\n    var _this;\n    _classCallCheck(this, HMAC);\n    _this = _super.call(this);\n    _this.finished = false;\n    _this.destroyed = false;\n    assert.hash(hash);\n    var key = toBytes(_key);\n    _this.iHash = hash.create();\n    if (typeof _this.iHash.update !== 'function') throw new TypeError('Expected instance of class which extends utils.Hash');\n    _this.blockLen = _this.iHash.blockLen;\n    _this.outputLen = _this.iHash.outputLen;\n    var blockLen = _this.blockLen;\n    var pad = new Uint8Array(blockLen);\n    // blockLen can be bigger than outputLen\n    pad.set(key.length > blockLen ? hash.create().update(key).digest() : key);\n    for (var i = 0; i < pad.length; i++) {\n      pad[i] ^= 0x36;\n    }\n    _this.iHash.update(pad);\n    // By doing update (processing of first block) of outer hash here we can re-use it between multiple calls via clone\n    _this.oHash = hash.create();\n    // Undo internal XOR && apply outer XOR\n    for (var _i = 0; _i < pad.length; _i++) {\n      pad[_i] ^= 0x36 ^ 0x5c;\n    }\n    _this.oHash.update(pad);\n    pad.fill(0);\n    return _this;\n  }\n  _createClass(HMAC, [{\n    key: \"update\",\n    value: function update(buf) {\n      assert.exists(this);\n      this.iHash.update(buf);\n      return this;\n    }\n  }, {\n    key: \"digestInto\",\n    value: function digestInto(out) {\n      assert.exists(this);\n      assert.bytes(out, this.outputLen);\n      this.finished = true;\n      this.iHash.digestInto(out);\n      this.oHash.update(out);\n      this.oHash.digestInto(out);\n      this.destroy();\n    }\n  }, {\n    key: \"digest\",\n    value: function digest() {\n      var out = new Uint8Array(this.oHash.outputLen);\n      this.digestInto(out);\n      return out;\n    }\n  }, {\n    key: \"_cloneInto\",\n    value: function _cloneInto(to) {\n      // Create new instance without calling constructor since key already in state and we don't know it.\n      to || (to = Object.create(Object.getPrototypeOf(this), {}));\n      var oHash = this.oHash,\n        iHash = this.iHash,\n        finished = this.finished,\n        destroyed = this.destroyed,\n        blockLen = this.blockLen,\n        outputLen = this.outputLen;\n      to = to;\n      to.finished = finished;\n      to.destroyed = destroyed;\n      to.blockLen = blockLen;\n      to.outputLen = outputLen;\n      to.oHash = oHash._cloneInto(to.oHash);\n      to.iHash = iHash._cloneInto(to.iHash);\n      return to;\n    }\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      this.destroyed = true;\n      this.oHash.destroy();\n      this.iHash.destroy();\n    }\n  }]);\n  return HMAC;\n}(Hash);\n/**\n * HMAC: RFC2104 message authentication code.\n * @param hash - function that would be used e.g. sha256\n * @param key - message key\n * @param message - message data\n */\nexport var hmac = function hmac(hash, key, message) {\n  return new HMAC(hash, key).update(message).digest();\n};\nhmac.create = function (hash, key) {\n  return new HMAC(hash, key);\n};","map":{"version":3,"names":["assert","Hash","toBytes","HMAC","hash","_key","finished","destroyed","key","iHash","create","update","TypeError","blockLen","outputLen","pad","Uint8Array","set","length","digest","i","oHash","fill","buf","exists","out","bytes","digestInto","destroy","to","Object","getPrototypeOf","_cloneInto","hmac","message"],"sources":["/Users/ivan/Metadata/node_modules/@noble/hashes/esm/hmac.js"],"sourcesContent":["import assert from './_assert.js';\nimport { Hash, toBytes } from './utils.js';\n// HMAC (RFC 2104)\nclass HMAC extends Hash {\n    constructor(hash, _key) {\n        super();\n        this.finished = false;\n        this.destroyed = false;\n        assert.hash(hash);\n        const key = toBytes(_key);\n        this.iHash = hash.create();\n        if (typeof this.iHash.update !== 'function')\n            throw new TypeError('Expected instance of class which extends utils.Hash');\n        this.blockLen = this.iHash.blockLen;\n        this.outputLen = this.iHash.outputLen;\n        const blockLen = this.blockLen;\n        const pad = new Uint8Array(blockLen);\n        // blockLen can be bigger than outputLen\n        pad.set(key.length > blockLen ? hash.create().update(key).digest() : key);\n        for (let i = 0; i < pad.length; i++)\n            pad[i] ^= 0x36;\n        this.iHash.update(pad);\n        // By doing update (processing of first block) of outer hash here we can re-use it between multiple calls via clone\n        this.oHash = hash.create();\n        // Undo internal XOR && apply outer XOR\n        for (let i = 0; i < pad.length; i++)\n            pad[i] ^= 0x36 ^ 0x5c;\n        this.oHash.update(pad);\n        pad.fill(0);\n    }\n    update(buf) {\n        assert.exists(this);\n        this.iHash.update(buf);\n        return this;\n    }\n    digestInto(out) {\n        assert.exists(this);\n        assert.bytes(out, this.outputLen);\n        this.finished = true;\n        this.iHash.digestInto(out);\n        this.oHash.update(out);\n        this.oHash.digestInto(out);\n        this.destroy();\n    }\n    digest() {\n        const out = new Uint8Array(this.oHash.outputLen);\n        this.digestInto(out);\n        return out;\n    }\n    _cloneInto(to) {\n        // Create new instance without calling constructor since key already in state and we don't know it.\n        to || (to = Object.create(Object.getPrototypeOf(this), {}));\n        const { oHash, iHash, finished, destroyed, blockLen, outputLen } = this;\n        to = to;\n        to.finished = finished;\n        to.destroyed = destroyed;\n        to.blockLen = blockLen;\n        to.outputLen = outputLen;\n        to.oHash = oHash._cloneInto(to.oHash);\n        to.iHash = iHash._cloneInto(to.iHash);\n        return to;\n    }\n    destroy() {\n        this.destroyed = true;\n        this.oHash.destroy();\n        this.iHash.destroy();\n    }\n}\n/**\n * HMAC: RFC2104 message authentication code.\n * @param hash - function that would be used e.g. sha256\n * @param key - message key\n * @param message - message data\n */\nexport const hmac = (hash, key, message) => new HMAC(hash, key).update(message).digest();\nhmac.create = (hash, key) => new HMAC(hash, key);\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}