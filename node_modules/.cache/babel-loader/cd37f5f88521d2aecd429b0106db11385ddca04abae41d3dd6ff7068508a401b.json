{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getTransferFeeAmount = exports.getTransferFeeConfig = exports.TRANSFER_FEE_AMOUNT_SIZE = exports.TransferFeeAmountLayout = exports.TRANSFER_FEE_CONFIG_SIZE = exports.TransferFeeConfigLayout = exports.transferFeeLayout = exports.ONE_IN_BASIS_POINTS = exports.MAX_FEE_BASIS_POINTS = void 0;\nvar buffer_layout_1 = require(\"@solana/buffer-layout\");\nvar buffer_layout_utils_1 = require(\"@solana/buffer-layout-utils\");\nvar extensionType_js_1 = require(\"../extensionType.js\");\nexports.MAX_FEE_BASIS_POINTS = 10000;\nexports.ONE_IN_BASIS_POINTS = exports.MAX_FEE_BASIS_POINTS;\n/** Buffer layout for de/serializing a transfer fee */\nfunction transferFeeLayout(property) {\n  return (0, buffer_layout_1.struct)([(0, buffer_layout_utils_1.u64)('epoch'), (0, buffer_layout_utils_1.u64)('maximumFee'), (0, buffer_layout_1.u16)('transferFeeBasisPoints')], property);\n}\nexports.transferFeeLayout = transferFeeLayout;\n/** Buffer layout for de/serializing a transfer fee config extension */\nexports.TransferFeeConfigLayout = (0, buffer_layout_1.struct)([(0, buffer_layout_utils_1.publicKey)('transferFeeConfigAuthority'), (0, buffer_layout_utils_1.publicKey)('withdrawWithheldAuthority'), (0, buffer_layout_utils_1.u64)('withheldAmount'), transferFeeLayout('olderTransferFee'), transferFeeLayout('newerTransferFee')]);\nexports.TRANSFER_FEE_CONFIG_SIZE = exports.TransferFeeConfigLayout.span;\n/** Buffer layout for de/serializing */\nexports.TransferFeeAmountLayout = (0, buffer_layout_1.struct)([(0, buffer_layout_utils_1.u64)('withheldAmount')]);\nexports.TRANSFER_FEE_AMOUNT_SIZE = exports.TransferFeeAmountLayout.span;\nfunction getTransferFeeConfig(mint) {\n  var extensionData = (0, extensionType_js_1.getExtensionData)(extensionType_js_1.ExtensionType.TransferFeeConfig, mint.tlvData);\n  if (extensionData !== null) {\n    return exports.TransferFeeConfigLayout.decode(extensionData);\n  } else {\n    return null;\n  }\n}\nexports.getTransferFeeConfig = getTransferFeeConfig;\nfunction getTransferFeeAmount(account) {\n  var extensionData = (0, extensionType_js_1.getExtensionData)(extensionType_js_1.ExtensionType.TransferFeeAmount, account.tlvData);\n  if (extensionData !== null) {\n    return exports.TransferFeeAmountLayout.decode(extensionData);\n  } else {\n    return null;\n  }\n}\nexports.getTransferFeeAmount = getTransferFeeAmount;","map":{"version":3,"mappings":";;;;;;AACA;AACA;AAIA;AAEaA,4BAAoB,GAAG,KAAM;AAC7BA,2BAAmB,GAAWA,4BAAyC;AA6BpF;AACA,SAAgBC,iBAAiB,CAACC,QAAiB;EAC/C,OAAO,0BAAM,EAAc,CAAC,6BAAG,EAAC,OAAO,CAAC,EAAE,6BAAG,EAAC,YAAY,CAAC,EAAE,uBAAG,EAAC,wBAAwB,CAAC,CAAC,EAAEA,QAAQ,CAAC;AAC1G;AAFAF;AAIA;AACaA,+BAAuB,GAAG,0BAAM,EAAoB,CAC7D,mCAAS,EAAC,4BAA4B,CAAC,EACvC,mCAAS,EAAC,2BAA2B,CAAC,EACtC,6BAAG,EAAC,gBAAgB,CAAC,EACrBC,iBAAiB,CAAC,kBAAkB,CAAC,EACrCA,iBAAiB,CAAC,kBAAkB,CAAC,CACxC,CAAC;AAEWD,gCAAwB,GAAGA,+BAAuB,CAACG,IAAI;AAOpE;AACaH,+BAAuB,GAAG,0BAAM,EAAoB,CAAC,6BAAG,EAAC,gBAAgB,CAAC,CAAC,CAAC;AAC5EA,gCAAwB,GAAGA,+BAAuB,CAACG,IAAI;AAEpE,SAAgBC,oBAAoB,CAACC,IAAU;EAC3C,IAAMC,aAAa,GAAG,uCAAgB,EAACC,gCAAa,CAACC,iBAAiB,EAAEH,IAAI,CAACI,OAAO,CAAC;EACrF,IAAIH,aAAa,KAAK,IAAI,EAAE;IACxB,OAAON,+BAAuB,CAACU,MAAM,CAACJ,aAAa,CAAC;GACvD,MAAM;IACH,OAAO,IAAI;;AAEnB;AAPAN;AASA,SAAgBW,oBAAoB,CAACC,OAAgB;EACjD,IAAMN,aAAa,GAAG,uCAAgB,EAACC,gCAAa,CAACM,iBAAiB,EAAED,OAAO,CAACH,OAAO,CAAC;EACxF,IAAIH,aAAa,KAAK,IAAI,EAAE;IACxB,OAAON,+BAAuB,CAACU,MAAM,CAACJ,aAAa,CAAC;GACvD,MAAM;IACH,OAAO,IAAI;;AAEnB;AAPAN","names":["exports","transferFeeLayout","property","span","getTransferFeeConfig","mint","extensionData","extensionType_js_1","TransferFeeConfig","tlvData","decode","getTransferFeeAmount","account","TransferFeeAmount"],"sources":["/Users/ivan/Metadata/node_modules/@solana/spl-token/src/extensions/transferFee/state.ts"],"sourcesContent":["import type { Layout } from '@solana/buffer-layout';\nimport { struct, u16 } from '@solana/buffer-layout';\nimport { publicKey, u64 } from '@solana/buffer-layout-utils';\nimport type { PublicKey } from '@solana/web3.js';\nimport type { Account } from '../../state/account.js';\nimport type { Mint } from '../../state/mint.js';\nimport { ExtensionType, getExtensionData } from '../extensionType.js';\n\nexport const MAX_FEE_BASIS_POINTS = 10_000;\nexport const ONE_IN_BASIS_POINTS: bigint = MAX_FEE_BASIS_POINTS as unknown as bigint;\n\n/** TransferFeeConfig as stored by the program */\nexport interface TransferFee {\n    /** First epoch where the transfer fee takes effect */\n    epoch: bigint;\n    /** Maximum fee assessed on transfers, expressed as an amount of tokens */\n    maximumFee: bigint;\n    /**\n     * Amount of transfer collected as fees, expressed as basis points of the\n     * transfer amount, ie. increments of 0.01%\n     */\n    transferFeeBasisPoints: number;\n}\n\n/** Transfer fee extension data for mints. */\nexport interface TransferFeeConfig {\n    /** Optional authority to set the fee */\n    transferFeeConfigAuthority: PublicKey;\n    /** Withdraw from mint instructions must be signed by this key */\n    withdrawWithheldAuthority: PublicKey;\n    /** Withheld transfer fee tokens that have been moved to the mint for withdrawal */\n    withheldAmount: bigint;\n    /** Older transfer fee, used if the current epoch < newerTransferFee.epoch */\n    olderTransferFee: TransferFee;\n    /** Newer transfer fee, used if the current epoch >= newerTransferFee.epoch */\n    newerTransferFee: TransferFee;\n}\n\n/** Buffer layout for de/serializing a transfer fee */\nexport function transferFeeLayout(property?: string): Layout<TransferFee> {\n    return struct<TransferFee>([u64('epoch'), u64('maximumFee'), u16('transferFeeBasisPoints')], property);\n}\n\n/** Buffer layout for de/serializing a transfer fee config extension */\nexport const TransferFeeConfigLayout = struct<TransferFeeConfig>([\n    publicKey('transferFeeConfigAuthority'),\n    publicKey('withdrawWithheldAuthority'),\n    u64('withheldAmount'),\n    transferFeeLayout('olderTransferFee'),\n    transferFeeLayout('newerTransferFee'),\n]);\n\nexport const TRANSFER_FEE_CONFIG_SIZE = TransferFeeConfigLayout.span;\n\n/** Transfer fee amount data for accounts. */\nexport interface TransferFeeAmount {\n    /** Withheld transfer fee tokens that can be claimed by the fee authority */\n    withheldAmount: bigint;\n}\n/** Buffer layout for de/serializing */\nexport const TransferFeeAmountLayout = struct<TransferFeeAmount>([u64('withheldAmount')]);\nexport const TRANSFER_FEE_AMOUNT_SIZE = TransferFeeAmountLayout.span;\n\nexport function getTransferFeeConfig(mint: Mint): TransferFeeConfig | null {\n    const extensionData = getExtensionData(ExtensionType.TransferFeeConfig, mint.tlvData);\n    if (extensionData !== null) {\n        return TransferFeeConfigLayout.decode(extensionData);\n    } else {\n        return null;\n    }\n}\n\nexport function getTransferFeeAmount(account: Account): TransferFeeAmount | null {\n    const extensionData = getExtensionData(ExtensionType.TransferFeeAmount, account.tlvData);\n    if (extensionData !== null) {\n        return TransferFeeAmountLayout.decode(extensionData);\n    } else {\n        return null;\n    }\n}\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}