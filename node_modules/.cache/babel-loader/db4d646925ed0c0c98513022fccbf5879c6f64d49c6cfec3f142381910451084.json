{"ast":null,"code":"\"use strict\";\n\nvar _slicedToArray = require(\"/Users/ivan/Metadata/node_modules/@babel/runtime/helpers/slicedToArray.js\").default;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.decodeSyncNativeInstructionUnchecked = exports.decodeSyncNativeInstruction = exports.createSyncNativeInstruction = exports.syncNativeInstructionData = void 0;\nvar buffer_layout_1 = require(\"@solana/buffer-layout\");\nvar web3_js_1 = require(\"@solana/web3.js\");\nvar constants_js_1 = require(\"../constants.js\");\nvar errors_js_1 = require(\"../errors.js\");\nvar types_js_1 = require(\"./types.js\");\n/** TODO: docs */\nexports.syncNativeInstructionData = (0, buffer_layout_1.struct)([(0, buffer_layout_1.u8)('instruction')]);\n/**\n * Construct a SyncNative instruction\n *\n * @param account   Native account to sync lamports from\n * @param programId SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\nfunction createSyncNativeInstruction(account) {\n  var programId = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : constants_js_1.TOKEN_PROGRAM_ID;\n  var keys = [{\n    pubkey: account,\n    isSigner: false,\n    isWritable: true\n  }];\n  var data = Buffer.alloc(exports.syncNativeInstructionData.span);\n  exports.syncNativeInstructionData.encode({\n    instruction: types_js_1.TokenInstruction.SyncNative\n  }, data);\n  return new web3_js_1.TransactionInstruction({\n    keys: keys,\n    programId: programId,\n    data: data\n  });\n}\nexports.createSyncNativeInstruction = createSyncNativeInstruction;\n/**\n * Decode a SyncNative instruction and validate it\n *\n * @param instruction Transaction instruction to decode\n * @param programId   SPL Token program account\n *\n * @return Decoded, valid instruction\n */\nfunction decodeSyncNativeInstruction(instruction) {\n  var programId = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : constants_js_1.TOKEN_PROGRAM_ID;\n  if (!instruction.programId.equals(programId)) throw new errors_js_1.TokenInvalidInstructionProgramError();\n  if (instruction.data.length !== exports.syncNativeInstructionData.span) throw new errors_js_1.TokenInvalidInstructionDataError();\n  var _decodeSyncNativeInst = decodeSyncNativeInstructionUnchecked(instruction),\n    account = _decodeSyncNativeInst.keys.account,\n    data = _decodeSyncNativeInst.data;\n  if (data.instruction !== types_js_1.TokenInstruction.SyncNative) throw new errors_js_1.TokenInvalidInstructionTypeError();\n  if (!account) throw new errors_js_1.TokenInvalidInstructionKeysError();\n  // TODO: key checks?\n  return {\n    programId: programId,\n    keys: {\n      account: account\n    },\n    data: data\n  };\n}\nexports.decodeSyncNativeInstruction = decodeSyncNativeInstruction;\n/**\n * Decode a SyncNative instruction without validating it\n *\n * @param instruction Transaction instruction to decode\n *\n * @return Decoded, non-validated instruction\n */\nfunction decodeSyncNativeInstructionUnchecked(_ref) {\n  var programId = _ref.programId,\n    _ref$keys = _slicedToArray(_ref.keys, 1),\n    account = _ref$keys[0],\n    data = _ref.data;\n  return {\n    programId: programId,\n    keys: {\n      account: account\n    },\n    data: exports.syncNativeInstructionData.decode(data)\n  };\n}\nexports.decodeSyncNativeInstructionUnchecked = decodeSyncNativeInstructionUnchecked;","map":{"version":3,"mappings":";;;;;;;AAAA;AAEA;AACA;AACA;AAMA;AAOA;AACaA,iCAAyB,GAAG,0BAAM,EAA4B,CAAC,sBAAE,EAAC,aAAa,CAAC,CAAC,CAAC;AAE/F;;;;;;;;AAQA,SAAgBC,2BAA2B,CAACC,OAAkB,EAA8B;EAAA,IAA5BC,SAAS,uEAAGC,+BAAgB;EACxF,IAAMC,IAAI,GAAG,CAAC;IAAEC,MAAM,EAAEJ,OAAO;IAAEK,QAAQ,EAAE,KAAK;IAAEC,UAAU,EAAE;EAAI,CAAE,CAAC;EAErE,IAAMC,IAAI,GAAGC,MAAM,CAACC,KAAK,CAACX,iCAAyB,CAACY,IAAI,CAAC;EACzDZ,iCAAyB,CAACa,MAAM,CAAC;IAAEC,WAAW,EAAEC,2BAAgB,CAACC;EAAU,CAAE,EAAEP,IAAI,CAAC;EAEpF,OAAO,IAAIQ,gCAAsB,CAAC;IAAEZ,IAAI,EAAJA,IAAI;IAAEF,SAAS,EAATA,SAAS;IAAEM,IAAI,EAAJA;EAAI,CAAE,CAAC;AAChE;AAPAT;AAoBA;;;;;;;;AAQA,SAAgBkB,2BAA2B,CACvCJ,WAAmC,EACP;EAAA,IAA5BX,SAAS,uEAAGC,+BAAgB;EAE5B,IAAI,CAACU,WAAW,CAACX,SAAS,CAACgB,MAAM,CAAChB,SAAS,CAAC,EAAE,MAAM,IAAIiB,+CAAmC,EAAE;EAC7F,IAAIN,WAAW,CAACL,IAAI,CAACY,MAAM,KAAKrB,iCAAyB,CAACY,IAAI,EAAE,MAAM,IAAIQ,4CAAgC,EAAE;EAE5G,4BAGIE,oCAAoC,CAACR,WAAW,CAAC;IAFzCZ,OAAO,yBAAfG,IAAI,CAAIH,OAAO;IACfO,IAAI,yBAAJA,IAAI;EAER,IAAIA,IAAI,CAACK,WAAW,KAAKC,2BAAgB,CAACC,UAAU,EAAE,MAAM,IAAII,4CAAgC,EAAE;EAClG,IAAI,CAAClB,OAAO,EAAE,MAAM,IAAIkB,4CAAgC,EAAE;EAE1D;EAEA,OAAO;IACHjB,SAAS,EAATA,SAAS;IACTE,IAAI,EAAE;MACFH,OAAO,EAAPA;KACH;IACDO,IAAI,EAAJA;GACH;AACL;AAvBAT;AAoCA;;;;;;;AAOA,SAAgBsB,oCAAoC,OAI3B;EAAA,IAHrBnB,SAAS,QAATA,SAAS;IAAA,gCACTE,IAAI;IAAGH,OAAO;IACdO,IAAI,QAAJA,IAAI;EAEJ,OAAO;IACHN,SAAS,EAATA,SAAS;IACTE,IAAI,EAAE;MACFH,OAAO,EAAPA;KACH;IACDO,IAAI,EAAET,iCAAyB,CAACuB,MAAM,CAACd,IAAI;GAC9C;AACL;AAZAT","names":["exports","createSyncNativeInstruction","account","programId","constants_js_1","keys","pubkey","isSigner","isWritable","data","Buffer","alloc","span","encode","instruction","types_js_1","SyncNative","web3_js_1","decodeSyncNativeInstruction","equals","errors_js_1","length","decodeSyncNativeInstructionUnchecked","decode"],"sources":["/Users/ivan/Metadata/node_modules/@solana/spl-token/src/instructions/syncNative.ts"],"sourcesContent":["import { struct, u8 } from '@solana/buffer-layout';\nimport type { AccountMeta, PublicKey } from '@solana/web3.js';\nimport { TransactionInstruction } from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID } from '../constants.js';\nimport {\n    TokenInvalidInstructionDataError,\n    TokenInvalidInstructionKeysError,\n    TokenInvalidInstructionProgramError,\n    TokenInvalidInstructionTypeError,\n} from '../errors.js';\nimport { TokenInstruction } from './types.js';\n\n/** TODO: docs */\nexport interface SyncNativeInstructionData {\n    instruction: TokenInstruction.SyncNative;\n}\n\n/** TODO: docs */\nexport const syncNativeInstructionData = struct<SyncNativeInstructionData>([u8('instruction')]);\n\n/**\n * Construct a SyncNative instruction\n *\n * @param account   Native account to sync lamports from\n * @param programId SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\nexport function createSyncNativeInstruction(account: PublicKey, programId = TOKEN_PROGRAM_ID): TransactionInstruction {\n    const keys = [{ pubkey: account, isSigner: false, isWritable: true }];\n\n    const data = Buffer.alloc(syncNativeInstructionData.span);\n    syncNativeInstructionData.encode({ instruction: TokenInstruction.SyncNative }, data);\n\n    return new TransactionInstruction({ keys, programId, data });\n}\n\n/** A decoded, valid SyncNative instruction */\nexport interface DecodedSyncNativeInstruction {\n    programId: PublicKey;\n    keys: {\n        account: AccountMeta;\n    };\n    data: {\n        instruction: TokenInstruction.SyncNative;\n    };\n}\n\n/**\n * Decode a SyncNative instruction and validate it\n *\n * @param instruction Transaction instruction to decode\n * @param programId   SPL Token program account\n *\n * @return Decoded, valid instruction\n */\nexport function decodeSyncNativeInstruction(\n    instruction: TransactionInstruction,\n    programId = TOKEN_PROGRAM_ID\n): DecodedSyncNativeInstruction {\n    if (!instruction.programId.equals(programId)) throw new TokenInvalidInstructionProgramError();\n    if (instruction.data.length !== syncNativeInstructionData.span) throw new TokenInvalidInstructionDataError();\n\n    const {\n        keys: { account },\n        data,\n    } = decodeSyncNativeInstructionUnchecked(instruction);\n    if (data.instruction !== TokenInstruction.SyncNative) throw new TokenInvalidInstructionTypeError();\n    if (!account) throw new TokenInvalidInstructionKeysError();\n\n    // TODO: key checks?\n\n    return {\n        programId,\n        keys: {\n            account,\n        },\n        data,\n    };\n}\n\n/** A decoded, non-validated SyncNative instruction */\nexport interface DecodedSyncNativeInstructionUnchecked {\n    programId: PublicKey;\n    keys: {\n        account: AccountMeta | undefined;\n    };\n    data: {\n        instruction: number;\n    };\n}\n\n/**\n * Decode a SyncNative instruction without validating it\n *\n * @param instruction Transaction instruction to decode\n *\n * @return Decoded, non-validated instruction\n */\nexport function decodeSyncNativeInstructionUnchecked({\n    programId,\n    keys: [account],\n    data,\n}: TransactionInstruction): DecodedSyncNativeInstructionUnchecked {\n    return {\n        programId,\n        keys: {\n            account,\n        },\n        data: syncNativeInstructionData.decode(data),\n    };\n}\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}