{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"/Users/ivan/Metadata/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\").default;\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createMultisig = void 0;\nvar web3_js_1 = require(\"@solana/web3.js\");\nvar constants_js_1 = require(\"../constants.js\");\nvar initializeMultisig_js_1 = require(\"../instructions/initializeMultisig.js\");\nvar multisig_js_1 = require(\"../state/multisig.js\");\n/**\n * Create and initialize a new multisig\n *\n * @param connection     Connection to use\n * @param payer          Payer of the transaction and initialization fees\n * @param signers        Full set of signers\n * @param m              Number of required signatures\n * @param keypair        Optional keypair, defaulting to a new random one\n * @param confirmOptions Options for confirming the transaction\n * @param programId      SPL Token program account\n *\n * @return Address of the new multisig\n */\nfunction createMultisig(connection, payer, signers, m) {\n  var keypair = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : web3_js_1.Keypair.generate();\n  var confirmOptions = arguments.length > 5 ? arguments[5] : undefined;\n  var programId = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : constants_js_1.TOKEN_PROGRAM_ID;\n  return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n    var lamports, transaction;\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return (0, multisig_js_1.getMinimumBalanceForRentExemptMultisig)(connection);\n          case 2:\n            lamports = _context.sent;\n            transaction = new web3_js_1.Transaction().add(web3_js_1.SystemProgram.createAccount({\n              fromPubkey: payer.publicKey,\n              newAccountPubkey: keypair.publicKey,\n              space: multisig_js_1.MULTISIG_SIZE,\n              lamports: lamports,\n              programId: programId\n            }), (0, initializeMultisig_js_1.createInitializeMultisigInstruction)(keypair.publicKey, signers, m, programId));\n            _context.next = 6;\n            return (0, web3_js_1.sendAndConfirmTransaction)(connection, transaction, [payer, keypair], confirmOptions);\n          case 6:\n            return _context.abrupt(\"return\", keypair.publicKey);\n          case 7:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n}\nexports.createMultisig = createMultisig;","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;;;;;AAaA,SAAsBA,cAAc,CAChCC,UAAsB,EACtBC,KAAa,EACbC,OAAoB,EACpBC,CAAS,EAGmB;EAAA,IAF5BC,OAAO,uEAAGC,iBAAO,CAACC,QAAQ,EAAE;EAAA,IAC5BC,cAA+B;EAAA,IAC/BC,SAAS,uEAAGC,+BAAgB;;;;;;;;YAEX,OAAM,wDAAsC,EAACT,UAAU,CAAC;UAAA;YAAnEU,QAAQ;YAERC,WAAW,GAAG,IAAIN,qBAAW,EAAE,CAACO,GAAG,CACrCP,uBAAa,CAACQ,aAAa,CAAC;cACxBC,UAAU,EAAEb,KAAK,CAACc,SAAS;cAC3BC,gBAAgB,EAAEZ,OAAO,CAACW,SAAS;cACnCE,KAAK,EAAEC,2BAAa;cACpBR,QAAQ,EAARA,QAAQ;cACRF,SAAS,EAATA;aACH,CAAC,EACF,+DAAmC,EAACJ,OAAO,CAACW,SAAS,EAAEb,OAAO,EAAEC,CAAC,EAAEK,SAAS,CAAC,CAChF;YAAA;YAED,OAAM,uCAAyB,EAACR,UAAU,EAAEW,WAAW,EAAE,CAACV,KAAK,EAAEG,OAAO,CAAC,EAAEG,cAAc,CAAC;UAAA;YAAA,iCAEnFH,OAAO,CAACW,SAAS;UAAA;UAAA;YAAA;QAAA;MAAA;IAAA;EAAA,CAC3B;;AAzBDI","names":["createMultisig","connection","payer","signers","m","keypair","web3_js_1","generate","confirmOptions","programId","constants_js_1","lamports","transaction","add","createAccount","fromPubkey","publicKey","newAccountPubkey","space","multisig_js_1","exports"],"sources":["/Users/ivan/Metadata/node_modules/@solana/spl-token/src/actions/createMultisig.ts"],"sourcesContent":["import type { ConfirmOptions, Connection, PublicKey, Signer } from '@solana/web3.js';\nimport { Keypair, sendAndConfirmTransaction, SystemProgram, Transaction } from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID } from '../constants.js';\nimport { createInitializeMultisigInstruction } from '../instructions/initializeMultisig.js';\nimport { getMinimumBalanceForRentExemptMultisig, MULTISIG_SIZE } from '../state/multisig.js';\n\n/**\n * Create and initialize a new multisig\n *\n * @param connection     Connection to use\n * @param payer          Payer of the transaction and initialization fees\n * @param signers        Full set of signers\n * @param m              Number of required signatures\n * @param keypair        Optional keypair, defaulting to a new random one\n * @param confirmOptions Options for confirming the transaction\n * @param programId      SPL Token program account\n *\n * @return Address of the new multisig\n */\nexport async function createMultisig(\n    connection: Connection,\n    payer: Signer,\n    signers: PublicKey[],\n    m: number,\n    keypair = Keypair.generate(),\n    confirmOptions?: ConfirmOptions,\n    programId = TOKEN_PROGRAM_ID\n): Promise<PublicKey> {\n    const lamports = await getMinimumBalanceForRentExemptMultisig(connection);\n\n    const transaction = new Transaction().add(\n        SystemProgram.createAccount({\n            fromPubkey: payer.publicKey,\n            newAccountPubkey: keypair.publicKey,\n            space: MULTISIG_SIZE,\n            lamports,\n            programId,\n        }),\n        createInitializeMultisigInstruction(keypair.publicKey, signers, m, programId)\n    );\n\n    await sendAndConfirmTransaction(connection, transaction, [payer, keypair], confirmOptions);\n\n    return keypair.publicKey;\n}\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}