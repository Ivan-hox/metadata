{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"/Users/ivan/Metadata/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\").default;\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getMinimumBalanceForRentExemptMultisig = exports.unpackMultisig = exports.getMultisig = exports.MULTISIG_SIZE = exports.MultisigLayout = void 0;\nvar buffer_layout_1 = require(\"@solana/buffer-layout\");\nvar buffer_layout_utils_1 = require(\"@solana/buffer-layout-utils\");\nvar constants_js_1 = require(\"../constants.js\");\nvar errors_js_1 = require(\"../errors.js\");\n/** Buffer layout for de/serializing a multisig */\nexports.MultisigLayout = (0, buffer_layout_1.struct)([(0, buffer_layout_1.u8)('m'), (0, buffer_layout_1.u8)('n'), (0, buffer_layout_utils_1.bool)('isInitialized'), (0, buffer_layout_utils_1.publicKey)('signer1'), (0, buffer_layout_utils_1.publicKey)('signer2'), (0, buffer_layout_utils_1.publicKey)('signer3'), (0, buffer_layout_utils_1.publicKey)('signer4'), (0, buffer_layout_utils_1.publicKey)('signer5'), (0, buffer_layout_utils_1.publicKey)('signer6'), (0, buffer_layout_utils_1.publicKey)('signer7'), (0, buffer_layout_utils_1.publicKey)('signer8'), (0, buffer_layout_utils_1.publicKey)('signer9'), (0, buffer_layout_utils_1.publicKey)('signer10'), (0, buffer_layout_utils_1.publicKey)('signer11')]);\n/** Byte length of a multisig */\nexports.MULTISIG_SIZE = exports.MultisigLayout.span;\n/**\n * Retrieve information about a multisig\n *\n * @param connection Connection to use\n * @param address    Multisig account\n * @param commitment Desired level of commitment for querying the state\n * @param programId  SPL Token program account\n *\n * @return Multisig information\n */\nfunction getMultisig(connection, address, commitment) {\n  var programId = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : constants_js_1.TOKEN_PROGRAM_ID;\n  return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n    var info;\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return connection.getAccountInfo(address, commitment);\n          case 2:\n            info = _context.sent;\n            return _context.abrupt(\"return\", unpackMultisig(address, info, programId));\n          case 4:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n}\nexports.getMultisig = getMultisig;\n/**\n * Unpack a multisig\n *\n * @param address   Multisig account\n * @param info      Multisig account data\n * @param programId SPL Token program account\n *\n * @return Unpacked multisig\n */\nfunction unpackMultisig(address, info) {\n  var programId = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : constants_js_1.TOKEN_PROGRAM_ID;\n  if (!info) throw new errors_js_1.TokenAccountNotFoundError();\n  if (!info.owner.equals(programId)) throw new errors_js_1.TokenInvalidAccountOwnerError();\n  if (info.data.length != exports.MULTISIG_SIZE) throw new errors_js_1.TokenInvalidAccountSizeError();\n  var multisig = exports.MultisigLayout.decode(info.data);\n  return Object.assign({\n    address: address\n  }, multisig);\n}\nexports.unpackMultisig = unpackMultisig;\n/** Get the minimum lamport balance for a multisig to be rent exempt\n *\n * @param connection Connection to use\n * @param commitment Desired level of commitment for querying the state\n *\n * @return Amount of lamports required\n */\nfunction getMinimumBalanceForRentExemptMultisig(connection, commitment) {\n  return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n    return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return connection.getMinimumBalanceForRentExemption(exports.MULTISIG_SIZE, commitment);\n          case 2:\n            return _context2.abrupt(\"return\", _context2.sent);\n          case 3:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n}\nexports.getMinimumBalanceForRentExemptMultisig = getMinimumBalanceForRentExemptMultisig;","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AAEA;AACA;AA6BA;AACaA,sBAAc,GAAG,0BAAM,EAAc,CAC9C,sBAAE,EAAC,GAAG,CAAC,EACP,sBAAE,EAAC,GAAG,CAAC,EACP,8BAAI,EAAC,eAAe,CAAC,EACrB,mCAAS,EAAC,SAAS,CAAC,EACpB,mCAAS,EAAC,SAAS,CAAC,EACpB,mCAAS,EAAC,SAAS,CAAC,EACpB,mCAAS,EAAC,SAAS,CAAC,EACpB,mCAAS,EAAC,SAAS,CAAC,EACpB,mCAAS,EAAC,SAAS,CAAC,EACpB,mCAAS,EAAC,SAAS,CAAC,EACpB,mCAAS,EAAC,SAAS,CAAC,EACpB,mCAAS,EAAC,SAAS,CAAC,EACpB,mCAAS,EAAC,UAAU,CAAC,EACrB,mCAAS,EAAC,UAAU,CAAC,CACxB,CAAC;AAEF;AACaA,qBAAa,GAAGA,sBAAc,CAACC,IAAI;AAEhD;;;;;;;;;;AAUA,SAAsBC,WAAW,CAC7BC,UAAsB,EACtBC,OAAkB,EAClBC,UAAuB,EACK;EAAA,IAA5BC,SAAS,uEAAGC,+BAAgB;;;;;;;;YAEf,OAAMJ,UAAU,CAACK,cAAc,CAACJ,OAAO,EAAEC,UAAU,CAAC;UAAA;YAA3DI,IAAI;YAAA,iCACHC,cAAc,CAACN,OAAO,EAAEK,IAAI,EAAEH,SAAS,CAAC;UAAA;UAAA;YAAA;QAAA;MAAA;IAAA;EAAA,CAClD;;AARDN;AAUA;;;;;;;;;AASA,SAAgBU,cAAc,CAC1BN,OAAkB,EAClBK,IAAgC,EACJ;EAAA,IAA5BH,SAAS,uEAAGC,+BAAgB;EAE5B,IAAI,CAACE,IAAI,EAAE,MAAM,IAAIE,qCAAyB,EAAE;EAChD,IAAI,CAACF,IAAI,CAACG,KAAK,CAACC,MAAM,CAACP,SAAS,CAAC,EAAE,MAAM,IAAIK,yCAA6B,EAAE;EAC5E,IAAIF,IAAI,CAACK,IAAI,CAACC,MAAM,IAAIf,qBAAa,EAAE,MAAM,IAAIW,wCAA4B,EAAE;EAE/E,IAAMK,QAAQ,GAAGhB,sBAAc,CAACiB,MAAM,CAACR,IAAI,CAACK,IAAI,CAAC;EAEjD;IAASV,OAAO,EAAPA;EAAO,GAAKY,QAAQ;AACjC;AAZAhB;AAcA;;;;;;;AAOA,SAAsBkB,sCAAsC,CACxDf,UAAsB,EACtBE,UAAuB;;;;;;;YAEhB,OAAMF,UAAU,CAACgB,iCAAiC,CAACnB,qBAAa,EAAEK,UAAU,CAAC;UAAA;YAAA;UAAA;UAAA;YAAA;QAAA;MAAA;IAAA;EAAA,CACvF;;AALDL","names":["exports","span","getMultisig","connection","address","commitment","programId","constants_js_1","getAccountInfo","info","unpackMultisig","errors_js_1","owner","equals","data","length","multisig","decode","getMinimumBalanceForRentExemptMultisig","getMinimumBalanceForRentExemption"],"sources":["/Users/ivan/Metadata/node_modules/@solana/spl-token/src/state/multisig.ts"],"sourcesContent":["import { struct, u8 } from '@solana/buffer-layout';\nimport { bool, publicKey } from '@solana/buffer-layout-utils';\nimport type { AccountInfo, Commitment, Connection, PublicKey } from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID } from '../constants.js';\nimport { TokenAccountNotFoundError, TokenInvalidAccountOwnerError, TokenInvalidAccountSizeError } from '../errors.js';\n\n/** Information about a multisig */\nexport interface Multisig {\n    /** Address of the multisig */\n    address: PublicKey;\n    /** Number of signers required */\n    m: number;\n    /** Number of possible signers, corresponds to the number of `signers` that are valid */\n    n: number;\n    /** Is this mint initialized */\n    isInitialized: boolean;\n    /** Full set of signers, of which `n` are valid */\n    signer1: PublicKey;\n    signer2: PublicKey;\n    signer3: PublicKey;\n    signer4: PublicKey;\n    signer5: PublicKey;\n    signer6: PublicKey;\n    signer7: PublicKey;\n    signer8: PublicKey;\n    signer9: PublicKey;\n    signer10: PublicKey;\n    signer11: PublicKey;\n}\n\n/** Multisig as stored by the program */\nexport type RawMultisig = Omit<Multisig, 'address'>;\n\n/** Buffer layout for de/serializing a multisig */\nexport const MultisigLayout = struct<RawMultisig>([\n    u8('m'),\n    u8('n'),\n    bool('isInitialized'),\n    publicKey('signer1'),\n    publicKey('signer2'),\n    publicKey('signer3'),\n    publicKey('signer4'),\n    publicKey('signer5'),\n    publicKey('signer6'),\n    publicKey('signer7'),\n    publicKey('signer8'),\n    publicKey('signer9'),\n    publicKey('signer10'),\n    publicKey('signer11'),\n]);\n\n/** Byte length of a multisig */\nexport const MULTISIG_SIZE = MultisigLayout.span;\n\n/**\n * Retrieve information about a multisig\n *\n * @param connection Connection to use\n * @param address    Multisig account\n * @param commitment Desired level of commitment for querying the state\n * @param programId  SPL Token program account\n *\n * @return Multisig information\n */\nexport async function getMultisig(\n    connection: Connection,\n    address: PublicKey,\n    commitment?: Commitment,\n    programId = TOKEN_PROGRAM_ID\n): Promise<Multisig> {\n    const info = await connection.getAccountInfo(address, commitment);\n    return unpackMultisig(address, info, programId);\n}\n\n/**\n * Unpack a multisig\n *\n * @param address   Multisig account\n * @param info      Multisig account data\n * @param programId SPL Token program account\n *\n * @return Unpacked multisig\n */\nexport function unpackMultisig(\n    address: PublicKey,\n    info: AccountInfo<Buffer> | null,\n    programId = TOKEN_PROGRAM_ID\n): Multisig {\n    if (!info) throw new TokenAccountNotFoundError();\n    if (!info.owner.equals(programId)) throw new TokenInvalidAccountOwnerError();\n    if (info.data.length != MULTISIG_SIZE) throw new TokenInvalidAccountSizeError();\n\n    const multisig = MultisigLayout.decode(info.data);\n\n    return { address, ...multisig };\n}\n\n/** Get the minimum lamport balance for a multisig to be rent exempt\n *\n * @param connection Connection to use\n * @param commitment Desired level of commitment for querying the state\n *\n * @return Amount of lamports required\n */\nexport async function getMinimumBalanceForRentExemptMultisig(\n    connection: Connection,\n    commitment?: Commitment\n): Promise<number> {\n    return await connection.getMinimumBalanceForRentExemption(MULTISIG_SIZE, commitment);\n}\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}