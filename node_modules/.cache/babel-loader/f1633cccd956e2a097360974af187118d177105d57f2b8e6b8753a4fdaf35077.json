{"ast":null,"code":"import _regeneratorRuntime from \"/Users/ivan/Metadata/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _toConsumableArray from \"/Users/ivan/Metadata/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _slicedToArray from \"/Users/ivan/Metadata/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _asyncToGenerator from \"/Users/ivan/Metadata/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { sendAndConfirmTransaction, Transaction } from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID } from '../constants.js';\nimport { createCloseAccountInstruction } from '../instructions/closeAccount.js';\nimport { getSigners } from './internal.js';\n/**\n * Close a token account\n *\n * @param connection     Connection to use\n * @param payer          Payer of the transaction fees\n * @param account        Account to close\n * @param destination    Account to receive the remaining balance of the closed account\n * @param authority      Authority which is allowed to close the account\n * @param multiSigners   Signing accounts if `authority` is a multisig\n * @param confirmOptions Options for confirming the transaction\n * @param programId      SPL Token program account\n *\n * @return Signature of the confirmed transaction\n */\nexport function closeAccount(_x, _x2, _x3, _x4, _x5) {\n  return _closeAccount.apply(this, arguments);\n}\nfunction _closeAccount() {\n  _closeAccount = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(connection, payer, account, destination, authority) {\n    var multiSigners,\n      confirmOptions,\n      programId,\n      _getSigners,\n      _getSigners2,\n      authorityPublicKey,\n      signers,\n      transaction,\n      _args = arguments;\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            multiSigners = _args.length > 5 && _args[5] !== undefined ? _args[5] : [];\n            confirmOptions = _args.length > 6 ? _args[6] : undefined;\n            programId = _args.length > 7 && _args[7] !== undefined ? _args[7] : TOKEN_PROGRAM_ID;\n            _getSigners = getSigners(authority, multiSigners), _getSigners2 = _slicedToArray(_getSigners, 2), authorityPublicKey = _getSigners2[0], signers = _getSigners2[1];\n            transaction = new Transaction().add(createCloseAccountInstruction(account, destination, authorityPublicKey, multiSigners, programId));\n            _context.next = 7;\n            return sendAndConfirmTransaction(connection, transaction, [payer].concat(_toConsumableArray(signers)), confirmOptions);\n          case 7:\n            return _context.abrupt(\"return\", _context.sent);\n          case 8:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _closeAccount.apply(this, arguments);\n}","map":{"version":3,"mappings":";;;;AACA,SAASA,yBAAyB,EAAEC,WAAW,QAAQ,iBAAiB;AACxE,SAASC,gBAAgB,QAAQ,iBAAiB;AAClD,SAASC,6BAA6B,QAAQ,iCAAiC;AAC/E,SAASC,UAAU,QAAQ,eAAe;AAE1C;;;;;;;;;;;;;;AAcA,gBAAsBC,YAAY;EAAA;AAAA;AAiBjC;EAAA,2EAjBM,iBACHC,UAAsB,EACtBC,KAAa,EACbC,OAAkB,EAClBC,WAAsB,EACtBC,SAA6B;IAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;IAAA;MAAA;QAAA;UAAA;YAC7BC,uEAAyB,EAAE;YAC3BC,cAA+B;YAC/BC,SAAS,2DAAGX,gBAAgB;YAAA,cAEUE,UAAU,CAACM,SAAS,EAAEC,YAAY,CAAC,iDAAlEG,kBAAkB,oBAAEC,OAAO;YAE5BC,WAAW,GAAG,IAAIf,WAAW,EAAE,CAACgB,GAAG,CACrCd,6BAA6B,CAACK,OAAO,EAAEC,WAAW,EAAEK,kBAAkB,EAAEH,YAAY,EAAEE,SAAS,CAAC,CACnG;YAAA;YAAA,OAEYb,yBAAyB,CAACM,UAAU,EAAEU,WAAW,GAAGT,KAAK,4BAAKQ,OAAO,IAAGH,cAAc,CAAC;UAAA;YAAA;UAAA;UAAA;YAAA;QAAA;MAAA;IAAA;EAAA,CACvG;EAAA;AAAA","names":["sendAndConfirmTransaction","Transaction","TOKEN_PROGRAM_ID","createCloseAccountInstruction","getSigners","closeAccount","connection","payer","account","destination","authority","multiSigners","confirmOptions","programId","authorityPublicKey","signers","transaction","add"],"sources":["/Users/ivan/Metadata/node_modules/@solana/spl-token/src/actions/closeAccount.ts"],"sourcesContent":["import type { ConfirmOptions, Connection, PublicKey, Signer, TransactionSignature } from '@solana/web3.js';\nimport { sendAndConfirmTransaction, Transaction } from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID } from '../constants.js';\nimport { createCloseAccountInstruction } from '../instructions/closeAccount.js';\nimport { getSigners } from './internal.js';\n\n/**\n * Close a token account\n *\n * @param connection     Connection to use\n * @param payer          Payer of the transaction fees\n * @param account        Account to close\n * @param destination    Account to receive the remaining balance of the closed account\n * @param authority      Authority which is allowed to close the account\n * @param multiSigners   Signing accounts if `authority` is a multisig\n * @param confirmOptions Options for confirming the transaction\n * @param programId      SPL Token program account\n *\n * @return Signature of the confirmed transaction\n */\nexport async function closeAccount(\n    connection: Connection,\n    payer: Signer,\n    account: PublicKey,\n    destination: PublicKey,\n    authority: Signer | PublicKey,\n    multiSigners: Signer[] = [],\n    confirmOptions?: ConfirmOptions,\n    programId = TOKEN_PROGRAM_ID\n): Promise<TransactionSignature> {\n    const [authorityPublicKey, signers] = getSigners(authority, multiSigners);\n\n    const transaction = new Transaction().add(\n        createCloseAccountInstruction(account, destination, authorityPublicKey, multiSigners, programId)\n    );\n\n    return await sendAndConfirmTransaction(connection, transaction, [payer, ...signers], confirmOptions);\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}