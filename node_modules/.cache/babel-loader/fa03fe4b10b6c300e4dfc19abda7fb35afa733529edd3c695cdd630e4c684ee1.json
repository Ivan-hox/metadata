{"ast":null,"code":"import _toConsumableArray from \"/Users/ivan/Metadata/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _createForOfIteratorHelper from \"/Users/ivan/Metadata/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _objectSpread from \"/Users/ivan/Metadata/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _regeneratorRuntime from \"/Users/ivan/Metadata/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"/Users/ivan/Metadata/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _createClass from \"/Users/ivan/Metadata/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _classCallCheck from \"/Users/ivan/Metadata/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _assertThisInitialized from \"/Users/ivan/Metadata/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";\nimport _inherits from \"/Users/ivan/Metadata/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/ivan/Metadata/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nvar __classPrivateFieldSet = this && this.__classPrivateFieldSet || function (receiver, state, value, kind, f) {\n  if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n  return kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;\n};\nvar __classPrivateFieldGet = this && this.__classPrivateFieldGet || function (receiver, state, kind, f) {\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n  return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar _SolanaWalletAdapterWalletAccount_adapter, _SolanaWalletAdapterWallet_instances, _SolanaWalletAdapterWallet_listeners, _SolanaWalletAdapterWallet_adapter, _SolanaWalletAdapterWallet_supportedTransactionVersions, _SolanaWalletAdapterWallet_chain, _SolanaWalletAdapterWallet_endpoint, _SolanaWalletAdapterWallet_account, _SolanaWalletAdapterWallet_connected, _SolanaWalletAdapterWallet_disconnected, _SolanaWalletAdapterWallet_connect, _SolanaWalletAdapterWallet_disconnect, _SolanaWalletAdapterWallet_on, _SolanaWalletAdapterWallet_emit, _SolanaWalletAdapterWallet_off, _SolanaWalletAdapterWallet_deserializeTransaction, _SolanaWalletAdapterWallet_signAndSendTransaction, _SolanaWalletAdapterWallet_signTransaction, _SolanaWalletAdapterWallet_signMessage;\nimport { WalletReadyState } from '@solana/wallet-adapter-base';\nimport { isSolanaChain } from '@solana/wallet-standard-chains';\nimport { getEndpointForChain } from '@solana/wallet-standard-util';\nimport { Connection, Transaction, VersionedTransaction } from '@solana/web3.js';\nimport { getWallets } from '@wallet-standard/app';\nimport { arraysEqual, bytesEqual, ReadonlyWalletAccount } from '@wallet-standard/wallet';\nimport bs58 from 'bs58';\nimport { isVersionedTransaction } from './transaction.js';\n/** TODO: docs */\nexport var SolanaWalletAdapterWalletAccount = /*#__PURE__*/function (_ReadonlyWalletAccoun) {\n  _inherits(SolanaWalletAdapterWalletAccount, _ReadonlyWalletAccoun);\n  var _super = _createSuper(SolanaWalletAdapterWalletAccount);\n  function SolanaWalletAdapterWalletAccount(_ref) {\n    var _this;\n    var adapter = _ref.adapter,\n      address = _ref.address,\n      publicKey = _ref.publicKey,\n      chains = _ref.chains;\n    _classCallCheck(this, SolanaWalletAdapterWalletAccount);\n    var features = ['solana:signAndSendTransaction'];\n    if ('signTransaction' in adapter) {\n      features.push('solana:signTransaction');\n    }\n    if ('signMessage' in adapter) {\n      features.push('solana:signMessage');\n    }\n    _this = _super.call(this, {\n      address: address,\n      publicKey: publicKey,\n      chains: chains,\n      features: features\n    });\n    _SolanaWalletAdapterWalletAccount_adapter.set(_assertThisInitialized(_this), void 0);\n    if ((this instanceof SolanaWalletAdapterWalletAccount ? this.constructor : void 0) === SolanaWalletAdapterWalletAccount) {\n      Object.freeze(_assertThisInitialized(_this));\n    }\n    __classPrivateFieldSet(_assertThisInitialized(_this), _SolanaWalletAdapterWalletAccount_adapter, adapter, \"f\");\n    return _this;\n  }\n  return _createClass(SolanaWalletAdapterWalletAccount);\n}(ReadonlyWalletAccount);\n_SolanaWalletAdapterWalletAccount_adapter = new WeakMap();\n/** TODO: docs */\nexport var SolanaWalletAdapterWallet = /*#__PURE__*/function () {\n  function SolanaWalletAdapterWallet(adapter, chain, endpoint) {\n    var _this2 = this;\n    _classCallCheck(this, SolanaWalletAdapterWallet);\n    _SolanaWalletAdapterWallet_instances.add(this);\n    _SolanaWalletAdapterWallet_listeners.set(this, {});\n    _SolanaWalletAdapterWallet_adapter.set(this, void 0);\n    _SolanaWalletAdapterWallet_supportedTransactionVersions.set(this, void 0);\n    _SolanaWalletAdapterWallet_chain.set(this, void 0);\n    _SolanaWalletAdapterWallet_endpoint.set(this, void 0);\n    _SolanaWalletAdapterWallet_account.set(this, void 0);\n    _SolanaWalletAdapterWallet_connect.set(this, /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n      var _ref3,\n        silent,\n        _args = arguments;\n      return _regeneratorRuntime().wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _ref3 = _args.length > 0 && _args[0] !== undefined ? _args[0] : {}, silent = _ref3.silent;\n              if (!(!silent && !__classPrivateFieldGet(_this2, _SolanaWalletAdapterWallet_adapter, \"f\").connected)) {\n                _context.next = 4;\n                break;\n              }\n              _context.next = 4;\n              return __classPrivateFieldGet(_this2, _SolanaWalletAdapterWallet_adapter, \"f\").connect();\n            case 4:\n              __classPrivateFieldGet(_this2, _SolanaWalletAdapterWallet_instances, \"m\", _SolanaWalletAdapterWallet_connected).call(_this2);\n              return _context.abrupt(\"return\", {\n                accounts: _this2.accounts\n              });\n            case 6:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    })));\n    _SolanaWalletAdapterWallet_disconnect.set(this, /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n      return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return __classPrivateFieldGet(_this2, _SolanaWalletAdapterWallet_adapter, \"f\").disconnect();\n            case 2:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    })));\n    _SolanaWalletAdapterWallet_on.set(this, function (event, listener) {\n      var _classPrivateFieldGe;\n      ((_classPrivateFieldGe = __classPrivateFieldGet(_this2, _SolanaWalletAdapterWallet_listeners, \"f\")[event]) === null || _classPrivateFieldGe === void 0 ? void 0 : _classPrivateFieldGe.push(listener)) || (__classPrivateFieldGet(_this2, _SolanaWalletAdapterWallet_listeners, \"f\")[event] = [listener]);\n      return function () {\n        return __classPrivateFieldGet(_this2, _SolanaWalletAdapterWallet_instances, \"m\", _SolanaWalletAdapterWallet_off).call(_this2, event, listener);\n      };\n    });\n    _SolanaWalletAdapterWallet_signAndSendTransaction.set(this, /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {\n      var outputs,\n        _len,\n        inputs,\n        _key,\n        input,\n        transaction,\n        _ref6,\n        commitment,\n        preflightCommitment,\n        skipPreflight,\n        maxRetries,\n        minContextSlot,\n        _endpoint,\n        connection,\n        latestBlockhash,\n        signature,\n        _iterator,\n        _step,\n        _input,\n        _args3 = arguments;\n      return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              outputs = [];\n              for (_len = _args3.length, inputs = new Array(_len), _key = 0; _key < _len; _key++) {\n                inputs[_key] = _args3[_key];\n              }\n              if (!(inputs.length === 1)) {\n                _context3.next = 29;\n                break;\n              }\n              // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n              input = inputs[0];\n              if (!(input.account !== __classPrivateFieldGet(_this2, _SolanaWalletAdapterWallet_account, \"f\"))) {\n                _context3.next = 6;\n                break;\n              }\n              throw new Error('invalid account');\n            case 6:\n              if (isSolanaChain(input.chain)) {\n                _context3.next = 8;\n                break;\n              }\n              throw new Error('invalid chain');\n            case 8:\n              transaction = __classPrivateFieldGet(_this2, _SolanaWalletAdapterWallet_instances, \"m\", _SolanaWalletAdapterWallet_deserializeTransaction).call(_this2, input.transaction);\n              _ref6 = input.options || {}, commitment = _ref6.commitment, preflightCommitment = _ref6.preflightCommitment, skipPreflight = _ref6.skipPreflight, maxRetries = _ref6.maxRetries, minContextSlot = _ref6.minContextSlot;\n              _endpoint = getEndpointForChain(input.chain, __classPrivateFieldGet(_this2, _SolanaWalletAdapterWallet_endpoint, \"f\"));\n              connection = new Connection(_endpoint, commitment || 'confirmed');\n              if (!commitment) {\n                _context3.next = 18;\n                break;\n              }\n              _context3.next = 15;\n              return connection.getLatestBlockhash({\n                commitment: preflightCommitment || commitment,\n                minContextSlot: minContextSlot\n              });\n            case 15:\n              _context3.t0 = _context3.sent;\n              _context3.next = 19;\n              break;\n            case 18:\n              _context3.t0 = undefined;\n            case 19:\n              latestBlockhash = _context3.t0;\n              _context3.next = 22;\n              return __classPrivateFieldGet(_this2, _SolanaWalletAdapterWallet_adapter, \"f\").sendTransaction(transaction, connection, {\n                preflightCommitment: preflightCommitment,\n                skipPreflight: skipPreflight,\n                maxRetries: maxRetries,\n                minContextSlot: minContextSlot\n              });\n            case 22:\n              signature = _context3.sent;\n              if (!latestBlockhash) {\n                _context3.next = 26;\n                break;\n              }\n              _context3.next = 26;\n              return connection.confirmTransaction(_objectSpread(_objectSpread({}, latestBlockhash), {}, {\n                signature: signature\n              }), commitment || 'confirmed');\n            case 26:\n              outputs.push({\n                signature: bs58.decode(signature)\n              });\n              _context3.next = 53;\n              break;\n            case 29:\n              if (!(inputs.length > 1)) {\n                _context3.next = 53;\n                break;\n              }\n              // Adapters have no `sendAllTransactions` method, so just sign and send each transaction in serial.\n              _iterator = _createForOfIteratorHelper(inputs);\n              _context3.prev = 31;\n              _iterator.s();\n            case 33:\n              if ((_step = _iterator.n()).done) {\n                _context3.next = 45;\n                break;\n              }\n              _input = _step.value;\n              _context3.t1 = outputs.push;\n              _context3.t2 = outputs;\n              _context3.t3 = _toConsumableArray;\n              _context3.next = 40;\n              return __classPrivateFieldGet(_this2, _SolanaWalletAdapterWallet_signAndSendTransaction, \"f\").call(_this2, _input);\n            case 40:\n              _context3.t4 = _context3.sent;\n              _context3.t5 = (0, _context3.t3)(_context3.t4);\n              _context3.t1.apply.call(_context3.t1, _context3.t2, _context3.t5);\n            case 43:\n              _context3.next = 33;\n              break;\n            case 45:\n              _context3.next = 50;\n              break;\n            case 47:\n              _context3.prev = 47;\n              _context3.t6 = _context3[\"catch\"](31);\n              _iterator.e(_context3.t6);\n            case 50:\n              _context3.prev = 50;\n              _iterator.f();\n              return _context3.finish(50);\n            case 53:\n              return _context3.abrupt(\"return\", outputs);\n            case 54:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3, null, [[31, 47, 50, 53]]);\n    })));\n    _SolanaWalletAdapterWallet_signTransaction.set(this, /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4() {\n      var outputs,\n        _len2,\n        inputs,\n        _key2,\n        input,\n        transaction,\n        signedTransaction,\n        serializedTransaction,\n        _iterator2,\n        _step2,\n        _input2,\n        transactions,\n        signedTransactions,\n        _args4 = arguments;\n      return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              if ('signTransaction' in __classPrivateFieldGet(_this2, _SolanaWalletAdapterWallet_adapter, \"f\")) {\n                _context4.next = 2;\n                break;\n              }\n              throw new Error('signTransaction not implemented by adapter');\n            case 2:\n              outputs = [];\n              for (_len2 = _args4.length, inputs = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n                inputs[_key2] = _args4[_key2];\n              }\n              if (!(inputs.length === 1)) {\n                _context4.next = 18;\n                break;\n              }\n              // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n              input = inputs[0];\n              if (!(input.account !== __classPrivateFieldGet(_this2, _SolanaWalletAdapterWallet_account, \"f\"))) {\n                _context4.next = 8;\n                break;\n              }\n              throw new Error('invalid account');\n            case 8:\n              if (!(input.chain && !isSolanaChain(input.chain))) {\n                _context4.next = 10;\n                break;\n              }\n              throw new Error('invalid chain');\n            case 10:\n              transaction = __classPrivateFieldGet(_this2, _SolanaWalletAdapterWallet_instances, \"m\", _SolanaWalletAdapterWallet_deserializeTransaction).call(_this2, input.transaction);\n              _context4.next = 13;\n              return __classPrivateFieldGet(_this2, _SolanaWalletAdapterWallet_adapter, \"f\").signTransaction(transaction);\n            case 13:\n              signedTransaction = _context4.sent;\n              serializedTransaction = isVersionedTransaction(signedTransaction) ? signedTransaction.serialize() : new Uint8Array(signedTransaction.serialize({\n                requireAllSignatures: false,\n                verifySignatures: false\n              }));\n              outputs.push({\n                signedTransaction: serializedTransaction\n              });\n              _context4.next = 43;\n              break;\n            case 18:\n              if (!(inputs.length > 1)) {\n                _context4.next = 43;\n                break;\n              }\n              _iterator2 = _createForOfIteratorHelper(inputs);\n              _context4.prev = 20;\n              _iterator2.s();\n            case 22:\n              if ((_step2 = _iterator2.n()).done) {\n                _context4.next = 30;\n                break;\n              }\n              _input2 = _step2.value;\n              if (!(_input2.account !== __classPrivateFieldGet(_this2, _SolanaWalletAdapterWallet_account, \"f\"))) {\n                _context4.next = 26;\n                break;\n              }\n              throw new Error('invalid account');\n            case 26:\n              if (!(_input2.chain && !isSolanaChain(_input2.chain))) {\n                _context4.next = 28;\n                break;\n              }\n              throw new Error('invalid chain');\n            case 28:\n              _context4.next = 22;\n              break;\n            case 30:\n              _context4.next = 35;\n              break;\n            case 32:\n              _context4.prev = 32;\n              _context4.t0 = _context4[\"catch\"](20);\n              _iterator2.e(_context4.t0);\n            case 35:\n              _context4.prev = 35;\n              _iterator2.f();\n              return _context4.finish(35);\n            case 38:\n              transactions = inputs.map(function (_ref8) {\n                var transaction = _ref8.transaction;\n                return __classPrivateFieldGet(_this2, _SolanaWalletAdapterWallet_instances, \"m\", _SolanaWalletAdapterWallet_deserializeTransaction).call(_this2, transaction);\n              });\n              _context4.next = 41;\n              return __classPrivateFieldGet(_this2, _SolanaWalletAdapterWallet_adapter, \"f\").signAllTransactions(transactions);\n            case 41:\n              signedTransactions = _context4.sent;\n              outputs.push.apply(outputs, _toConsumableArray(signedTransactions.map(function (signedTransaction) {\n                var serializedTransaction = isVersionedTransaction(signedTransaction) ? signedTransaction.serialize() : new Uint8Array(signedTransaction.serialize({\n                  requireAllSignatures: false,\n                  verifySignatures: false\n                }));\n                return {\n                  signedTransaction: serializedTransaction\n                };\n              })));\n            case 43:\n              return _context4.abrupt(\"return\", outputs);\n            case 44:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, _callee4, null, [[20, 32, 35, 38]]);\n    })));\n    _SolanaWalletAdapterWallet_signMessage.set(this, /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5() {\n      var outputs,\n        _len3,\n        inputs,\n        _key3,\n        input,\n        signature,\n        _iterator3,\n        _step3,\n        _input3,\n        _args5 = arguments;\n      return _regeneratorRuntime().wrap(function _callee5$(_context5) {\n        while (1) {\n          switch (_context5.prev = _context5.next) {\n            case 0:\n              if ('signMessage' in __classPrivateFieldGet(_this2, _SolanaWalletAdapterWallet_adapter, \"f\")) {\n                _context5.next = 2;\n                break;\n              }\n              throw new Error('signMessage not implemented by adapter');\n            case 2:\n              outputs = [];\n              for (_len3 = _args5.length, inputs = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n                inputs[_key3] = _args5[_key3];\n              }\n              if (!(inputs.length === 1)) {\n                _context5.next = 14;\n                break;\n              }\n              // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n              input = inputs[0];\n              if (!(input.account !== __classPrivateFieldGet(_this2, _SolanaWalletAdapterWallet_account, \"f\"))) {\n                _context5.next = 8;\n                break;\n              }\n              throw new Error('invalid account');\n            case 8:\n              _context5.next = 10;\n              return __classPrivateFieldGet(_this2, _SolanaWalletAdapterWallet_adapter, \"f\").signMessage(input.message);\n            case 10:\n              signature = _context5.sent;\n              outputs.push({\n                signedMessage: input.message,\n                signature: signature\n              });\n              _context5.next = 38;\n              break;\n            case 14:\n              if (!(inputs.length > 1)) {\n                _context5.next = 38;\n                break;\n              }\n              // Adapters have no `signAllMessages` method, so just sign each message in serial.\n              _iterator3 = _createForOfIteratorHelper(inputs);\n              _context5.prev = 16;\n              _iterator3.s();\n            case 18:\n              if ((_step3 = _iterator3.n()).done) {\n                _context5.next = 30;\n                break;\n              }\n              _input3 = _step3.value;\n              _context5.t0 = outputs.push;\n              _context5.t1 = outputs;\n              _context5.t2 = _toConsumableArray;\n              _context5.next = 25;\n              return __classPrivateFieldGet(_this2, _SolanaWalletAdapterWallet_signMessage, \"f\").call(_this2, _input3);\n            case 25:\n              _context5.t3 = _context5.sent;\n              _context5.t4 = (0, _context5.t2)(_context5.t3);\n              _context5.t0.apply.call(_context5.t0, _context5.t1, _context5.t4);\n            case 28:\n              _context5.next = 18;\n              break;\n            case 30:\n              _context5.next = 35;\n              break;\n            case 32:\n              _context5.prev = 32;\n              _context5.t5 = _context5[\"catch\"](16);\n              _iterator3.e(_context5.t5);\n            case 35:\n              _context5.prev = 35;\n              _iterator3.f();\n              return _context5.finish(35);\n            case 38:\n              return _context5.abrupt(\"return\", outputs);\n            case 39:\n            case \"end\":\n              return _context5.stop();\n          }\n        }\n      }, _callee5, null, [[16, 32, 35, 38]]);\n    })));\n    if ((this instanceof SolanaWalletAdapterWallet ? this.constructor : void 0) === SolanaWalletAdapterWallet) {\n      Object.freeze(this);\n    }\n    var supportedTransactionVersions = _toConsumableArray(adapter.supportedTransactionVersions || ['legacy']);\n    if (!supportedTransactionVersions.length) {\n      supportedTransactionVersions.push('legacy');\n    }\n    __classPrivateFieldSet(this, _SolanaWalletAdapterWallet_adapter, adapter, \"f\");\n    __classPrivateFieldSet(this, _SolanaWalletAdapterWallet_supportedTransactionVersions, supportedTransactionVersions, \"f\");\n    __classPrivateFieldSet(this, _SolanaWalletAdapterWallet_chain, chain, \"f\");\n    __classPrivateFieldSet(this, _SolanaWalletAdapterWallet_endpoint, endpoint, \"f\");\n    adapter.on('connect', __classPrivateFieldGet(this, _SolanaWalletAdapterWallet_instances, \"m\", _SolanaWalletAdapterWallet_connected), this);\n    adapter.on('disconnect', __classPrivateFieldGet(this, _SolanaWalletAdapterWallet_instances, \"m\", _SolanaWalletAdapterWallet_disconnected), this);\n    __classPrivateFieldGet(this, _SolanaWalletAdapterWallet_instances, \"m\", _SolanaWalletAdapterWallet_connected).call(this);\n  }\n  _createClass(SolanaWalletAdapterWallet, [{\n    key: \"version\",\n    get: function get() {\n      return '1.0.0';\n    }\n  }, {\n    key: \"name\",\n    get: function get() {\n      return __classPrivateFieldGet(this, _SolanaWalletAdapterWallet_adapter, \"f\").name;\n    }\n  }, {\n    key: \"icon\",\n    get: function get() {\n      return __classPrivateFieldGet(this, _SolanaWalletAdapterWallet_adapter, \"f\").icon;\n    }\n  }, {\n    key: \"chains\",\n    get: function get() {\n      return [__classPrivateFieldGet(this, _SolanaWalletAdapterWallet_chain, \"f\")];\n    }\n  }, {\n    key: \"features\",\n    get: function get() {\n      var features = {\n        'standard:connect': {\n          version: '1.0.0',\n          connect: __classPrivateFieldGet(this, _SolanaWalletAdapterWallet_connect, \"f\")\n        },\n        'standard:disconnect': {\n          version: '1.0.0',\n          disconnect: __classPrivateFieldGet(this, _SolanaWalletAdapterWallet_disconnect, \"f\")\n        },\n        'standard:events': {\n          version: '1.0.0',\n          on: __classPrivateFieldGet(this, _SolanaWalletAdapterWallet_on, \"f\")\n        },\n        'solana:signAndSendTransaction': {\n          version: '1.0.0',\n          supportedTransactionVersions: __classPrivateFieldGet(this, _SolanaWalletAdapterWallet_supportedTransactionVersions, \"f\"),\n          signAndSendTransaction: __classPrivateFieldGet(this, _SolanaWalletAdapterWallet_signAndSendTransaction, \"f\")\n        }\n      };\n      var signTransactionFeature;\n      if ('signTransaction' in __classPrivateFieldGet(this, _SolanaWalletAdapterWallet_adapter, \"f\")) {\n        signTransactionFeature = {\n          'solana:signTransaction': {\n            version: '1.0.0',\n            supportedTransactionVersions: __classPrivateFieldGet(this, _SolanaWalletAdapterWallet_supportedTransactionVersions, \"f\"),\n            signTransaction: __classPrivateFieldGet(this, _SolanaWalletAdapterWallet_signTransaction, \"f\")\n          }\n        };\n      }\n      var signMessageFeature;\n      if ('signMessage' in __classPrivateFieldGet(this, _SolanaWalletAdapterWallet_adapter, \"f\")) {\n        signMessageFeature = {\n          'solana:signMessage': {\n            version: '1.0.0',\n            signMessage: __classPrivateFieldGet(this, _SolanaWalletAdapterWallet_signMessage, \"f\")\n          }\n        };\n      }\n      return _objectSpread(_objectSpread(_objectSpread({}, features), signTransactionFeature), signMessageFeature);\n    }\n  }, {\n    key: \"accounts\",\n    get: function get() {\n      return __classPrivateFieldGet(this, _SolanaWalletAdapterWallet_account, \"f\") ? [__classPrivateFieldGet(this, _SolanaWalletAdapterWallet_account, \"f\")] : [];\n    }\n  }, {\n    key: \"endpoint\",\n    get: function get() {\n      return __classPrivateFieldGet(this, _SolanaWalletAdapterWallet_endpoint, \"f\");\n    }\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      __classPrivateFieldGet(this, _SolanaWalletAdapterWallet_adapter, \"f\").off('connect', __classPrivateFieldGet(this, _SolanaWalletAdapterWallet_instances, \"m\", _SolanaWalletAdapterWallet_connected), this);\n      __classPrivateFieldGet(this, _SolanaWalletAdapterWallet_adapter, \"f\").off('disconnect', __classPrivateFieldGet(this, _SolanaWalletAdapterWallet_instances, \"m\", _SolanaWalletAdapterWallet_disconnected), this);\n    }\n  }]);\n  return SolanaWalletAdapterWallet;\n}();\n_SolanaWalletAdapterWallet_listeners = new WeakMap(), _SolanaWalletAdapterWallet_adapter = new WeakMap(), _SolanaWalletAdapterWallet_supportedTransactionVersions = new WeakMap(), _SolanaWalletAdapterWallet_chain = new WeakMap(), _SolanaWalletAdapterWallet_endpoint = new WeakMap(), _SolanaWalletAdapterWallet_account = new WeakMap(), _SolanaWalletAdapterWallet_connect = new WeakMap(), _SolanaWalletAdapterWallet_disconnect = new WeakMap(), _SolanaWalletAdapterWallet_on = new WeakMap(), _SolanaWalletAdapterWallet_signAndSendTransaction = new WeakMap(), _SolanaWalletAdapterWallet_signTransaction = new WeakMap(), _SolanaWalletAdapterWallet_signMessage = new WeakMap(), _SolanaWalletAdapterWallet_instances = new WeakSet(), _SolanaWalletAdapterWallet_connected = function _SolanaWalletAdapterWallet_connected() {\n  var _classPrivateFieldGe2;\n  var publicKey = (_classPrivateFieldGe2 = __classPrivateFieldGet(this, _SolanaWalletAdapterWallet_adapter, \"f\").publicKey) === null || _classPrivateFieldGe2 === void 0 ? void 0 : _classPrivateFieldGe2.toBytes();\n  if (publicKey) {\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    var address = __classPrivateFieldGet(this, _SolanaWalletAdapterWallet_adapter, \"f\").publicKey.toBase58();\n    var account = __classPrivateFieldGet(this, _SolanaWalletAdapterWallet_account, \"f\");\n    if (!account || account.address !== address || account.chains.includes(__classPrivateFieldGet(this, _SolanaWalletAdapterWallet_chain, \"f\")) || !bytesEqual(account.publicKey, publicKey)) {\n      __classPrivateFieldSet(this, _SolanaWalletAdapterWallet_account, new SolanaWalletAdapterWalletAccount({\n        adapter: __classPrivateFieldGet(this, _SolanaWalletAdapterWallet_adapter, \"f\"),\n        address: address,\n        publicKey: publicKey,\n        chains: [__classPrivateFieldGet(this, _SolanaWalletAdapterWallet_chain, \"f\")]\n      }), \"f\");\n      __classPrivateFieldGet(this, _SolanaWalletAdapterWallet_instances, \"m\", _SolanaWalletAdapterWallet_emit).call(this, 'change', {\n        accounts: this.accounts\n      });\n    }\n  }\n}, _SolanaWalletAdapterWallet_disconnected = function _SolanaWalletAdapterWallet_disconnected() {\n  if (__classPrivateFieldGet(this, _SolanaWalletAdapterWallet_account, \"f\")) {\n    __classPrivateFieldSet(this, _SolanaWalletAdapterWallet_account, undefined, \"f\");\n    __classPrivateFieldGet(this, _SolanaWalletAdapterWallet_instances, \"m\", _SolanaWalletAdapterWallet_emit).call(this, 'change', {\n      accounts: this.accounts\n    });\n  }\n}, _SolanaWalletAdapterWallet_emit = function _SolanaWalletAdapterWallet_emit(event) {\n  var _classPrivateFieldGe3;\n  for (var _len4 = arguments.length, args = new Array(_len4 > 1 ? _len4 - 1 : 0), _key4 = 1; _key4 < _len4; _key4++) {\n    args[_key4 - 1] = arguments[_key4];\n  }\n  // eslint-disable-next-line prefer-spread\n  (_classPrivateFieldGe3 = __classPrivateFieldGet(this, _SolanaWalletAdapterWallet_listeners, \"f\")[event]) === null || _classPrivateFieldGe3 === void 0 ? void 0 : _classPrivateFieldGe3.forEach(function (listener) {\n    return listener.apply(null, args);\n  });\n}, _SolanaWalletAdapterWallet_off = function _SolanaWalletAdapterWallet_off(event, listener) {\n  var _classPrivateFieldGe4;\n  __classPrivateFieldGet(this, _SolanaWalletAdapterWallet_listeners, \"f\")[event] = (_classPrivateFieldGe4 = __classPrivateFieldGet(this, _SolanaWalletAdapterWallet_listeners, \"f\")[event]) === null || _classPrivateFieldGe4 === void 0 ? void 0 : _classPrivateFieldGe4.filter(function (existingListener) {\n    return listener !== existingListener;\n  });\n}, _SolanaWalletAdapterWallet_deserializeTransaction = function _SolanaWalletAdapterWallet_deserializeTransaction(serializedTransaction) {\n  var transaction = VersionedTransaction.deserialize(serializedTransaction);\n  if (!__classPrivateFieldGet(this, _SolanaWalletAdapterWallet_supportedTransactionVersions, \"f\").includes(transaction.version)) throw new Error('unsupported transaction version');\n  if (transaction.version === 'legacy' && arraysEqual(__classPrivateFieldGet(this, _SolanaWalletAdapterWallet_supportedTransactionVersions, \"f\"), ['legacy'])) return Transaction.from(serializedTransaction);\n  return transaction;\n};\n/** TODO: docs */\nexport function registerWalletAdapter(adapter, chain, endpoint) {\n  var match = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : function (wallet) {\n    return wallet.name === adapter.name;\n  };\n  var _getWallets = getWallets(),\n    register = _getWallets.register,\n    get = _getWallets.get,\n    on = _getWallets.on;\n  var destructors = [];\n  function destroy() {\n    destructors.forEach(function (destroy) {\n      return destroy();\n    });\n    destructors.length = 0;\n  }\n  function setup() {\n    // If the adapter is unsupported, or a standard wallet that matches it has already been registered, do nothing.\n    if (adapter.readyState === WalletReadyState.Unsupported || get().some(match)) return true;\n    // If the adapter isn't ready, try again later.\n    var ready = adapter.readyState === WalletReadyState.Installed || adapter.readyState === WalletReadyState.Loadable;\n    if (ready) {\n      var wallet = new SolanaWalletAdapterWallet(adapter, chain, endpoint);\n      destructors.push(function () {\n        return wallet.destroy();\n      });\n      // Register the adapter wrapped as a standard wallet, and receive a function to unregister the adapter.\n      destructors.push(register(wallet));\n      // Whenever a standard wallet is registered ...\n      destructors.push(on('register', function () {\n        for (var _len5 = arguments.length, wallets = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {\n          wallets[_key5] = arguments[_key5];\n        }\n        // ... check if it matches the adapter.\n        if (wallets.some(match)) {\n          // If it does, remove the event listener and unregister the adapter.\n          destroy();\n        }\n      }));\n    }\n    return ready;\n  }\n  if (!setup()) {\n    var listener = function listener() {\n      if (setup()) {\n        adapter.off('readyStateChange', listener);\n      }\n    };\n    adapter.on('readyStateChange', listener);\n    destructors.push(function () {\n      return adapter.off('readyStateChange', listener);\n    });\n  }\n  return destroy;\n}","map":{"version":3,"mappings":"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","names":["WalletReadyState","isSolanaChain","getEndpointForChain","Connection","Transaction","VersionedTransaction","getWallets","arraysEqual","bytesEqual","ReadonlyWalletAccount","bs58","isVersionedTransaction","SolanaWalletAdapterWalletAccount","adapter","address","publicKey","chains","features","push","_SolanaWalletAdapterWalletAccount_adapter","Object","freeze","__classPrivateFieldSet","SolanaWalletAdapterWallet","chain","endpoint","_SolanaWalletAdapterWallet_listeners","_SolanaWalletAdapterWallet_adapter","_SolanaWalletAdapterWallet_supportedTransactionVersions","_SolanaWalletAdapterWallet_chain","_SolanaWalletAdapterWallet_endpoint","_SolanaWalletAdapterWallet_account","_SolanaWalletAdapterWallet_connect","silent","__classPrivateFieldGet","connected","connect","accounts","_SolanaWalletAdapterWallet_disconnect","disconnect","_SolanaWalletAdapterWallet_on","event","listener","_SolanaWalletAdapterWallet_signAndSendTransaction","outputs","inputs","length","input","account","Error","transaction","options","commitment","preflightCommitment","skipPreflight","maxRetries","minContextSlot","connection","getLatestBlockhash","undefined","latestBlockhash","sendTransaction","signature","confirmTransaction","decode","_SolanaWalletAdapterWallet_signTransaction","signTransaction","signedTransaction","serializedTransaction","serialize","Uint8Array","requireAllSignatures","verifySignatures","transactions","map","signAllTransactions","signedTransactions","_SolanaWalletAdapterWallet_signMessage","signMessage","message","signedMessage","supportedTransactionVersions","on","name","icon","version","signAndSendTransaction","signTransactionFeature","signMessageFeature","off","toBytes","toBase58","includes","args","forEach","apply","filter","existingListener","deserialize","from","registerWalletAdapter","match","wallet","register","get","destructors","destroy","setup","readyState","Unsupported","some","ready","Installed","Loadable","wallets"],"sources":["/Users/ivan/Metadata/node_modules/@solana/wallet-standard-wallet-adapter-react/node_modules/@solana/wallet-standard-wallet-adapter-base/src/wallet.ts"],"sourcesContent":["import type { Adapter } from '@solana/wallet-adapter-base';\nimport { WalletReadyState } from '@solana/wallet-adapter-base';\nimport type { SolanaChain } from '@solana/wallet-standard-chains';\nimport { isSolanaChain } from '@solana/wallet-standard-chains';\nimport type {\n    SolanaSignAndSendTransactionFeature,\n    SolanaSignAndSendTransactionMethod,\n    SolanaSignAndSendTransactionOutput,\n    SolanaSignMessageFeature,\n    SolanaSignMessageMethod,\n    SolanaSignMessageOutput,\n    SolanaSignTransactionFeature,\n    SolanaSignTransactionMethod,\n    SolanaSignTransactionOutput,\n    SolanaTransactionVersion,\n} from '@solana/wallet-standard-features';\nimport { getEndpointForChain } from '@solana/wallet-standard-util';\nimport { Connection, Transaction, VersionedTransaction } from '@solana/web3.js';\nimport { getWallets } from '@wallet-standard/app';\nimport type { Wallet, WalletIcon } from '@wallet-standard/base';\nimport type {\n    ConnectFeature,\n    ConnectMethod,\n    DisconnectFeature,\n    DisconnectMethod,\n    EventsFeature,\n    EventsListeners,\n    EventsNames,\n    EventsOnMethod,\n} from '@wallet-standard/features';\nimport { arraysEqual, bytesEqual, ReadonlyWalletAccount } from '@wallet-standard/wallet';\nimport bs58 from 'bs58';\nimport { isVersionedTransaction } from './transaction.js';\n\n/** TODO: docs */\nexport class SolanaWalletAdapterWalletAccount extends ReadonlyWalletAccount {\n    readonly #adapter: Adapter;\n\n    constructor({\n        adapter,\n        address,\n        publicKey,\n        chains,\n    }: {\n        adapter: Adapter;\n        address: string;\n        publicKey: Uint8Array;\n        chains: ReadonlyArray<SolanaChain>;\n    }) {\n        const features: (keyof (SolanaSignAndSendTransactionFeature &\n            SolanaSignTransactionFeature &\n            SolanaSignMessageFeature))[] = ['solana:signAndSendTransaction'];\n        if ('signTransaction' in adapter) {\n            features.push('solana:signTransaction');\n        }\n        if ('signMessage' in adapter) {\n            features.push('solana:signMessage');\n        }\n\n        super({ address, publicKey, chains, features });\n        if (new.target === SolanaWalletAdapterWalletAccount) {\n            Object.freeze(this);\n        }\n\n        this.#adapter = adapter;\n    }\n}\n\n/** TODO: docs */\nexport class SolanaWalletAdapterWallet implements Wallet {\n    readonly #listeners: {\n        [E in EventsNames]?: EventsListeners[E][];\n    } = {};\n    readonly #adapter: Adapter;\n    readonly #supportedTransactionVersions: ReadonlyArray<SolanaTransactionVersion>;\n    readonly #chain: SolanaChain;\n    readonly #endpoint: string | undefined;\n    #account: SolanaWalletAdapterWalletAccount | undefined;\n\n    get version() {\n        return '1.0.0' as const;\n    }\n\n    get name() {\n        return this.#adapter.name;\n    }\n\n    get icon() {\n        return this.#adapter.icon as WalletIcon;\n    }\n\n    get chains() {\n        return [this.#chain];\n    }\n\n    get features(): ConnectFeature &\n        DisconnectFeature &\n        SolanaSignAndSendTransactionFeature &\n        Partial<SolanaSignTransactionFeature & SolanaSignMessageFeature> {\n        const features: ConnectFeature & DisconnectFeature & EventsFeature & SolanaSignAndSendTransactionFeature = {\n            'standard:connect': {\n                version: '1.0.0',\n                connect: this.#connect,\n            },\n            'standard:disconnect': {\n                version: '1.0.0',\n                disconnect: this.#disconnect,\n            },\n            'standard:events': {\n                version: '1.0.0',\n                on: this.#on,\n            },\n            'solana:signAndSendTransaction': {\n                version: '1.0.0',\n                supportedTransactionVersions: this.#supportedTransactionVersions,\n                signAndSendTransaction: this.#signAndSendTransaction,\n            },\n        };\n\n        let signTransactionFeature: SolanaSignTransactionFeature | undefined;\n        if ('signTransaction' in this.#adapter) {\n            signTransactionFeature = {\n                'solana:signTransaction': {\n                    version: '1.0.0',\n                    supportedTransactionVersions: this.#supportedTransactionVersions,\n                    signTransaction: this.#signTransaction,\n                },\n            };\n        }\n\n        let signMessageFeature: SolanaSignMessageFeature | undefined;\n        if ('signMessage' in this.#adapter) {\n            signMessageFeature = {\n                'solana:signMessage': {\n                    version: '1.0.0',\n                    signMessage: this.#signMessage,\n                },\n            };\n        }\n\n        return { ...features, ...signTransactionFeature, ...signMessageFeature };\n    }\n\n    get accounts() {\n        return this.#account ? [this.#account] : [];\n    }\n\n    get endpoint() {\n        return this.#endpoint;\n    }\n\n    constructor(adapter: Adapter, chain: SolanaChain, endpoint?: string) {\n        if (new.target === SolanaWalletAdapterWallet) {\n            Object.freeze(this);\n        }\n\n        const supportedTransactionVersions = [...(adapter.supportedTransactionVersions || ['legacy'])];\n        if (!supportedTransactionVersions.length) {\n            supportedTransactionVersions.push('legacy');\n        }\n\n        this.#adapter = adapter;\n        this.#supportedTransactionVersions = supportedTransactionVersions;\n        this.#chain = chain;\n        this.#endpoint = endpoint;\n\n        adapter.on('connect', this.#connected, this);\n        adapter.on('disconnect', this.#disconnected, this);\n\n        this.#connected();\n    }\n\n    destroy(): void {\n        this.#adapter.off('connect', this.#connected, this);\n        this.#adapter.off('disconnect', this.#disconnected, this);\n    }\n\n    #connected(): void {\n        const publicKey = this.#adapter.publicKey?.toBytes();\n        if (publicKey) {\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            const address = this.#adapter.publicKey!.toBase58();\n            const account = this.#account;\n            if (\n                !account ||\n                account.address !== address ||\n                account.chains.includes(this.#chain) ||\n                !bytesEqual(account.publicKey, publicKey)\n            ) {\n                this.#account = new SolanaWalletAdapterWalletAccount({\n                    adapter: this.#adapter,\n                    address,\n                    publicKey,\n                    chains: [this.#chain],\n                });\n                this.#emit('change', { accounts: this.accounts });\n            }\n        }\n    }\n\n    #disconnected(): void {\n        if (this.#account) {\n            this.#account = undefined;\n            this.#emit('change', { accounts: this.accounts });\n        }\n    }\n\n    #connect: ConnectMethod = async ({ silent } = {}) => {\n        if (!silent && !this.#adapter.connected) {\n            await this.#adapter.connect();\n        }\n\n        this.#connected();\n\n        return { accounts: this.accounts };\n    };\n\n    #disconnect: DisconnectMethod = async () => {\n        await this.#adapter.disconnect();\n    };\n\n    #on: EventsOnMethod = (event, listener) => {\n        this.#listeners[event]?.push(listener) || (this.#listeners[event] = [listener]);\n        return (): void => this.#off(event, listener);\n    };\n\n    #emit<E extends EventsNames>(event: E, ...args: Parameters<EventsListeners[E]>): void {\n        // eslint-disable-next-line prefer-spread\n        this.#listeners[event]?.forEach((listener) => listener.apply(null, args));\n    }\n\n    #off<E extends EventsNames>(event: E, listener: EventsListeners[E]): void {\n        this.#listeners[event] = this.#listeners[event]?.filter((existingListener) => listener !== existingListener);\n    }\n\n    #deserializeTransaction(serializedTransaction: Uint8Array): Transaction | VersionedTransaction {\n        const transaction = VersionedTransaction.deserialize(serializedTransaction);\n        if (!this.#supportedTransactionVersions.includes(transaction.version))\n            throw new Error('unsupported transaction version');\n        if (transaction.version === 'legacy' && arraysEqual(this.#supportedTransactionVersions, ['legacy']))\n            return Transaction.from(serializedTransaction);\n        return transaction;\n    }\n\n    #signAndSendTransaction: SolanaSignAndSendTransactionMethod = async (...inputs) => {\n        const outputs: SolanaSignAndSendTransactionOutput[] = [];\n\n        if (inputs.length === 1) {\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            const input = inputs[0]!;\n            if (input.account !== this.#account) throw new Error('invalid account');\n            if (!isSolanaChain(input.chain)) throw new Error('invalid chain');\n            const transaction = this.#deserializeTransaction(input.transaction);\n            const { commitment, preflightCommitment, skipPreflight, maxRetries, minContextSlot } = input.options || {};\n            const endpoint = getEndpointForChain(input.chain, this.#endpoint);\n            const connection = new Connection(endpoint, commitment || 'confirmed');\n\n            const latestBlockhash = commitment\n                ? await connection.getLatestBlockhash({\n                      commitment: preflightCommitment || commitment,\n                      minContextSlot,\n                  })\n                : undefined;\n\n            const signature = await this.#adapter.sendTransaction(transaction, connection, {\n                preflightCommitment,\n                skipPreflight,\n                maxRetries,\n                minContextSlot,\n            });\n\n            if (latestBlockhash) {\n                await connection.confirmTransaction(\n                    {\n                        ...latestBlockhash,\n                        signature,\n                    },\n                    commitment || 'confirmed'\n                );\n            }\n\n            outputs.push({ signature: bs58.decode(signature) });\n        } else if (inputs.length > 1) {\n            // Adapters have no `sendAllTransactions` method, so just sign and send each transaction in serial.\n            for (const input of inputs) {\n                outputs.push(...(await this.#signAndSendTransaction(input)));\n            }\n        }\n\n        return outputs;\n    };\n\n    #signTransaction: SolanaSignTransactionMethod = async (...inputs) => {\n        if (!('signTransaction' in this.#adapter)) throw new Error('signTransaction not implemented by adapter');\n        const outputs: SolanaSignTransactionOutput[] = [];\n\n        if (inputs.length === 1) {\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            const input = inputs[0]!;\n            if (input.account !== this.#account) throw new Error('invalid account');\n            if (input.chain && !isSolanaChain(input.chain)) throw new Error('invalid chain');\n            const transaction = this.#deserializeTransaction(input.transaction);\n\n            const signedTransaction = await this.#adapter.signTransaction(transaction);\n\n            const serializedTransaction = isVersionedTransaction(signedTransaction)\n                ? signedTransaction.serialize()\n                : new Uint8Array(\n                      signedTransaction.serialize({\n                          requireAllSignatures: false,\n                          verifySignatures: false,\n                      })\n                  );\n\n            outputs.push({ signedTransaction: serializedTransaction });\n        } else if (inputs.length > 1) {\n            for (const input of inputs) {\n                if (input.account !== this.#account) throw new Error('invalid account');\n                if (input.chain && !isSolanaChain(input.chain)) throw new Error('invalid chain');\n            }\n            const transactions = inputs.map(({ transaction }) => this.#deserializeTransaction(transaction));\n\n            const signedTransactions = await this.#adapter.signAllTransactions(transactions);\n\n            outputs.push(\n                ...signedTransactions.map((signedTransaction) => {\n                    const serializedTransaction = isVersionedTransaction(signedTransaction)\n                        ? signedTransaction.serialize()\n                        : new Uint8Array(\n                              signedTransaction.serialize({\n                                  requireAllSignatures: false,\n                                  verifySignatures: false,\n                              })\n                          );\n\n                    return { signedTransaction: serializedTransaction };\n                })\n            );\n        }\n\n        return outputs;\n    };\n\n    #signMessage: SolanaSignMessageMethod = async (...inputs) => {\n        if (!('signMessage' in this.#adapter)) throw new Error('signMessage not implemented by adapter');\n        const outputs: SolanaSignMessageOutput[] = [];\n\n        if (inputs.length === 1) {\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            const input = inputs[0]!;\n            if (input.account !== this.#account) throw new Error('invalid account');\n\n            const signature = await this.#adapter.signMessage(input.message);\n\n            outputs.push({ signedMessage: input.message, signature });\n        } else if (inputs.length > 1) {\n            // Adapters have no `signAllMessages` method, so just sign each message in serial.\n            for (const input of inputs) {\n                outputs.push(...(await this.#signMessage(input)));\n            }\n        }\n\n        return outputs;\n    };\n}\n\n/** TODO: docs */\nexport function registerWalletAdapter(\n    adapter: Adapter,\n    chain: SolanaChain,\n    endpoint?: string,\n    match: (wallet: Wallet) => boolean = (wallet) => wallet.name === adapter.name\n): () => void {\n    const { register, get, on } = getWallets();\n    const destructors: (() => void)[] = [];\n\n    function destroy(): void {\n        destructors.forEach((destroy) => destroy());\n        destructors.length = 0;\n    }\n\n    function setup(): boolean {\n        // If the adapter is unsupported, or a standard wallet that matches it has already been registered, do nothing.\n        if (adapter.readyState === WalletReadyState.Unsupported || get().some(match)) return true;\n\n        // If the adapter isn't ready, try again later.\n        const ready =\n            adapter.readyState === WalletReadyState.Installed || adapter.readyState === WalletReadyState.Loadable;\n        if (ready) {\n            const wallet = new SolanaWalletAdapterWallet(adapter, chain, endpoint);\n            destructors.push(() => wallet.destroy());\n            // Register the adapter wrapped as a standard wallet, and receive a function to unregister the adapter.\n            destructors.push(register(wallet));\n            // Whenever a standard wallet is registered ...\n            destructors.push(\n                on('register', (...wallets) => {\n                    // ... check if it matches the adapter.\n                    if (wallets.some(match)) {\n                        // If it does, remove the event listener and unregister the adapter.\n                        destroy();\n                    }\n                })\n            );\n        }\n        return ready;\n    }\n\n    if (!setup()) {\n        function listener(): void {\n            if (setup()) {\n                adapter.off('readyStateChange', listener);\n            }\n        }\n\n        adapter.on('readyStateChange', listener);\n        destructors.push(() => adapter.off('readyStateChange', listener));\n    }\n\n    return destroy;\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}