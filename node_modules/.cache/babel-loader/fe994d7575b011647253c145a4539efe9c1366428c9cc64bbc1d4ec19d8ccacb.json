{"ast":null,"code":"import _toArray from \"/Users/ivan/Metadata/node_modules/@babel/runtime/helpers/esm/toArray.js\";\nimport _createForOfIteratorHelper from \"/Users/ivan/Metadata/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport { struct, u8 } from '@solana/buffer-layout';\nimport { SYSVAR_RENT_PUBKEY, TransactionInstruction } from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID } from '../constants.js';\nimport { TokenInvalidInstructionDataError, TokenInvalidInstructionKeysError, TokenInvalidInstructionProgramError, TokenInvalidInstructionTypeError } from '../errors.js';\nimport { TokenInstruction } from './types.js';\n/** TODO: docs */\nexport var initializeMultisigInstructionData = struct([u8('instruction'), u8('m')]);\n/**\n * Construct an InitializeMultisig instruction\n *\n * @param account   Multisig account\n * @param signers   Full set of signers\n * @param m         Number of required signatures\n * @param programId SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\nexport function createInitializeMultisigInstruction(account, signers, m) {\n  var programId = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : TOKEN_PROGRAM_ID;\n  var keys = [{\n    pubkey: account,\n    isSigner: false,\n    isWritable: true\n  }, {\n    pubkey: SYSVAR_RENT_PUBKEY,\n    isSigner: false,\n    isWritable: false\n  }];\n  var _iterator = _createForOfIteratorHelper(signers),\n    _step;\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var signer = _step.value;\n      keys.push({\n        pubkey: signer,\n        isSigner: false,\n        isWritable: false\n      });\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n  var data = Buffer.alloc(initializeMultisigInstructionData.span);\n  initializeMultisigInstructionData.encode({\n    instruction: TokenInstruction.InitializeMultisig,\n    m: m\n  }, data);\n  return new TransactionInstruction({\n    keys: keys,\n    programId: programId,\n    data: data\n  });\n}\n/**\n * Decode an InitializeMultisig instruction and validate it\n *\n * @param instruction Transaction instruction to decode\n * @param programId   SPL Token program account\n *\n * @return Decoded, valid instruction\n */\nexport function decodeInitializeMultisigInstruction(instruction) {\n  var programId = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : TOKEN_PROGRAM_ID;\n  if (!instruction.programId.equals(programId)) throw new TokenInvalidInstructionProgramError();\n  if (instruction.data.length !== initializeMultisigInstructionData.span) throw new TokenInvalidInstructionDataError();\n  var _decodeInitializeMult = decodeInitializeMultisigInstructionUnchecked(instruction),\n    _decodeInitializeMult2 = _decodeInitializeMult.keys,\n    account = _decodeInitializeMult2.account,\n    rent = _decodeInitializeMult2.rent,\n    signers = _decodeInitializeMult2.signers,\n    data = _decodeInitializeMult.data;\n  if (data.instruction !== TokenInstruction.InitializeMultisig) throw new TokenInvalidInstructionTypeError();\n  if (!account || !rent || !signers.length) throw new TokenInvalidInstructionKeysError();\n  // TODO: key checks?\n  return {\n    programId: programId,\n    keys: {\n      account: account,\n      rent: rent,\n      signers: signers\n    },\n    data: data\n  };\n}\n/**\n * Decode an InitializeMultisig instruction without validating it\n *\n * @param instruction Transaction instruction to decode\n *\n * @return Decoded, non-validated instruction\n */\nexport function decodeInitializeMultisigInstructionUnchecked(_ref) {\n  var programId = _ref.programId,\n    _ref$keys = _toArray(_ref.keys),\n    account = _ref$keys[0],\n    rent = _ref$keys[1],\n    signers = _ref$keys.slice(2),\n    data = _ref.data;\n  return {\n    programId: programId,\n    keys: {\n      account: account,\n      rent: rent,\n      signers: signers\n    },\n    data: initializeMultisigInstructionData.decode(data)\n  };\n}","map":{"version":3,"mappings":";;AAAA,SAASA,MAAM,EAAEC,EAAE,QAAQ,uBAAuB;AAElD,SAASC,kBAAkB,EAAEC,sBAAsB,QAAQ,iBAAiB;AAC5E,SAASC,gBAAgB,QAAQ,iBAAiB;AAClD,SACIC,gCAAgC,EAChCC,gCAAgC,EAChCC,mCAAmC,EACnCC,gCAAgC,QAC7B,cAAc;AACrB,SAASC,gBAAgB,QAAQ,YAAY;AAQ7C;AACA,OAAO,IAAMC,iCAAiC,GAAGV,MAAM,CAAoC,CACvFC,EAAE,CAAC,aAAa,CAAC,EACjBA,EAAE,CAAC,GAAG,CAAC,CACV,CAAC;AAEF;;;;;;;;;;AAUA,OAAM,SAAUU,mCAAmC,CAC/CC,OAAkB,EAClBC,OAAoB,EACpBC,CAAS,EACmB;EAAA,IAA5BC,SAAS,uEAAGX,gBAAgB;EAE5B,IAAMY,IAAI,GAAG,CACT;IAAEC,MAAM,EAAEL,OAAO;IAAEM,QAAQ,EAAE,KAAK;IAAEC,UAAU,EAAE;EAAI,CAAE,EACtD;IAAEF,MAAM,EAAEf,kBAAkB;IAAEgB,QAAQ,EAAE,KAAK;IAAEC,UAAU,EAAE;EAAK,CAAE,CACrE;EAAC,2CACmBN,OAAO;IAAA;EAAA;IAA5B,oDAA8B;MAAA,IAAnBO,MAAM;MACbJ,IAAI,CAACK,IAAI,CAAC;QAAEJ,MAAM,EAAEG,MAAM;QAAEF,QAAQ,EAAE,KAAK;QAAEC,UAAU,EAAE;MAAK,CAAE,CAAC;;EACpE;IAAA;EAAA;IAAA;EAAA;EAED,IAAMG,IAAI,GAAGC,MAAM,CAACC,KAAK,CAACd,iCAAiC,CAACe,IAAI,CAAC;EACjEf,iCAAiC,CAACgB,MAAM,CACpC;IACIC,WAAW,EAAElB,gBAAgB,CAACmB,kBAAkB;IAChDd,CAAC,EAADA;GACH,EACDQ,IAAI,CACP;EAED,OAAO,IAAInB,sBAAsB,CAAC;IAAEa,IAAI,EAAJA,IAAI;IAAED,SAAS,EAATA,SAAS;IAAEO,IAAI,EAAJA;EAAI,CAAE,CAAC;AAChE;AAgBA;;;;;;;;AAQA,OAAM,SAAUO,mCAAmC,CAC/CF,WAAmC,EACP;EAAA,IAA5BZ,SAAS,uEAAGX,gBAAgB;EAE5B,IAAI,CAACuB,WAAW,CAACZ,SAAS,CAACe,MAAM,CAACf,SAAS,CAAC,EAAE,MAAM,IAAIR,mCAAmC,EAAE;EAC7F,IAAIoB,WAAW,CAACL,IAAI,CAACS,MAAM,KAAKrB,iCAAiC,CAACe,IAAI,EAClE,MAAM,IAAIpB,gCAAgC,EAAE;EAEhD,4BAGI2B,4CAA4C,CAACL,WAAW,CAAC;IAAA,+CAFzDX,IAAI;IAAIJ,OAAO,0BAAPA,OAAO;IAAEqB,IAAI,0BAAJA,IAAI;IAAEpB,OAAO,0BAAPA,OAAO;IAC9BS,IAAI,yBAAJA,IAAI;EAER,IAAIA,IAAI,CAACK,WAAW,KAAKlB,gBAAgB,CAACmB,kBAAkB,EAAE,MAAM,IAAIpB,gCAAgC,EAAE;EAC1G,IAAI,CAACI,OAAO,IAAI,CAACqB,IAAI,IAAI,CAACpB,OAAO,CAACkB,MAAM,EAAE,MAAM,IAAIzB,gCAAgC,EAAE;EAEtF;EAEA,OAAO;IACHS,SAAS,EAATA,SAAS;IACTC,IAAI,EAAE;MACFJ,OAAO,EAAPA,OAAO;MACPqB,IAAI,EAAJA,IAAI;MACJpB,OAAO,EAAPA;KACH;IACDS,IAAI,EAAJA;GACH;AACL;AAgBA;;;;;;;AAOA,OAAM,SAAUU,4CAA4C,OAInC;EAAA,IAHrBjB,SAAS,QAATA,SAAS;IAAA,0BACTC,IAAI;IAAGJ,OAAO;IAAEqB,IAAI;IAAKpB,OAAO;IAChCS,IAAI,QAAJA,IAAI;EAEJ,OAAO;IACHP,SAAS,EAATA,SAAS;IACTC,IAAI,EAAE;MACFJ,OAAO,EAAPA,OAAO;MACPqB,IAAI,EAAJA,IAAI;MACJpB,OAAO,EAAPA;KACH;IACDS,IAAI,EAAEZ,iCAAiC,CAACwB,MAAM,CAACZ,IAAI;GACtD;AACL","names":["struct","u8","SYSVAR_RENT_PUBKEY","TransactionInstruction","TOKEN_PROGRAM_ID","TokenInvalidInstructionDataError","TokenInvalidInstructionKeysError","TokenInvalidInstructionProgramError","TokenInvalidInstructionTypeError","TokenInstruction","initializeMultisigInstructionData","createInitializeMultisigInstruction","account","signers","m","programId","keys","pubkey","isSigner","isWritable","signer","push","data","Buffer","alloc","span","encode","instruction","InitializeMultisig","decodeInitializeMultisigInstruction","equals","length","decodeInitializeMultisigInstructionUnchecked","rent","decode"],"sources":["/Users/ivan/Metadata/node_modules/@solana/spl-token/src/instructions/initializeMultisig.ts"],"sourcesContent":["import { struct, u8 } from '@solana/buffer-layout';\nimport type { AccountMeta, PublicKey } from '@solana/web3.js';\nimport { SYSVAR_RENT_PUBKEY, TransactionInstruction } from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID } from '../constants.js';\nimport {\n    TokenInvalidInstructionDataError,\n    TokenInvalidInstructionKeysError,\n    TokenInvalidInstructionProgramError,\n    TokenInvalidInstructionTypeError,\n} from '../errors.js';\nimport { TokenInstruction } from './types.js';\n\n/** TODO: docs */\nexport interface InitializeMultisigInstructionData {\n    instruction: TokenInstruction.InitializeMultisig;\n    m: number;\n}\n\n/** TODO: docs */\nexport const initializeMultisigInstructionData = struct<InitializeMultisigInstructionData>([\n    u8('instruction'),\n    u8('m'),\n]);\n\n/**\n * Construct an InitializeMultisig instruction\n *\n * @param account   Multisig account\n * @param signers   Full set of signers\n * @param m         Number of required signatures\n * @param programId SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\nexport function createInitializeMultisigInstruction(\n    account: PublicKey,\n    signers: PublicKey[],\n    m: number,\n    programId = TOKEN_PROGRAM_ID\n): TransactionInstruction {\n    const keys = [\n        { pubkey: account, isSigner: false, isWritable: true },\n        { pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false },\n    ];\n    for (const signer of signers) {\n        keys.push({ pubkey: signer, isSigner: false, isWritable: false });\n    }\n\n    const data = Buffer.alloc(initializeMultisigInstructionData.span);\n    initializeMultisigInstructionData.encode(\n        {\n            instruction: TokenInstruction.InitializeMultisig,\n            m,\n        },\n        data\n    );\n\n    return new TransactionInstruction({ keys, programId, data });\n}\n\n/** A decoded, valid InitializeMultisig instruction */\nexport interface DecodedInitializeMultisigInstruction {\n    programId: PublicKey;\n    keys: {\n        account: AccountMeta;\n        rent: AccountMeta;\n        signers: AccountMeta[];\n    };\n    data: {\n        instruction: TokenInstruction.InitializeMultisig;\n        m: number;\n    };\n}\n\n/**\n * Decode an InitializeMultisig instruction and validate it\n *\n * @param instruction Transaction instruction to decode\n * @param programId   SPL Token program account\n *\n * @return Decoded, valid instruction\n */\nexport function decodeInitializeMultisigInstruction(\n    instruction: TransactionInstruction,\n    programId = TOKEN_PROGRAM_ID\n): DecodedInitializeMultisigInstruction {\n    if (!instruction.programId.equals(programId)) throw new TokenInvalidInstructionProgramError();\n    if (instruction.data.length !== initializeMultisigInstructionData.span)\n        throw new TokenInvalidInstructionDataError();\n\n    const {\n        keys: { account, rent, signers },\n        data,\n    } = decodeInitializeMultisigInstructionUnchecked(instruction);\n    if (data.instruction !== TokenInstruction.InitializeMultisig) throw new TokenInvalidInstructionTypeError();\n    if (!account || !rent || !signers.length) throw new TokenInvalidInstructionKeysError();\n\n    // TODO: key checks?\n\n    return {\n        programId,\n        keys: {\n            account,\n            rent,\n            signers,\n        },\n        data,\n    };\n}\n\n/** A decoded, non-validated InitializeMultisig instruction */\nexport interface DecodedInitializeMultisigInstructionUnchecked {\n    programId: PublicKey;\n    keys: {\n        account: AccountMeta | undefined;\n        rent: AccountMeta | undefined;\n        signers: AccountMeta[];\n    };\n    data: {\n        instruction: number;\n        m: number;\n    };\n}\n\n/**\n * Decode an InitializeMultisig instruction without validating it\n *\n * @param instruction Transaction instruction to decode\n *\n * @return Decoded, non-validated instruction\n */\nexport function decodeInitializeMultisigInstructionUnchecked({\n    programId,\n    keys: [account, rent, ...signers],\n    data,\n}: TransactionInstruction): DecodedInitializeMultisigInstructionUnchecked {\n    return {\n        programId,\n        keys: {\n            account,\n            rent,\n            signers,\n        },\n        data: initializeMultisigInstructionData.decode(data),\n    };\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}